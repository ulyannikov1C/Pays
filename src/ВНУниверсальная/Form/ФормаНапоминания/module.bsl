перем ЮрИсключение Экспорт;
перем ПлатежНаНомерСИМ Экспорт;

Процедура КнопкаПродолжитьНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КнопкаНетНажатие(Элемент)
	Закрыть(Ложь);
КонецПроцедуры

Функция ДобавитьНоменклатуруВТабЧасть(Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, ПерейтиНаКоличество = Ложь, СерийныйНомер = Неопределено, НеДобавлятьСвязанныйТовар = Ложь) // Boke 23.08.2011 
	// Уточняем значение характеристики товара
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Цена = Неопределено;
	
	ОтборТоваров = Новый Структура("Номенклатура", Номенклатура);
	МассивТоваров = Чек.Товары.НайтиСтроки(ОтборТоваров);
	
	Если МассивТоваров.Количество() = 0 Тогда
		ТекущаяСтрока = Чек.Товары.Добавить();
		ТекущаяСтрока.Номенклатура               = Номенклатура;
		ТекущаяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		ТекущаяСтрока.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		ТекущаяСтрока.Коэффициент                = ТекущаяСтрока.ЕдиницаИзмерения.Коэффициент;
		ТекущаяСтрока.Количество                 = Количество;
		ТекущаяСтрока.Склад                		 = Константы.ТекущийМагазин.Получить().ОсновнойСклад;
		
		ТекущаяСтрока.НомерТелефона        		 = НомерТелефона;
		////6836_Ульянников
		//ЗаписатьНомерТелефонаВХЗ(НомерТелефона, ТекущаяСтрока.НомерСтроки);
		////6836_Ульянников
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(Чек.Товары.ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
		
		ТекущаяСтрока.КлючСтроки = МаксКлюч;
		
		УправлениеЗапасами.ДобавитьСоставНабора(ТекущаяСтрока, Чек);
			
		
		Возврат ТекущаяСтрока;
	КонецЕсли;
	
КонецФункции //ДобавитьНоменклатуруВТабЧасть()

Функция ДобавитьПоАртиклу (Артикул)
	//Поищем по артикулу
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ЕдиницаХраненияОстатков
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", СокрЛП(Артикул));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		ДобавитьНоменклатуруВТабЧасть(Выборка.Номенклатура, Неопределено, Выборка.ЕдиницаХраненияОстатков, 1, Ложь); 
		
		Возврат Выборка.Номенклатура;
		
	Иначе
		
		Чек.ВывестиИнформациюОбОшибке("Не найден товар с артикулом " + Артикул);
		
	КонецЕсли;
	
	

КонецФункции

Процедура ДобавитьАкциюВТовары()  Экспорт
	
		
	
	Для каждого стр из Чек.Товары Цикл
		
	//стр.Цена            =   Ценообразование.ПолучитьЦенуНоменклатурыВРознице(ТекущаяДата(), ПараметрыСеанса.ТекущийМагазин, СтрокаТабличнойЧасти.Номенклатура);
	//стр.Сумма           = 2690;
	//
	//стр.СуммаСкидки = стр.Цена - стр.Сумма;
	//
	//стр.СуммаНДС        = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,
	//Истина,
	//Истина,
	//Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

		
		
		
		Если стр.Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.СерийныйТовар тогда
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"Выбрать 
			|		   Составкорзин.Корзина КАК Корзина
			|			
			|		   ИЗ
			|		   Справочник.Акции.Состав  КАК СоставКорзин
			|		   ГДЕ
			|		   СоставКорзин.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Акция);
			Ссыль = Запрос.Выполнить().Выгрузить();
			Для каждого пр ИЗ Ссыль Цикл
				Об = пр.Корзина.ПолучитьОбъект();
			КонецЦикла;
			Для каждого стрр из Об.СоставКорзины Цикл
				Если стр.Номенклатура = стрр.Номенклатура или стр.Номенклатура.ПринадлежитЭлементу(стрр.Номенклатура) тогда
					
					стр.Сумма           = 2690;
					
					стр.СуммаСкидки = стр.Цена - стр.Сумма;
					
					стр.СуммаНДС        = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,
					Истина,
					Истина,
					Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

                    НоменклатураАкц = стр.Номенклатура;
					Серия = СокрЛП(стр.ХарактеристикаНоменклатуры.Наименование);
					
					стр.НомерТелефона = НомерТелефона;
					////6836_Ульянников
					//ЗаписатьНомерТелефонаВХЗ(НомерТелефона, стр.НомерСтроки);
					////6836_Ульянников
			     СтрСкидки  =  Чек.Скидки.Добавить();
				// Присвоили ключу строки ТЧ Скидки номер строки товара из ТЧ Товары
				 СтрСкидки.КлючСтроки = стр.НомерСтроки;
				 СтрСкидки.Сумма  = стр.СуммаСкидки;
				 СтрСкидки.КодРазблокировки = СокрЛП(Акция.Код);
				 СтрСкидки.СкидкаНаценка = Акция.Ссылка;
				// СтрСкидки.Номенклатура = стр.Номенклатура;	
					
			  КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;	
		
		
	КонецЦикла;	
	//Чек.мБонусыМТСРассчитаны = Истина;
	//Чек.ЕстьНестандартнаяАкция= Истина;
	  // Попытка
	  //Чек.Записать();
	  // Исключение
	  // КонецПопытки;
	
   КонецПроцедуры	
   
Функция ПолучитьСебестоимостьТовара(Номенклатура,ХарактеристикаНоменклатуры) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов(Массив); 
	Массив.Очистить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТиповХарактеристика = Новый ОписаниеТипов(Массив);
	Массив.Очистить();
	
	ТабОстатки = Новый ТаблицаЗначений;
	ТабОстатки.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатура);
	ТабОстатки.Колонки.Добавить("ХарактеристикаНоменклатуры", ОписаниеТиповХарактеристика);
	
	НС = ТабОстатки.Добавить();
	НС.Номенклатура = Номенклатура.Ссылка;
	НС.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//Подсовываем номенклатуру
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    Т.Номенклатура,
	|    Т.ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|    &Таб КАК Т";
	Запрос.Параметры.Вставить("Таб",ТабОстатки);
	Запрос.Выполнить();
	
	Запрос.Параметры.Вставить("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("Склад", 		ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад);
	Запрос.УстановитьПараметр("Магазин",    ПараметрыСеанса.ТекущийМагазин);
	Запрос.УстановитьПараметр("ТипЦенСебестоимость",    Константы.ТипЦенСебестоимость.Получить());
	Запрос.Текст ="ВЫБРАТЬ
	|	Остатки.Номенклатура.Код КАК Код,
	|	Остатки.Номенклатура.Артикул КАК Артикул,
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ЦеныНоменклатурыМагазиновСрезПоследних.Цена,
	|	ВЫБОР
	|		КОГДА Остатки.ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ЦеныНоменклатурыМагазиновСрезПоследних.Цена ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Остатки.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК ХарДляСравнения,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныНоменклатурыСрезПоследнихПустаяХарактеристика.Цена
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
	|	КОНЕЦ КАК ЦенаСебестоимость
	|ПОМЕСТИТЬ ЦеныПоХарактеристикам
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыМагазинов.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Остатки.Номенклатура
	|						ИЗ
	|							Остатки КАК Остатки)
	|					И Магазин = &Магазин) КАК ЦеныНоменклатурыМагазиновСрезПоследних
	|		ПО Остатки.Номенклатура = ЦеныНоменклатурыМагазиновСрезПоследних.Номенклатура
	|			И Остатки.ХарактеристикаНоменклатуры = ЦеныНоменклатурыМагазиновСрезПоследних.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Остатки.Номенклатура
	|						ИЗ
	|							Остатки КАК Остатки)
	|					И ТипЦен = &ТипЦенСебестоимость) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Остатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Остатки.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Остатки.Номенклатура
	|						ИЗ
	|							Остатки КАК Остатки)
	|					И ТипЦен = &ТипЦенСебестоимость) КАК ЦеныНоменклатурыСрезПоследнихПустаяХарактеристика
	|		ПО Остатки.Номенклатура = ЦеныНоменклатурыСрезПоследнихПустаяХарактеристика.Номенклатура
	|			И (ЦеныНоменклатурыСрезПоследнихПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоХарактеристикам.Код,
	|	ЦеныПоХарактеристикам.Артикул КАК Артикул,
	|	ЦеныПоХарактеристикам.Номенклатура,
	|	ЦеныПоХарактеристикам.ХарактеристикаНоменклатуры,
	|	ЦеныПоХарактеристикам.ЕдиницаИзмерения,
	|	ЦеныПоХарактеристикам.Коэффициент,
	|	ВЫБОР
	|		КОГДА ЦеныПоХарактеристикам.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныНоменклатурыМагазиновСрезПоследних.Цена
	|		ИНАЧЕ ЦеныПоХарактеристикам.Цена
	|	КОНЕЦ КАК Цена,
	|	ЦеныПоХарактеристикам.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	1 КАК ТехнологическоеПоле,
	|	ЦеныПоХарактеристикам.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ЦеныПоХарактеристикам.ЦенаСебестоимость ЕСТЬ NULL 
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ ЦеныПоХарактеристикам.ЦенаСебестоимость
	|	КОНЕЦ КАК ЦенаСебестоимость
	|ИЗ
	|	ЦеныПоХарактеристикам КАК ЦеныПоХарактеристикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыМагазинов.СрезПоследних(
	|				&Дата,
	|				Магазин = &Магазин
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							Остатки.Номенклатура
	|						ИЗ
	|							Остатки КАК Остатки)
	|					И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыМагазиновСрезПоследних
	|		ПО ЦеныПоХарактеристикам.Номенклатура = ЦеныНоменклатурыМагазиновСрезПоследних.Номенклатура
	|			И ЦеныПоХарактеристикам.ХарДляСравнения = ЦеныНоменклатурыМагазиновСрезПоследних.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							Остатки.Номенклатура
	|						ИЗ
	|							Остатки КАК Остатки)
	|					И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ТипЦен = &ТипЦенСебестоимость) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ЦеныПоХарактеристикам.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ЦеныПоХарактеристикам.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|
	|";  
	
	текТаблица = Запрос.Выполнить().Выгрузить();	
	
	Себестоимость = 0;
	Для К=0 По текТаблица.Количество()-1 Цикл
		Себестоимость = текТаблица[К].ЦенаСебестоимость;
	КонецЦикла;
	
	Возврат Себестоимость;
КонецФункции
   
 
Функция НайтиВАкции(пПараметр = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад);
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеСклады 		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если пПараметр = неопределено тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(АкцииУчастникиАкции.СуммаДо) КАК СуммаДо
		|ИЗ
		|	Справочник.Акции.УчастникиАкции КАК АкцииУчастникиАкции
		|ГДЕ
		|	АкцииУчастникиАкции.Склад_ТТ В(&Склад_ТТ)
		|	И АкцииУчастникиАкции.Ссылка = &Акция";
		
		Запрос.УстановитьПараметр("Склад_ТТ", ВсеСклады);
		Запрос.УстановитьПараметр("Акция", Акция);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Возврат  ВыборкаДетальныеЗаписи.СуммаДо;
			
			
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(АкцииУчастникиАкции.СуммаОт) КАК СуммаОт
		|ИЗ
		|	Справочник.Акции.УчастникиАкции КАК АкцииУчастникиАкции
		|ГДЕ
		|	АкцииУчастникиАкции.Склад_ТТ В(&Склад_ТТ)
		|	И АкцииУчастникиАкции.Ссылка = &Акция";
		
		Запрос.УстановитьПараметр("Склад_ТТ", ВсеСклады);
		Запрос.УстановитьПараметр("Акция", Акция);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Возврат  ВыборкаДетальныеЗаписи.СуммаОт;
			
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	Возврат 0 ;
	
	
	
КонецФункции	

Функция гКопейки(Значение) Экспорт
	Руб=Цел(Значение);
	Коп=Значение-Руб;
	Возврат(Коп * 100);
КонецФункции




 Функция  ОпределитьПлатежПоАдресу(Адрес) Экспорт
	 Если ПереключательОпций1 = 4 тогда
		 УчастникиПлатеж = Акция.УчастникиАкции.Выгрузить();
		 для каждого стр из УчастникиПлатеж Цикл 
			 Если стр.Склад_ТТ = ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад.Ссылка ИЛИ 
				 ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад.Ссылка.ПринадлежитЭлементу(стр.Склад_ТТ) тогда
				 Платежик = стр.СуммаДо;
				 прервать;
			 КонецЕсли;
		 КонецЦикла;	  
		 Если ЗначениеЗаполнено(Платежик) тогда
			 Если Платежик <>""  И (ТипЗнч(Платежик) = Тип("Число")) тогда
				 
				 
				 Возврат Платежик;
				 
			 КонецЕсли;
		 КонецЕсли;	
	 КонецЕсли; 
	 Возврат 0;   
	 
КонецФункции
   
Процедура ДобавитьПлатежАкциюВТовары()  Экспорт
	ТЗВыгрузки = Новый ТаблицаЗначений;
	АтрибутыС = Акция.Атрибуты.Найти("Размер платежа", "НазваниеАтрибута");
	Если АтрибутыС <> неопределено тогда
		АтрибутыЗнач = ОбщегоНазначения.ПривестиСтрокуКЧислу(АтрибутыС.ЗначениеАтрибута);
	КонецЕсли;	
	Если АтрибутыЗнач <> неопределено тогда
		ПлатежРегион = АтрибутыЗнач;//ОпределитьПлатежПоАдресу(ПараметрыСеанса.ТекущийМагазин.ФактическийАдрес);
	Иначе
		Если ПлатежРегион = 0 Тогда
			ПлатежРегион = ОпределитьПлатежПоАдресу(ПараметрыСеанса.ТекущийМагазин.ФактическийАдрес);
		КонецЕсли;

	КонецЕсли;
	Если ПлатежРегион = 0 тогда
		
		Предупреждение("ВНИМАНИЕ! В справочнике ""Акции"" не проставлена сумма автоматического платежа по данной акции. 
		               |Обратитесь в отдел маркетинга");
		Отказать = Истина;			   
		Чек.Купоны.Очистить();
		Чек.Скидки.Очистить();
		
		для каждого стр из Чек.Товары Цикл
			стр.СуммаСкидки = 0;
			стр.Сумма = стр.Цена*стр.Количество;
			попытка
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(стр, Чек);
			исключение
			КонецПопытки;
			
		КонецЦикла;	
		Закрыть(Ложь);
		Возврат;

	КонецЕсли;
	Если Чек.Контракты.Количество() > 0 Тогда
		ВыгрузкаКонтракты = Чек.Контракты.Выгрузить();
		ТЗВыгрузки = ВыгрузкаКонтракты;		
		Чек.Контракты.Очистить();		
	КонецЕсли;	

	CyberPlat = ПОлучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
	Если CyberPlat = Неопределено  Тогда
		Предупреждение("Не удалось получить обработку <CyberPlat>!
		|Операция с платежами не возможна!
		|");
		Отказать = Истина;
		Чек.Купоны.Очистить();
		Чек.Скидки.Очистить();
		
		для каждого стр из Чек.Товары Цикл
			стр.СуммаСкидки = 0;
			стр.Сумма = стр.Цена*стр.Количество;
			попытка
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(стр, Чек);
			исключение
			КонецПопытки;
			
		КонецЦикла;	
		Если ТЗВыгрузки.Количество() > 0 Тогда			
			Чек.Контракты.Загрузить(ТЗВыгрузки);		
		КонецЕсли;
		Закрыть(Ложь);
		Возврат;
	КонецЕсли;
	Попытка		
		CyberPlat.ДокументОбъект = Чек;
		
		// (+) gare 21.09.2011
		//Если CyberPlat.Метаданные().Реквизиты.Найти("ВходящийНомерТелефона") <> Неопределено Тогда
		//	CyberPlat.ВходящийНомерТелефона = ДокументКонтракт.НомерТелефона;  // (+) gare 20.09.2011
		//КонецЕсли;
		// > gare 21.09.2011
		
		Если CyberPlat.Метаданные().Формы.Найти("ФормаДобавленияПлатежаПоПровайдеру")=Неопределено тогда
			Ф=CyberPlat.ПолучитьФорму("Форма", ЭтаФорма);
		Иначе
			ТелДляПлатежа=НомерТелефона;
			//принимает только такой формат 9191112233
			ТелДляПлатежа=СтрЗаменить(ТелДляПлатежа,"+7",""); 
			ТелДляПлатежа=СтрЗаменить(ТелДляПлатежа,"-",""); 
			ТелДляПлатежа=СтрЗаменить(ТелДляПлатежа," ",""); 
			ТелДляПлатежа=СтрЗаменить(ТелДляПлатежа,"(",""); 
			ТелДляПлатежа=СтрЗаменить(ТелДляПлатежа,")",""); 					
			
			Ф=CyberPlat.ПолучитьФорму("ФормаДобавленияПлатежаПоПровайдеру", ЭтаФорма);
			Ф.БлокироватьСумму=Истина;
			Ф.СуммаПлатежаВвод=ПлатежРегион; 
			
			
			Чек.ДополнительныеСвойства.Вставить("Примечание", СтрЗаменить(СокрЛП(ПлатежРегион), Символы.НПП,""));
			Ф.ЭлементыФормы.ПривязатьКарту.Видимость = Ложь;
			Ф.ЭлементыФормы.ПривязатьКарту.Доступность = Ложь;
            Ф.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПлатежКиберСдача.Доступность = Ложь;
			Попытка
				ПФ = Справочники.ПараметрыФункционала.НайтиПоНаименованию("КиберСдача", Истина,,);
				ОПФ = 	ПФ.ПолучитьОбъект();
				ОПФ.Включен = Ложь;
				
				ОПФ.Записать();
			Исключение
			КонецПопытки; 
			
			Ф.ЭлементыФормы.РеквизитыПлатежа.Доступность = Ложь;
			Ф.ЭлементыФормы.РеквизитыПлатежа.ТолькоПросмотр = Истина;
			//Ф.МинимальнаяСумма=Ф.СуммаПлатежаВвод; //Сумму не блокируем для изменений, но ограничиваем снизу
			ВхПараметры=Новый ТаблицаЗначений;//Ф.ВхПараметры;
			ВхПараметры.Колонки.Добавить("ID");
			ВхПараметры.Колонки.Добавить("Value");
			
			НС=ВхПараметры.Добавить();
			НС.ID="type";
			НС.Value="phone";
			
			НС=ВхПараметры.Добавить();
			НС.ID="100"; //Номер телефона
			НС.Value=ТелДляПлатежа;
			
			НС=ВхПараметры.Добавить();
			НС.ID="101"; //Номер счета
			НС.Value="";
			
			Ф.ВхПараметры=ВхПараметры;
		КонецЕсли;
		Ф.ОткрытьМодально();
		Результ = Ложь;
		Для каждого стр из Чек.Товары Цикл
			
			Если стр.Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.УслугаТерминалаУслуг и (НомерТелефонаЦифрами1(стр.НомерТелефона)= НомерТелефона) И стр.Сумма = ПлатежРегион тогда
				Результ = Истина; 
				прервать;
			КонецЕсли;   
		КонецЦикла;
		Если Результ = Ложь тогда
			Предупреждение("Платеж не был добавлен в чек. Проводится обычная продажа");
			Попытка
				ПФ = Справочники.ПараметрыФункционала.НайтиПоНаименованию("КиберСдача", Истина,,);
				ОПФ = 	ПФ.ПолучитьОбъект();
				ОПФ.Включен = Истина;
				
				ОПФ.Записать();
				
			Исключение
			КонецПопытки;
            Если ТЗВыгрузки.Количество() > 0 Тогда			
				Чек.Контракты.Загрузить(ТЗВыгрузки);		
			КонецЕсли;
			Отказать = Истина;
			Возврат;
		КонецЕсли;	
		Попытка
			ПФ = Справочники.ПараметрыФункционала.НайтиПоНаименованию("КиберСдача", Истина,,);
			ОПФ = 	ПФ.ПолучитьОбъект();
			ОПФ.Включен = Истина;
			
			ОПФ.Записать();
			
		Исключение
		КонецПопытки;
		
	Исключение
		
		
		Предупреждение("Платеж на указанный номер телефона не может быть совершен по техническим причинам. Попробуйте позднее");
		Попытка
			ПФ = Справочники.ПараметрыФункционала.НайтиПоНаименованию("КиберСдача", Истина,,);
			ОПФ = 	ПФ.ПолучитьОбъект();
			ОПФ.Включен = Истина;
			
			ОПФ.Записать();
		Исключение
		КонецПопытки;
		Если ТЗВыгрузки.Количество() > 0 Тогда			
			Чек.Контракты.Загрузить(ТЗВыгрузки);		
		КонецЕсли;
		Отказать = Истина;
		Возврат;
		
	КонецПопытки;	
	Если ТЗВыгрузки.Количество() > 0 И Чек.Контракты.Количество() = 0 Тогда			
		Чек.Контракты.Загрузить(ТЗВыгрузки);		
	КонецЕсли;
			
	
	
	
	//КонецЦикла;	
	//Чек.мБонусыМТСРассчитаны = Истина;
	//Чек.ЕстьНестандартнаяАкция= Истина;
	//Чек.ДополнительныеСвойства.Вставить("НомерТелефона", НомерТелефона);
	// Попытка
	//Чек.Записать();
	// Исключение
	// КонецПопытки;
	
КонецПроцедуры   
 Функция ПолучитьГруппуТовара(Товар) 
	рез="";
	текСвойство = РАРУС_ДобавленныеПроцедуры.ПолучитьСвойствоОбъекта(Товар , "Тип товара" );
	Если ЗначениеЗаполнено(текСвойство) Тогда
		рез= Лев(""+текСвойство.Код,9);
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции
Функция  ЕстьСпецсимволы(пСтрокаПроверки, пСтрокаСпецсимволы) Экспорт 
	Результат	= Ложь;
	Если НЕ ЗначениеЗаполнено(пСтрокаПроверки) Тогда  Возврат Ложь;  КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(пСтрокаСпецсимволы) Тогда  Возврат Ложь;  КонецЕсли;	
		
	Для ПЦ=1 По СтрДлина(пСтрокаСпецсимволы) Цикл 
		Если Найти(пСтрокаПроверки, Сред(пСтрокаСпецсимволы, ПЦ, 1)) <> 0 Тогда 
			Результат	= Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	
  
   
Процедура КонтрактПриДобавленииВЧек(НоменклатураСсылка) Экспорт
	
			
		ФормаВыбораХарактеристики = Чек.ПолучитьФорму("ФормаВыбораХарактеристикНоменклатуры", Этаформа, ЭтаФорма);
		ФормаВыбораХарактеристики.Номенклатура = НоменклатураСсылка;
		ФормаВыбораХарактеристики.Магазин      = ПараметрыСеанса.ТекущийМагазин;
		
		ФормаВыбораХарактеристики.ОткрытьМодально();
		
		Если Не ФормаВыбораХарактеристики.мЗначениеВыбрано Тогда
			Возврат;	
		КонецЕсли;
		
		// Обработаем результат выбора характеристики
		ХарактеристикаНоменклатуры = ФормаВыбораХарактеристики.ВыбранноеЗначение;		
		
		//{РТК_CQ8075_16.03.2012_20:29:31_Ульянников
		 КодГруппы = ПолучитьГруппуТовара(НоменклатураСсылка);
		 Если КодГруппы = "GO0018995" ИЛИ КодГруппы ="GO0035009" Тогда
			 ПолеВводаСерийныйНомерСимКарты ="";
			 КонтрольныйСимволСимКарты = 0;
			 
			 
			 Если НЕ ВвестиСтроку(КонтрольныйСимволСимКарты, "Контрольная цифра: "+СокрЛП(ХарактеристикаНоменклатуры.Наименование), 1)  Тогда
				 //	 пользователь отказался от ввода 
				 возврат ;
				 Отказ = Истина;
			 КонецЕсли;
			 Если НЕ ЗначениеЗаполнено(КонтрольныйСимволСимКарты) Тогда
				 предупреждение("Не заполнен контрольный символ. Попробуйте заново и заполните контрольный символ");
				 возврат;
			 конецЕсли;	
			 пНашлиАнглийскиеБуквы 	=  РТК_ДобавленныеПроцедуры.ПроверитьРегулярноеВыражение("[a-zA-Z]",КонтрольныйСимволСимКарты);
			 пНашлиРусскиеБуквы 		=  РТК_ДобавленныеПроцедуры.ПроверитьРегулярноеВыражение("[а-яА-Я]",КонтрольныйСимволСимКарты);	
			 пНашлиСпецсимволы 		=  ЕстьСпецсимволы(КонтрольныйСимволСимКарты,"^~!""№@#$&{}][;%+:?*()_=\.,/-");
			 Если пНашлиАнглийскиеБуквы или пНашлиРусскиеБуквы или пНашлиСпецСимволы  Тогда
				 предупреждение("Контрольным символом может быть только цифра от 0 до 9");
				 возврат;
			 конецЕсли;	
			 
			 
			 
			 ТарифКонтракта = Неопределено;
			 
			 ДокументКонтракт = Документы.Контракт.СоздатьДокумент();
			 
			 			 
			 //Создание контракта
			 ДокументКонтракт = Документы.Контракт.СоздатьДокумент();
			 ДокументКонтракт.ПолисДокументПродажи = Чек.Ссылка;
			 ФормаДок = ДокументКонтракт.ПолучитьФорму(, ЭтаФорма, ЭтаФорма);
			 
			 ДокументКонтракт.ВидОперации 	= Перечисления.ВидыОперацийДокументаКонтракт.КонтрактМТС;
			 ДокументКонтракт.СимКарта 					= НоменклатураСсылка;
			 ДокументКонтракт.ICC 						= ХарактеристикаНоменклатуры;
			 ДокументКонтракт.КонтрольныйСимволСимКарты 	= СокрЛП(КонтрольныйСимволСимКарты);
			 
			 //заполнение тарифа
			 Если Не ТарифКонтракта = Неопределено Тогда
				 ДокументКонтракт.Тариф = ТарифКонтракта;
			 КонецЕсли;
			 //	//Получение ссылки на объект
			 Попытка
				 Чек.Записать(РежимЗаписиДокумента.Запись);
			 Исключение
				 Сообщить("Ошибка записи чека ККМ." + Символы.ПС + ОписаниеОшибки());
			 КонецПопытки; 
			 
			 
			 
			 ФормаДок.ОткрытьМодально();
						 
			 Если ДокументКонтракт.Проведен 
				 И НЕ Чек.Проведен Тогда
				Если ТипЗнч(ДокументКонтракт.Контрагент)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ДокументКонтракт.НапечататьКонтракт(,Ложь);
		        КонецЕсли;
				 КлючСвязиКонтракт = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(Чек, "Контракты");
				 НоваяСтрокаКонтракта = Чек.Контракты.Добавить();
				 НоваяСтрокаКонтракта.Контракт = ДокументКонтракт.Ссылка; // Boke 01.11.2010 Для отправки контракта в центр
				 НоваяСтрокаКонтракта.КлючСвязи = КлючСвязиКонтракт;
				 
				 КоличествоДо = Чек.Товары.Количество();
				 
				 КоличествоДобавленных = 0;
				 
				 
				 СтрокаТабличнойЧасти = Чек.Товары.Добавить();
				 
				 СтрокаТабличнойЧасти.Номенклатура 				= ДокументКонтракт.СимКарта;
				 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ДокументКонтракт.ICC;
				 СтрокаТабличнойЧасти.Количество					= 1;
				 СтрокаТабличнойЧасти.КлючСвязки					= 1;  //Ульянников_8075_ВАЖНЫЕ ИЗМЕНЕНИЯ
				 
				 СтрокаТабличнойЧасти.КлючСвязиКонтракты			= КлючСвязиКонтракт;
				 СтрокаТабличнойЧасти.НомерТелефона				= ДокументКонтракт.НомерТелефона;
				 //СтрокаТабличнойЧасти.ФлагСтрокаИзРезервирования = текКонтрактПоРезервуИМ; // Boke 23.08.2011 строка по контракту из резерву
				 СтрокаТабличнойЧасти.ЕдиницаИзмерения			= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков; // Boke 24.08.2011 при добавлении по контрактам ИМ надо проставить явно
				 СтрокаТабличнойЧасти.Коэффициент				= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент; // Boke 24.08.2011 
				 
				// ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, Истина, Истина);
				 //Ульянников_8075_ВАЖНЫЕ ИЗМЕНЕНИЯ
				 
				 КоличествоДобавленных = КоличествоДобавленных + 1;
				 
				 Если Чек.Товары.Количество()>КоличествоДо И 
					 (ДокументКонтракт.ВидОперации = Перечисления.ВидыОперацийДокументаКонтракт.КонтрактМТС) 
					 Тогда
					 
					 СтрокаТабличнойЧасти = Чек.Товары.Добавить();
					 
					 СтрокаТабличнойЧасти.Номенклатура 				= ДокументКонтракт.Тариф;
					 СтрокаТабличнойЧасти.Количество					= 1;
					 СтрокаТабличнойЧасти.КлючСвязки					= 2;
					 СтрокаТабличнойЧасти.КлючСвязиКонтракты			= КлючСвязиКонтракт;
					 СтрокаТабличнойЧасти.НомерТелефона				= ДокументКонтракт.НомерТелефона;
					 //СтрокаТабличнойЧасти.ФлагСтрокаИзРезервирования = текКонтрактПоРезервуИМ; // Boke 23.08.2011 строка по контракту из резерву
					 //{04.06.2013 3389 Ulyannikov
					 Попытка
					 СтрокаТабличнойЧасти.Цена            = Ценообразование.ПолучитьЦенуНоменклатурыВРознице(ТекущаяДата(), ПараметрыСеанса.ТекущийМагазин, СтрокаТабличнойЧасти.Номенклатура);
					 СтрокаТабличнойЧасти.Сумма           = 0;//СтрокаТабличнойЧасти.Цена*строкаТабличнойЧасти.Количество;
					 СтрокаТабличнойЧасти.СуммаНДС        = 0;//Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
					 СтрокаТабличнойЧасти.СуммаСкидки     =  СтрокаТабличнойЧасти.Цена;
					 //Истина,
					 //Истина,
					 //Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				     Исключение
					 КонецПопытки;
					 //04.06.2013 3389 Ulyannikov}

					 // Boke 24.08.2011 + {
					 СтрокаТабличнойЧасти.ЕдиницаИзмерения			= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков; // Boke 24.08.2011 при добавлении по контрактам ИМ надо проставить явно
					 СтрокаТабличнойЧасти.Коэффициент				= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент; //
					 
                     //Чек.НомерТелефона = СтрокаТабличнойЧасти.НомерТелефона;
              конецЕсли;

           КонецЕсли;
	     КонецЕсли;
	 
	 
 КонецПроцедуры	
 //РТК_Ульянников_9288

  
   
   
Процедура ДобавитьКредитИАкциюВТовары()  Экспорт
	
	
	Если ЗначениеЗаполнено(НомерТелефона) тогда
			
			ТелефН =  СокрЛП(НомерТелефона);
			//ТекстВЧек = стрЗАменить(Акция.ТекстПодсказки, "*****", ТелефН );
			ТекстВЧек = стрЗаменить((стрЗАменить(Акция.ТекстПодсказки, "*****", ТелефН )),"###",КоличествоМес);
			//САкция = Акция.ПолучитьОбъект();
			//
			//САкция.ТекстПодсказки = ТекстВЧек;
			//
			//САкция.Записать();
			
			
		КонецЕсли;	

	
	Для каждого стр из Чек.Товары Цикл
		
	//стр.Цена            =   Ценообразование.ПолучитьЦенуНоменклатурыВРознице(ТекущаяДата(), ПараметрыСеанса.ТекущийМагазин, СтрокаТабличнойЧасти.Номенклатура);
	//стр.Сумма           = 2690;
	//
	//стр.СуммаСкидки = стр.Цена - стр.Сумма;
	//
	//стр.СуммаНДС        = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,
	//Истина,
	//Истина,
	//Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

		
		
		
		Если стр.Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.СерийныйТовар тогда
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"Выбрать 
			|		   Составкорзин.Корзина КАК Корзина
			|			
			|		   ИЗ
			|		   Справочник.Акции.Состав  КАК СоставКорзин
			|		   ГДЕ
			|		   СоставКорзин.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Акция);
			Ссыль = Запрос.Выполнить().Выгрузить();
			Для каждого пр ИЗ Ссыль Цикл
				Об = пр.Корзина.ПолучитьОбъект();
			КонецЦикла;
			Для каждого стрр из Об.СоставКорзины Цикл
				Если стр.Номенклатура = стрр.Номенклатура или стр.Номенклатура.ПринадлежитЭлементу(стрр.Номенклатура) тогда
					
					стр.Сумма           = 2690;
					
					стр.СуммаСкидки = стр.Цена - стр.Сумма;
					
					стр.СуммаНДС        = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,
					Истина,
					Истина,
					Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
                    Серия = СокрЛП(стр.ХарактеристикаНоменклатуры.Наименование);
					стр.НомерТелефона = НомерТелефона;
					
			     СтрСкидки  =  Чек.Скидки.Добавить();
				// Присвоили ключу строки ТЧ Скидки номер строки товара из ТЧ Товары
				 СтрСкидки.КлючСтроки = стр.НомерСтроки;
				 СтрСкидки.Сумма  = стр.СуммаСкидки;
				 СтрСкидки.КодРазблокировки = СокрЛП(Акция.Код);
				 СтрСкидки.СкидкаНаценка = Акция.Ссылка;
				// СтрСкидки.Номенклатура = стр.Номенклатура;	
					
			  КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;	
		
		
	КонецЦикла;	
	Чек.ЕстьНеСтандартнаяАкция = Истина;
       Попытка
	  Чек.Записать();
       Исключение
	   КонецПопытки;
	    пДатаРезерва = КонецДня(ТекущаяДата()+ 24*60*60);

        оРезерв = Документы.РезервированиеТоваров.СоздатьДокумент();
		оРезерв.Дата = ТекущаяДата();
		оРезерв.ДатаРезерва = пДатаРезерва;
		оРезерв.РезервЗакрыт = Ложь;
		оРезерв.ВыезднаяТорговля = Ложь;        
		оРезерв.Товары.Загрузить(Чек.Товары.Выгрузить());
		оРезерв.Комментарий = "";
		оРезерв.ВызовИзЧека = Истина;			
	    оРезерв.ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.Продажа;
		оРезерв.Магазин = ПараметрыСеанса.ТекущийМагазин;
		оРезерв.Склад = ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад;
		оРезерв.Кредит = Истина;
		оРезерв.Купоны.Загрузить(Чек.Купоны.Выгрузить());
		оРезерв.Скидки.Загрузить(Чек.Скидки.Выгрузить());
		оРезерв.Контракты.Загрузить(Чек.Контракты.Выгрузить());
        Попытка
		оРезерв.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "Не удалось зарезервировать товар по причине: "+ОписаниеОшибки();
			Предупреждение(ТекстОшибки);
			Возврат;
		КонецПопытки;
        Попытка
			МастерМТС_POS = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.МастерКредитовМТСPOS);
			ФормаМТС_POS = МастерМТС_POS.ПолучитьФорму();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось получить обработку <МастерОформленияМТСPOS>!
			|Операции с кредитом МТС POS невозможны!");
		КонецПопытки;
		
		// заполним реквизиты обработки по чеку
		МастерМТС_POS.Товары.Загрузить(Чек.Товары.Выгрузить());
		МастерМТС_POS.Продавец = Чек.Продавец;
        МастерМТС_POS.СогласовыватьЗаявкиНаКредит = Ложь;
		МастерМТС_POS.ДокументРезерв = оРезерв.Ссылка;	
		БанкМБРРСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН","7702045051");
		МастерМТС_POS.БанкКредитор = БанкМБРРСсылка;  //  UshN, rarus, 10.10.2011, ищем МБРР	
		попытка
		МастерМТС_POS.СрокКредита.Значение = 11;
	    исключение
	 	КонецПопытки;
		ФормаМТС_POS.СуммаКредита = МастерМТС_POS.Товары.Итог("Сумма");
		//{РТК_\_14.02.2013 16:23:18_Сбродов_
		ФормаМТС_POS.СуммаПервогоВзноса = 0;
		//РТК_\_14.02.2013 16:23:18_Сбродов_}
		ФормаМТС_POS.ВидОперации = 1;
		ФормаМТС_POS.ЭлементыФормы.СогласованиеУсловий.Доступность = Ложь;
		ЗаявкаОтправлена = ФормаМТС_POS.ОткрытьМодально();
		
		Если МастерМТС_POS.ЗаявкаНаКредит.Ссылка.Пустая() ИЛИ Не ЗаявкаОтправлена Тогда
			// заявка на кредит не была записана
			// снимем резерв товаров
			//{РТК_CQ#282_07.03.2012 16:15:51_МальцевРВ_ 
			Если  (оРезерв.РезервИнтернетМагазина = ложь и 
				оРезерв.РезервОпт = ложь и оРезерв.ВидРезерва <> Перечисления.ВидыРезервированияТоваров.ККРТКОП) тогда
				оДокументРезерва = оРезерв.Ссылка.ПолучитьОбъект();
				оРезерв.ВызовИзЧека=Истина;
				Результат_ = оРезерв.ЗакрытьРезерв();
				Если Результат_ = Ложь Тогда
					ТекстСообщения = "Товар был зарезервирован
					|Но заявка на кредит оформлена не была
					|При попытке закрытия резерва, произошла ошибка:
					|"+ОписаниеОшибки();
					Предупреждение(ТекстСообщения);
				КонецЕсли;
				оПечатьСогласияОСмене("ПечатьСогласияОСмене", 2, Ложь);

				Чек.Товары.Очистить();
		        Закрыть(Ложь);

				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		//Попытка
		//Если Не ЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, "insertPhone", НоменклатураАрт,Серия) Тогда
		//	
		//	Предупреждение("Не удалось зарегистрировать клиента в данной акции! 
		//	|Пожалуйста создайте инцидент в HelpDesk, приложив к инциденту
		//	|сканированный чек и номер телефона клиента, который он указал
		//	|для участия в акции");
		//	оДокументРезерва = оРезерв.Ссылка.ПолучитьОбъект();
		//		оРезерв.ВызовИзЧека=Истина;
		//		Результат_ = оРезерв.ЗакрытьРезерв();
		//		Если Результат_ = Ложь Тогда
		//			ТекстСообщения = "Товар был зарезервирован
		//			|Но заявка на кредит оформлена не была
		//			|При попытке закрытия резерва, произошла ошибка:
		//			|"+ОписаниеОшибки();
		//			Предупреждение(ТекстСообщения);
		//		КонецЕсли;

		//	Чек.Товары.Очистить();

		//	Возврат;
		//КонецЕсли;
		//Исключение
		//КонецПопытки;
	// Учёт технических проблем связи с хранилищем
		
	// Регистация телефона прошлв успешно
//	Предупреждение("Данные клиента об участии в акции успешно зарегистрированы",20,"БИНГО!");

        Чек.Товары.Очистить();
		Закрыть(Истина);
	
	
	
   КонецПроцедуры	
   
    Процедура оПечатьСогласияОСмене(ИмяМакета,КоличествоЭкземпляров = 2, НаПринтер = Ложь) Экспорт
	Запрос = Новый Запрос;
  Запрос.Текст = 
  "ВЫБРАТЬ
  |	ХранилищеДополнительнойИнформации.ИмяФайла,
  |	ХранилищеДополнительнойИнформации.Ссылка
  |ИЗ
  |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
  |ГДЕ
  |	ХранилищеДополнительнойИнформации.Наименование = &Наименование";
  
  Запрос.УстановитьПараметр("Наименование", СокрЛП(Акция.Код));
  
  Результат = Запрос.Выполнить();
  
  ВыборкаДетальныеЗаписи = Результат.Выбрать();
  
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	  
	  Файл = ВыборкаДетальныеЗаписи.ИмяФайла;
	  
	  Если Не ЗначениеЗаполнено(Файл) Тогда
		  ОбщегоНазначения.СообщитьОбОшибке( "Не найден файл с платежами для Акции для магазина " + ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад );
		  Возврат;
	  КонецЕсли; 
	  
	  Спр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	  ИмяФайла = СохранитьФайлНаДиск(Спр);
	  Форма = Спр.ПолучитьФорму("ФормаДокумента");
	  Если	ПолучитьРасширениеФайла(ИмяФайла) = "doc" ИЛИ  ПолучитьРасширениеФайла(ИмяФайла) = "docx"  тогда
		  
		  Попытка
			  // Форма.Открыть();
			  //Path = """C:\progra~1\OpenOffice.org 3\program\swriter.exe"" """ +ИмяФайла+""" /p";
			  
			  //ЗапуститьПриложение(Path);
			  
			  WshShell	= Новый COMОбъект("WScript.Shell");
			  WshShell.Run("""C:\progra~1\OpenOffice.org 3\program\swriter.exe"""+" -p " + " /C """+ИмяФайла+"""",0) ;
		  Исключение
			  Попытка
				  ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
				  Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
				  Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
				  Scr.Language="javascript";
				  Scr.Eval("Args=new Array()");
				  Args = Scr.Eval("Args"); 
				  Scr.AddObject("ServiceManager", ServiceManager);
				  FileNameSh = СокрЛП(ИмяФайла);
				  URL = СтрЗаменить(FileNameSh," ","%20");
				  URL = СтрЗаменить(URL,"\","/");
				  URL ="file://localhost/" + URL;
				  
				  OpenOffice = Desktop.LoadComponentFromURL(URL, "_blank", 0, Args);
			  Исключение
			  КонецПопытки;
			  
			  
			  //Предупреждение("Невозможно распечатать заявление к акции " + СокрЛП(Акция.Наименование) + ". Возможно у вас не установлен OpenOffice");
			  //Попытка
			  //	WshShell	= Новый COMОбъект("WScript.Shell");
			  //	WshShell.Run("""C:\progra~1\OpenOffice.org 4\program\swriter.exe"""+" -p " + " /C """+ИмяФайла+"""",0) ;
			  //	
			  //Исключение
			  //	Попытка
			  //  	  WshShell	= Новый COMОбъект("WScript.Shell");
			  //  	  WshShell.Run("""C:\Program Files (x86)\OpenOffice.org 3\program\swriter.exe"""+" -p " + " /C """+ИмяФайла+"""",0) ;
			  //	Исключение
			  //  	  Попытка
			  //  		  WshShell	= Новый COMОбъект("WScript.Shell");
			  //  		  WshShell.Run("""C:\Program Files (x86)\OpenOffice.org 4\program\swriter.exe"""+" -p " + " /C """+ИмяФайла+"""",0) ;
			  //  	  Исключение
			  //  	  КонецПопытки;
			  //	КонецПопытки;
			  //	
			  //	
			  //КонецПопытки;
			  //
			  
			  
		  КонецПопытки;	
		  
			прервать;
      КонецЕсли;
	  
	  
	  
  КонецЦикла;
	
		
	//Перем ТабДокумент;
	//	  
	// 
	//КодОП = ПараметрыСеанса.КодТочки;	
	//ТабДокумент = Новый ТабличныйДокумент;
	//
	//Если Акция = Справочники.Акции.НайтиПоКоду("000002521") тогда
	//	
	//	 ИмяМакета = "ПечатьСогласияПлатеж1";
	//	
	//КонецЕсли;	
	//
	//Макет       = ПолучитьМакет(ИмяМакета);
	////ЗаполнитьСтруктуру(СтруктураДанныхПоКлиенту);	
	////Заголовок
	//ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	////Если ФизЛицо <> неопределено тогда
	////ОбластьМакета.Параметры.ФИО = РТК_ДобавленныеПроцедуры.ПолучитьФамилияИО(ФизЛицо.Наименование);
	////КонецЕсли;
	////Если ТипЗнч(ФизЛицо.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") тогда
	////ОбластьМакета.Параметры.СерияДокумента = ФизЛицо.ДокументСерия;
	////Если ПереключательОпций1 = 6 тогда
	////	
	////	ОбластьМакета.Параметры.НомерТелефона = НомерТелефона;
	////КонецЕсли;
	//	//ИначеЕсли ТипЗнч(ФизЛицо.Ссылка) = Тип("СправочникСсылка.Контрагенты") тогда
	////ОбластьМакета.Параметры.НомерИНН =  ФизЛицо.Инн;
	////КонецЕсли;
	////Если ФизЛицо <> неопределено тогда

	////ОбластьМакета.Параметры.ДатаРождения = Формат(ФизЛицо.ДатаРождения, "ДФ=dd.MM.yyyy");
	////Тел = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(ФизЛицо.Ссылка, Ложь);

	////ОбластьМакета.Параметры.НомерТелефона = Тел;
	////Адр = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ФизЛицо.Ссылка, "Фактический");
	////ОбластьМакета.Параметры.Регистрация = Адр;
	////Почт = 
	////ОбластьМакета.Параметры.Емэйл = Почт;
	////КонецЕсли;
	//ТабДокумент.Вывести(ОбластьМакета);	
	//
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал1");
	////Если ПереключательОпций1 = 6 тогда
	////	
	////	ОбластьМакета.Параметры.НомерТелефона = НомерТелефона;
	////КонецЕсли;
	////Если ПереключательОпций1 = 6 тогда
	////	попытка
	////	ОбластьМакета.Параметры.НазваниеТарифа = Акция.Атрибуты.Найти("НазваниеТарифаЮр").ЗначениеАтрибута;
	////	Исключение
	////	КонецПопытки;
	////Если ПереключательОпций1 = 4 тогда
	////	попытка
	////	ОбластьМакета.Параметры.НазваниеТарифа = Акция.Атрибуты.Найти("НазваниеТарифаФиз").ЗначениеАтрибута;
	////	Исключение
	////	КонецПопытки;
	////КонецЕсли;	

	////СтрокаПоиска = Акция.Атрибуты.Найти("ЗаголовокФормы");
	////Если СтрокаПоиска <> Неопределено тогда
	////	
	////	ОбластьМакета.Параметры.НазваниеАкции = СтрокаПоиска.ЗначениеАтрибута;
	////	
	////КонецЕсли;	
	//
	//
	//ТабДокумент.Вывести(ОбластьМакета);
	//
	//// "Подвал"
	//ОбластьМакета                         	= Макет.ПолучитьОбласть("Подвал2");
	//Старший = Рарус_ДобавленныеПроцедуры.ПолучитьСтаршегоСотрудникаСмены(ТекущаяДата(),ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад);
	//ОбластьМакета.Параметры.ФИОсотрудника  	= Старший;
	//ОбластьМакета.Параметры.КодОП		  	= КодОП;	
	//
	//ТабДокумент.Вывести(ОбластьМакета);
	//ТабДокумент.АвтоМасштаб = Истина;
	//НаПринтер = Истина;
	//КоличествоЭкземпляров =2;
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, Ложь,,,,Истина,Истина,Ложь,Истина);

	////УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,,,,Истина,Истина,Ложь,Истина);
	//	
	//	
	//	
	//	
	//	
		

		
    КонецПроцедуры		

Процедура КнопкаДаНажатие(Элемент)
	Перем ФизЛицо;
	ПростоСкидка = Ложь;
	СкидкаКредит = Ложь;
	НеПростоСкидка = Ложь;
	ТекстОбОшибках = Новый ТекстовыйДокумент;
	Если ПереключательОпций1 = 0 Тогда
		ТекстОбОшибках.ДобавитьСтроку("Ошибка!");
		ТекстОбОшибках.ДобавитьСтроку("Вы должны выбрать опцию или пункт - Подключить за полную стоимость");
	КонецЕсли;
	ЗначениеТипаАкции = "";
	СтрокаАтрибутТип = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
	Если СтрокаАтрибутТип <> неопределено тогда		
		ЗначениеТипаАкции = СтрокаАтрибутТип.ЗначениеАтрибута;
	КонецЕсли;
	
	
	Если ЗначениеТипаАкции <> "0" тогда
		Если (СтрДлина(СокрЛП(НомерТелефона)) <> 10) И ((ПереключательОпций1 <> 3 И ПереключательОпций1 <> 5 И ПереключательОпций1 <> 6) И ПереключательОпций1 <> 10) Тогда
			// Сообщить об ошибке и прекратить обработку.
			Если ТекстОбОшибках.КоличествоСтрок() = 0 Тогда
				ТекстОбОшибках.ДобавитьСтроку("Ошибка!");
			КонецЕсли;
			ТекстОбОшибках.ДобавитьСтроку("Телефонный номер должен состоять из 10 цифр");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстОбОшибках.КоличествоСтрок() <> 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОбОшибках.ПолучитьТекст(), Истина);
		Возврат;
	КонецЕсли;
	
	// {Рарус_7939_29.03.2012 13:24:19_Сухоруков_ 
	// РТК_ДобавленныеПроцедуры.НачатьЗамерПроизводительности("C12000000");
	
	////Если Форма.ЭлементыФормы.Панель1.ТекущаяСтраница = Форма.ЭлементыФормы.Панель1.Страницы[0] Тогда
	НаименованиеАкции = "";
	
	//Если ПереключательОпций1 = 1 Тогда
	//	НаименованиеАкции = ДобавитьПоАртиклу("1500-0016");
	//ИначеЕсли ПереключательОпций1 = 2 ИЛИ ПереключательОпций1 = 7 Тогда
	//	НаименованиеАкции = ДобавитьПоАртиклу("1500-0014");
	//ИначеЕсли ПереключательОпций1 = 3 ИЛИ ПереключательОпций1 = 8 Тогда
	//	НаименованиеАкции = ДобавитьПоАртиклу("1500-0018");
	//ИначеЕсли ПереключательОпций1 = 4 ИЛИ ПереключательОпций1 = 9 Тогда
	//	НаименованиеАкции = ДобавитьПоАртиклу("1500-0017");
	Если ПереключательОпций1 = 3 ИЛИ ПереключательОпций1 = 10 Тогда
		
		
		Закрыть(Ложь);
		Возврат;
	ИначеЕсли ПереключательОпций1 = 1 тогда
		ПростоСкидка = Истина;
		ЭлементыФормы.Надпись3.Видимость = Истина;
		Элементыформы.ПолеВвода1.Видимость = Истина;
		
		Если ЗначениеЗаполнено(НомерТелефона) тогда
			ЗначНомера = ЭтоНомерМТС(НомерТелефона);
			//Если НомерТелефонаУжеУчаствуетВАкции(НомерТелефона) Тогда
			//	
			//	Предупреждение("Данный номер телефона уже участвует в акции
			//	|Вы можете указать другой номер, либо отказаться от участия в акции, нажав ""Нет""", 10);
			//	
			//	Возврат;
			//КонецЕсли;
			
			Если ЗначНомера = Ложь Тогда
				
				Предупреждение("Продажа смартфона по сниженной цене на введенный абонентский номер запрещена:
				|номер не зарегистрирован в сети МТС. 
				|Для продолжения продажи введите абонентский номер МТС");
				
				Отказать = Истина;
				Закрыть(Ложь);
				
				возврат;
				
			Иначе
				//Предупреждение("ТП линейки МТС-Коннект (название тарифа содержит «Коннект»), SIM, i-Онлайнер, Онлайнер, Супер Онлайнер, 
				//			   |МТС iPad, Классный, Заботливый, «Бизнес-Онлайн», «Навигационный», «Корпоративный Онлайнер», «МТС 3G роутер», 
				//			   |«Телематика», «Маяк» не могут участвовать в акции.
				//			   |Проверьте тарифный план через Марти.",30);	
				ДобавитьАкциюВТовары();
				оПечатьСогласияОСмене("ПечатьСогласияОСмене", 2, Ложь);
				
				
				//Если Не ЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, "insertPhone", НоменклатураАрт,Серия) Тогда
				//	
				//	Предупреждение("Не удалось зарегистрировать клиента в данной акции! 
				//	|Пожалуйста создайте инцидент в HelpDesk, приложив к инциденту
				//	|сканированный чек и номер телефона клиента, который он указал
				//	|для участия в акции");
				//	
				//	Возврат;
				//КонецЕсли;
				
				
				
				
				Закрыть(Ложь);
			КонецЕсли;
		Иначе
			Предупреждение("Не введен номер телефона МТС");
			Отказать = Истина;
			Закрыть(Ложь);
			Возврат;
		КонецЕсли;
	ИначеЕсли ПереключательОпций1 = 5 Тогда
		//НаименованиеАкции = ДобавитьПоАртиклу("1500-0015");
		СкидкаКредит = Истина;
		//ЭлементыФормы.Надпись3.Видимость = Ложь;
		//Элементыформы.ПолеВвода1.Видимость = Ложь;
		Если ЗначениеЗаполнено(НомерТелефона) тогда
			ЗначНомера = ЭтоНомерМТС(НомерТелефона);
			
			Если ЗначНомера = Ложь Тогда
				
				Предупреждение("Продажа смартфона по сниженной цене на введенный абонентский номер запрещена: номер не зарегистрирован в сети МТС. Для продолжения продажи введите абонентский номер МТС");
				возврат;
			КонецЕсли;
			Если НомерТелефонаУжеУчаствуетВАкции(НомерТелефона) Тогда
				Предупреждение("Данный номер телефона уже участвует в акции
				|Вы можете указать другой номер, либо отказаться от участия в акции", 10);
				Возврат;
			КонецЕсли;
			
		Иначе
			Предупреждение("Не введен номер телефона МТС");
			возврат;
		КонецЕсли;
		ДобавитьКредитИАкциюВТовары();
		
		оПечатьСогласияОСмене("ПечатьСогласияОСмене", 2, Ложь);
		
		
		
		//Если  Чек.Контракты.Количество()>0 тогда 			
		//	для каждого стр из Чек.Контракты цикл
		//	ФизЛицо =	стр.Контракт.Контрагент;
		//	прервать;
		//		
		//		
		//	КонецЦикла;	
		//	
		//	
		//Иначе	
		//РаботаСДиалогами.НачалоВыбораКонтрагентаФизЛица(ЭтотОбъект, ЭтаФорма, ЭтаФорма.ЭлементыФормы.ПолеВвода2, ложь);
		//	ФизЛицо = Контрагент;
		//КонецЕсли;
		//Если ФизЛицо = Неопределено тогда
		//	#Если клиент тогда
		//		
		//		Предупреждение("Не выбран абонент для участия в акции. Акция будет отменена!");
		//		Чек.Скидки.Очистить();
		//		Чек.ЕстьНеСтандартнаяАкция = Ложь;
		
		//		Закрыть(Ложь);
		//		Возврат;
		//		
		//	#КонецЕсли	
		//КонецЕсли;	
		//ФизЛицо = ФизЛицо.ПолучитьОбъект();
		
		//	оПечатьСогласияОСмене("ПечатьСогласияОСмене", ФизЛицо, 2, Ложь);
		
	ИначеЕсли ПереключательОпций1 = 4 тогда
		ЗначениеТипаАкции = "";
		СтрокаАтрибутТип = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
		Если СтрокаАтрибутТип <> неопределено тогда		
			ЗначениеТипаАкции = СтрокаАтрибутТип.ЗначениеАтрибута;
		КонецЕсли;	
		НеПростоСкидка = Истина;
		Если ЗначениеТипаАкции <> "0" тогда
			ЭлементыФормы.Надпись3.Видимость = Истина;
			Элементыформы.ПолеВвода1.Видимость = Истина;
		КонецЕсли;
		
		
		
		Если ЗначениеЗаполнено(НомерТелефона)  тогда
			ЗначНомера = ЭтоНомерМТС(НомерТелефона);  //здесь добавить новую функцию
			Если НомерТелефонаУжеУчаствуетВАкции(НомерТелефона) Тогда
				
				Предупреждение("Данный номер телефона уже участвует в акции
				|Вы можете указать другой номер, либо отказаться от участия в акции", 10);
				Отказать = Истина;
				Чек.Скидки.Очистить();
				Чек.Купоны.Очистить();
				Закрыть(Ложь);
				Возврат;
			КонецЕсли;
			
			Если ЗначНомера = Ложь Тогда
				
				Предупреждение("Продажа смартфона по сниженной цене на введенный абонентский номер запрещена: 
				|номер не зарегистрирован в сети МТС. 
				|Для продолжения продажи введите абонентский номер МТС");
				Чек.Скидки.Очистить();
				Чек.Купоны.Очистить();
				Отказать = Истина;
				Закрыть(Ложь);
				возврат;
				
			Иначе
				Отказ = Ложь;
				ЗначениеТипаАкции = "";
				ПечатьЗаявления = "";
				СтрокаАтрибутТип = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
				Если СтрокаАтрибутТип <> неопределено тогда		
					ЗначениеТипаАкции = СтрокаАтрибутТип.ЗначениеАтрибута;
				КонецЕсли;	
				
				СтрокаАтрибутПечать = Акция.Атрибуты.Найти("Печать заявления", "НазваниеАтрибута");
				Если СтрокаАтрибутПечать <> неопределено тогда		
					ПечатьЗаявления = ВРег(СтрокаАтрибутПечать.ЗначениеАтрибута);
				КонецЕсли;	
				
				Если ЗначениеТипаАкции = "3" или ЗначениеТипаАкции = "4" тогда
					РассчитатьЗначениеСкидкиИзСегмента(Чек, Отказ);
				КонецЕсли;
				// Учёт технических проблем связи с хранилищем
				Если Отказать Тогда
					Возврат;
				КонецЕсли;
				
				Если (ЗначениеТипаАкции = "2" ИЛИ ЗначениеТипаАкции = "3") И НЕ Отказать тогда
					ДобавитьПлатежАкциюВТовары();
				КонецЕсли;
				
				Если (ЗначениеТипаАкции = "2" ИЛИ ЗначениеТипаАкции = "1") И НЕ Отказать тогда
					пПрименитьАкциюИЗСправочника(Чек, Акция);	
				КонецЕсли;	
				
				Для каждого стр из Чек.Товары Цикл
					Если (стр.Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.УслугаТерминалаУслуг ИЛИ ПечатьЗаявления = "ДА") И НЕ Отказать тогда
						оПечатьСогласияОСмене("ПечатьСогласияПлатеж", 2, Ложь);
						прервать;
					КонецЕсли;
				КонецЦикла;
				
				
				
				Закрыть(Ложь);
				
				
			КонецЕсли;
			
			
			
			
		ИначеЕсли ЭлементыФормы.ПолеВвода1.Видимость = Ложь И ЗначениеТипаАкции = "0" тогда
			
			
			Если  Акция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута") <> неопределено тогда
				
				Если Акция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута").ЗначениеАтрибута = "2" тогда
					
					СписокВыбора = Новый СписокЗначений;
					СписокВыбора.Добавить("500", "500 ϼ");					
					СписокВыбора.Добавить("1000", "1000 ϼ");
					СписокВыбора.Добавить("1500", "1500 ϼ");
					
					ВыбСписка = СписокВыбора.ВыбратьЭлемент("Укажите размер скидки на вторую покупку", ВыбСписка);
					Если ВыбСписка <> Неопределено  тогда
						
						ЗначВыб = ВыбСписка.Значение;
						
						Если   ЗначВыб = "500" тогда
							Акция = Справочники.Акции.НайтиПоКоду("000009645");							
						ИначеЕсли ЗначВыб = "1000" тогда
							Акция = Справочники.Акции.НайтиПоКоду("000009646");
						ИначеЕсли ЗначВыб = "1500" тогда
							Акция = Справочники.Акции.НайтиПоКоду("000009647");
						КонецЕсли;	
					Иначе
						
						ОбщегоНазначения.ПредупреждениеПользователю("Не выбран вариант скидки для Акции " + СокрЛП(Акция.Наименование));
						Отказать = Истина;
						возврат;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			
			РассчитатьЗначениеСкидкиИзСегмента(Чек, Отказ);
			Если Отказать Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			Предупреждение("Не введен номер телефона МТС");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ПереключательОпций1 = 6 тогда
		
		НеПростоСкидка = Истина;
		ЭлементыФормы.Надпись3.Видимость = Истина;
		Элементыформы.ПолеВвода1.Видимость = Истина;
		
		Если ЗначениеЗаполнено(НомерТелефона) тогда
			ЗначНомера = ЭтоНомерМТС(НомерТелефона);
			Если НомерТелефонаУжеУчаствуетВАкции(НомерТелефона) Тогда
				
				Предупреждение("Данный номер телефона уже участвует в акции
				|Вы можете указать другой номер, либо отказаться от участия в акции, нажав ""Нет""", 10);
				Отказать = Истина;
				Возврат;
			КонецЕсли;
			
			Если ЗначНомера = Ложь Тогда
				
				Предупреждение("Продажа смартфона по сниженной цене на введенный абонентский номер запрещена: номер не зарегистрирован в сети МТС. Для продолжения продажи введите абонентский номер МТС");
				Отказать = Истина;
				возврат;
				
			Иначе
				
				НЕПрименятьАкс = Ложь;	
				Если	Акция.Атрибуты.Найти("АксессуарыВПодарок") <> Неопределено тогда
					
					ТекстВопроса = "ВНИМАНИЕ! Клиент желает добавить Аксессуары для Акции ""Скидка на аксессуары 20%, 30% или 40%"" ?";
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
					
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						НЕПрименятьАкс = Истина;				
						
					Иначе	 
						Предупреждение("Внимание! Скидка на аксессуары совместно с Бонусом на счет может быть 
						|применена только после программного добавления аксессуаров");
						//оФормаТ = ЭтотОбъект.ПолучитьФорму("ФормаТелефона");
						//НомерТелефона = оФормаТ.ОткрытьМодально();
						//сообщить("номер телефона " + НомерТелефона) ;
						//НомерТелефона = НомерТелефонаЦифрами(НомерТелефона);
						Отказать = Ложь;
						//Если ЗначениеЗаполнено(НомерТелефона) И ЭтоНомерМТС(НомерТелефона) Тогда
						//	
						//	// Проверка на дублированность номера в акции
						//	Если НомерТелефонаУжеУчаствуетВАкции(НомерТелефона) Тогда
						//		Если Не Отказать Тогда
						//			Предупреждение("Данный номер телефона уже участвует в акции ""Деньги на счет""
						//			|Вы можете указать другой номер, либо отказаться от участия в акции, нажав ""Нет""", 10);
						//		КонецЕсли;
						//		ЭлементыФормы.ПолеВвода1.Видимость = Истина;
						//	 ЭлементыФормы.Надпись3.Видимость = Истина;
						//		
						//		Возврат;
						//	КонецЕсли;
						//	
						//	// Учёт технических проблем связи с хранилищем
						//	Если Отказать Тогда
						//		НомерТелефона = "";
						//	КонецЕсли;
						//	
						//	// Выход с возвратом корректного номера телефона
						//КонецЕсли;
						
						//Чек.мНомерТелефонаДополнительный = НомерТелефона;
						
						
						ТЗ = Новый ТаблицаЗначений;
						ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
						Для сч = 0 По 10 Цикл //возьмем 10 как порогове значение при добавлении
							Предупреждение("Внимание! Отсканируйте или введите Штрихкод Акционного аксессуара", 10, "НЕ ЗЕВАЙ");
							Результат = ЭтотОбъект.ПолучитьФорму("ФормаВвода1").ОткрытьМодально();
							Если НЕ ПустаяСтрока(Результат) тогда
								ДобавлНом =   ПолучитьНоменклатуру(Результат);
								Предупреждение("ДОБАВЛЕН ТОВАР " + СокрЛП(ДобавлНом));
								Если ДобавлНом <> Неопределено И ТипЗнч(ДобавлНом) = Тип("СправочникСсылка.Номенклатура") тогда 
									
									НужнаяАкция = Справочники.Акции.НайтиПоКоду("000001983");
									
									
									Если НЕ ПринадлежитАкции(ДобавлНом, НужнаяАкция)  тогда
										
										Предупреждение("Добавляемый аксессуар " + сокрЛП(ДобавлНом) + " не принадлежит Акции, он не будет добавлен");
										Продолжить;
									КонецЕсли;	  
									
									// сообщить(ДобавлНом) ;
									НС = ТЗ.Добавить();
									НС.Номенклатура = ДобавлНом;
								КонецЕсли; 						 
								Если сч >= 1 тогда
									
									ТекстВопроса = "ВНИМАНИЕ! Добавить ещё аксессуар?";
									Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
									
									Если Ответ = КодВозвратаДиалога.Нет Тогда
										// НомерТелефонаМТС = "";
										ЭлементыФормы.ПолеВвода1.Видимость = Истина;
										ЭлементыФормы.Надпись3.Видимость = Истина;
										
										прервать;
									Иначе
										продолжить;
										
									КонецЕсли;
								КонецЕсли;	  
							Иначе	  
								
								прервать;
								
							КонецЕсли;
						КонецЦикла;	  
						Добавлено = Ложь;
						КоличествоСтрок = ТЗ.Количество();
						
						Если ТЗ.Количество() < 2 тогда 
							Предупреждение("Ошибка! Для применения скидки по акции ""Аксессуары со скидкой"" необходимо добавить 2,3 или 4 аксессуара");
							//НомерТелефона = "";
							//ЭлементыФормы.ПолеВвода1.Видимость = Истина;
							// ЭлементыФормы.Надпись3.Видимость = Истина;
							//Возврат;
							
							
						КонецЕсли;	 
						
						
						Для каждого строк из ТЗ Цикл 
							//сообщить(строк.Номенклатура);
							Добавлено =  оСШКНоменклатура(строк.Номенклатура);
							Если Добавлено = Истина тогда
								
								
								
								
							КонецЕсли;
						КонецЦикла;
						//Попытка
						//	Чек.Записать(); 
						//Исключение
						//КонецПопытки;
						сообщить(Чек);
						Отказ = Ложь;
						
						
						Если ТЗ.Количество() = 2 Тогда
							Предупреждение("Внимание! Вы добавили 2 аксессуара: " + СокрЛП(ТЗ[0].Номенклатура) +" и " + СокрЛП(ТЗ[1].Номенклатура));
							Чек.мДействующаяАкция = Справочники.Акции.НайтиПоКоду("000001983");
							сообщить(Чек.мДействующаяАкция);
							попытка
								ПрименитьАкциюИЗСправочника(Чек, Чек.мДействующаяАкция) ;					   
								Попытка
									обАкция = Чек.мДействующаяАкция.ПолучитьОбъект();
									обАкция.ТекстПодсказки = Чек.мТекстДопИнформация;
									обАкция.Записать();
								Исключение
								КонецПопытки; 
							Исключение
								Сообщить( "акция для аксесуаров не найдена" );
							КонецПопытки;		
							
							
							
						ИначеЕсли ТЗ.Количество() = 3 Тогда
							Предупреждение("Внимание! Вы добавили 3 аксессуара: " + СокрЛП(ТЗ[0].Номенклатура) +"и " + СокрЛП(ТЗ[1].Номенклатура) + " и " + СокрЛП(ТЗ[2].Номенклатура));
							Чек.мДействующаяАкция = Справочники.Акции.НайтиПоКоду("000001984");
							попытка
								ПрименитьАкциюИЗСправочника(Чек, Чек.мДействующаяАкция)     ;
								Попытка
									обАкция = Чек.мДействующаяАкция.ПолучитьОбъект();
									обАкция.ТекстПодсказки = Чек.мТекстДопИнформация;
									обАкция.Записать();
								Исключение
								КонецПопытки; 
								
							исключение
							КонецПопытки;	 
							
						ИначеЕсли ТЗ.Количество() >= 4 Тогда
							
							Предупреждение("Внимание! Вы добавили" + СокрЛП(ТЗ.Количество()) +  "аксессуара(ов): " + СокрЛП(ТЗ[0].Номенклатура) +" и " + СокрЛП(ТЗ[1].Номенклатура) + " и " + СокрЛП(ТЗ[2].Номенклатура)+ " и " + СокрЛП(ТЗ[3].Номенклатура) + "...");
							
							Чек.мДействующаяАкция = Справочники.Акции.НайтиПоКоду("000001985");
							попытка
								ПрименитьАкциюИЗСправочника(Чек, Чек.мДействующаяАкция) ;
								
								Попытка
									обАкция = Чек.мДействующаяАкция.ПолучитьОбъект();
									обАкция.ТекстПодсказки = Чек.мТекстДопИнформация;
									обАкция.Записать();
								Исключение
								КонецПопытки; 
								
							исключение
							КонецПопытки;		
						КонецЕсли;	
						//Если НЕ Отказ тогда
						
						//Закрыть(НомерТелефонаМТС);
						
						//   КонецЕсли;	   
						
						
					КонецЕсли;
				Иначе
					//НомерТелефона = ""; 
					//ЭлементыФормы.ПолеВвода1.Видимость = Истина;
					
				КонецЕсли;	
				
				
				
				ДобавитьПлатежАкциюВТовары();
				Для каждого стр из Чек.Товары Цикл
					Если стр.Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.УслугаТерминалаУслуг тогда
						оПечатьСогласияОСмене("ПечатьСогласияПлатеж", 2, Ложь);
						прервать;
					КонецЕсли;
				КонецЦикла;
				
				Попытка
					
					Серия = "";			
					
					Для каждого стр из Чек.Товары Цикл
						Если стр.Номенклатура.Артикул = ЭтотОбъект.Номенклатура.Артикул Тогда
							Серия = СокрЛП(стр.ХарактеристикаНоменклатуры.Наименование);                                                                                                                   
							//НомерТелефонаМТС = стр.НомерТелефона;
							прервать;
						КонецЕсли;
						//КонецЕсли;
					КонецЦикла;	
				Исключение	
				КонецПопытки;
				
				
				
				
				
				Если ЗначениеЗаполнено(ЭтотОбъект.Номенклатура) тогда
					
					строчка = Чек.Товары.Найти(ЭтотОбъект.Номенклатура);
					Если строчка <> неопределено тогда
						
						ПозицияВЧеке = СокрЛП(строчка.НомерСтроки);
						СуммаПродажи = стрЗаменить(СокрЛП(строчка.сумма), символы.НПП, "");
						
						
					КонецЕсли;	
					
					
				КонецЕсли;	
				
				// Регистрация телефона в акции
				Отказать = Ложь;
				//НомерТелефона = НомерТелефонаЦифрами(НомерТелефонаМТС);//НомерТелефонаЦифрами(ДокументОбъект.мНомерТелефонаДополнительный);
				//сообщить("номер" =номертелефона);
				//ДокументОбъект.мНомерТелефонаДополнительный = "";
				Если Не ПроверитьЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, "insert_action", Номенклатура.Артикул,Серия) Тогда
					Если Не Отказать Тогда
						Предупреждение("Не удалось зарегистрировать клиента в данной акции! 
						|Пожалуйста создайте инцидент в HelpDesk, приложив к инциденту
						|сканированный чек и номер телефона клиента, который он указал
						|для участия в акции");
					КонецЕсли;
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				// Учёт технических проблем связи с хранилищем
				Если Отказать Тогда
					Возврат;
				КонецЕсли;
				
				
				
				
				//Если Не ЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, "insertPhone", НоменклатураАрт,Серия) Тогда
				//	
				//	Предупреждение("Не удалось зарегистрировать клиента в данной акции! 
				//	|Пожалуйста создайте инцидент в HelpDesk, приложив к инциденту
				//	|сканированный чек и номер телефона клиента, который он указал
				//	|для участия в акции");
				//	
				//	Возврат;
				//КонецЕсли;
				
				
				
				
				Закрыть(Ложь);
				
				
			КонецЕсли;
		Иначе
			Предупреждение("Не введен номер телефона МТС");
			Возврат;
		КонецЕсли;
		
		
		
		
		
	КонецЕсли;
	
	
	
	
	
	ТелефН = СокрЛП(НомерТелефона);
	ТекстВЧек = "";
	Сумма_ = "";
	Если Акция.Состав.Количество() > 0 тогда
		Попытка
			Корзина_ = Акция.Состав[0].Корзина;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Корзина_);
			Запрос.УстановитьПараметр("СписокНоменклатуры", ТЧАкц.ВыгрузитьКолонку("Номенклатура"));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	КорзиныСоставКорзины.МинЦена
			|ИЗ
			|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
			|ГДЕ
			|	КорзиныСоставКорзины.Ссылка = &Ссылка
			|	И КорзиныСоставКорзины.Номенклатура В (&СписокНоменклатуры)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Сумма_ = СтрЗаменить(СокрЛП(Выборка.МинЦена), Символы.НПП,"");	
			КонецЦикла;	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	//Если НЕ ЗначениеТипаАкции = "0" тогда
	//	Чек.мБонусыМТСРассчитаны = Истина;
	//КонецЕсли;
	ТекстВЧек = СтрЗаменить(СтрЗаменить(Акция.Атрибуты.Найти("ТекстЧека1").ЗначениеАтрибута,"*****", ТелефН),"###", Сумма_);
	
	
	
	
	Чек.мТекстДопИнформация = ТекстВЧек;	
	// + Строка(Чек.мТекстДопИнформация) + Строка(Символы.ПС) + Строка(ТекстАкцииНаЧеке.ПолучитьТекст());
	Закрыть(Ложь);
	
	
КонецПроцедуры

Функция ТоварКорзины(СтрокаТовара, ТЧкорзины) Экспорт
	
	Для каждого стр из ТЧКорзины Цикл
		Если  СтрокаТовара.Номенклатура = стр.Номенклатура ИЛИ СтрокаТовара.Номенклатура.ПринадлежитЭлементу(стр.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	


Процедура ДобавитьКупонВДокумент_(нСтроки, сСкидки, ИДТранзакции, КодКупона) Экспорт
	Продолжать = Истина;
	КодКупона_                = стрЗаменить(СокрЛП(КодКупона), Символы.НПП, "");
	
	ВКупонах = Чек.Купоны.Найти(КодКупона_, "КодКупона");
	Если ВКупонах <> Неопределено  тогда
		Если ВКупонах.КлючСвязи = нСтроки тогда
			Продолжать = ложь;
		КонецЕсли;	
	КонецЕсли;	
	Если Продолжать Тогда
		сКупона                   = Чек.Купоны.Добавить();
		сКупона.СкидкаНаценка     = Акция;
		сКупона.КлючСвязи         = нСтроки;
		сКупона.Сумма             = сСкидки;
		сКупона.КодСегментаСкидки = Акция.Код;
		сКупона.ИДТранзакции      = ИДТранзакции;
		сКупона.КодКупона         = КодКупона_;
		сКупона.ТипСкидки         = Перечисления.ТипыСкидкиПоСегментам.Сумма;
		сКупона.ЗначениеСкидки    = сСкидки;
		
		сСкидки_                   = Чек.Скидки.Добавить();
		сСкидки_.КлючСтроки        = нСтроки;
		сСкидки_.СкидкаНаценка     = Акция;
		сСкидки_.Сумма             = сСкидки;
	КонецЕсли;
КонецПроцедуры	




Процедура  РассчитатьЗначениеСкидкиИзСегмента(Чек, Отказ = Ложь) Экспорт
	МожноДобавитьЕще=Ложь;
	НесколькоСерт   =Ложь;
	
	Атриб_ = Акция.Атрибуты.Найти("Сертификаты", "НазваниеАтрибута");
	Если Атриб_ <> Неопределено тогда
		Если Атриб_.ЗначениеАтрибута = "1" тогда
			НесколькоСерт = Истина;
		КонецЕсли;			
	КонецЕсли;	
	Сч_ = 0;
	КупоныВсе = Новый ТаблицаЗначений;
	КупоныВсе.Колонки.Добавить("Купон", Новый ОписаниеТипов("Число"));
	КупоныВсе.Колонки.Добавить("СтатусКупона", Новый ОписаниеТипов("Строка"));


	Если НесколькоСерт тогда
		Пока Сч_<=20 Цикл
			//ввод кода купона ---------------------------------------------------------------
			КодКупона = "";
			РезультатВводаСтроки = ВвестиСтроку( КодКупона, "Введите 12-значный код клиента:", 50 );
			
			Если РезультатВводаСтроки = Ложь тогда// ИЛИ стрДлина(КодКупона) < ОбщегоНазначения.ПривестиСтрокуКЧислу(Акция.Атрибуты.Найти("ДлинаКода").ЗначениеАтрибута) тогда
				
				Предупреждение("Код не введен или введен некорректно");
				Чек.Скидки.Очистить();
				Чек.Купоны.Очистить();
				
				
				Отказать = Истина;
				для каждого стр из Чек.Товары цикл
					
					
					стр.СуммаСкидки = 0;
					стр.Сумма       = стр.Цена-стр.СуммаСкидки;
					стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
					Истина,
					Истина,
					Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
					
					
				КонецЦикла;	
				Закрыть(Ложь);
				Возврат;
			КонецЕсли;	
			
			КодКупона = СокрЛП(СтрЗаменить(КодКупона, "-", ""));	
			КодКупона = СокрЛП(СтрЗаменить(КодКупона, ".", ""));	
			КодКупона = СокрЛП(СтрЗаменить(КодКупона, ",", ""));	
			
			Попытка
				КодКупона = Число(КодКупона);
			Исключение
				Сообщить("Введен не корректный код купона");
				Чек.Скидки.Очистить();
				Чек.Купоны.Очистить();
				
				
				Отказать = Истина;
				для каждого стр из Чек.Товары цикл
					
					
					стр.СуммаСкидки = 0;
					стр.Сумма       = стр.Цена-стр.СуммаСкидки;
					стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
					Истина,
					Истина,
					Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				КонецЦикла;	
				
				Закрыть(Ложь);
				Возврат;
			КонецПопытки;	
			ЕстьТакойКупон = Ложь;
			
			ВТч = КупоныВсе.Найти(КодКупона, "Купон");
			Если ВТч <> Неопределено тогда
				ЕстьТакойКупон = Истина;
			КонецЕсли;	
			
			Если ЕстьТакойКупон Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Купон с таким номером уже был добавлен ранее. Повторное использование невозможно!");
				//Продолжить;
				//Отказ = Истина;
				//Отказать = Истина;
				//Чек.Скидки.Очистить();
				//Чек.Купоны.Очистить();
				//
				//для каждого стр из Чек.Товары цикл						 						 
				//	стр.СуммаСкидки = 0;
				//	стр.Сумма       = стр.Цена-стр.СуммаСкидки;
				//	стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
				//	Истина,
				//	Истина,
				//	Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				//КонецЦикла;
				//
				//
				//
				//Закрыть(Ложь);
			КонецЕсли; 
			Результат 		= Ложь;
			НетОтвета       = Ложь;
			СтруктураОтвет 	= "";
			ИДТранзакции 	= Рарус_РаботаСоСкидкамиПоСегментам.СгенерироватьИД();
			
			Если НЕ ЕстьТакойКупон Тогда
			
			Если Не ПроверкаКупона(Чек, КодКупона, СтруктураОтвет, ИДТранзакции) Тогда
				НетОтвета = Истина;
				
			Иначе	
				СтрокаКупон_ = КупоныВсе.Добавить();
				СтрокаКупон_.Купон = КодКупона;
				СтрокаКупон_.СтатусКупона = СтруктураОтвет.СтатусКупона;
				Сч_ = Сч_ + 1;
			КонецЕсли;
			
			КонецЕсли;
			
			
			
			
			Если Вопрос("Желаете добавить ещё сертификат на скидку?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				
			Иначе
				Прервать;
			КонецЕсли;	
			
			
		КонецЦикла;

		
		Если КупоныВсе.Количество() > 0 тогда
			Отказать = Ложь;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидСкидки",Акция.Состав[0].ВидСкидки);
			СтруктураПараметров.Вставить("ЗначениеСкидки",Акция.Состав[0].ЗначениеСкидки); 
			мНастройкаРМК             = РМК.ПолучитьНастройкуРМККомпьютера();
			мИспользоватьНастройкуРМК = ЗначениеЗаполнено(мНастройкаРМК);
			ОкруглятьПроцентСкидкиВБольшуюСторону = (мИспользоватьНастройкуРМК И мНастройкаРМК.ОкруглятьПроцентСкидкиВБольшуюСторону);
			ТекущийРежимОкругления = ?(ОкруглятьПроцентСкидкиВБольшуюСторону, РежимОкругления.Окр15как20, РежимОкругления.Окр15как10);
			СтруктураПараметров.Вставить("ТекущийРежимОкругления",ТекущийРежимОкругления); 
			ОстатокСуммовойСкидки = 0;
			КорзинаАкции = Акция.Состав[0].Корзина;
			СтруктураПараметров.Вставить("СоставКорзины",КорзинаАкции.СоставКорзины); 
			КодПодтверждения = "";
			Для каждого стрКупон из КупоныВсе Цикл 
				
				Если стрКупон.СтатусКупона = "NotUsed" тогда	
					ОстатокСуммовойСкидки = СтруктураПараметров.ЗначениеСкидки + ОстатокСуммовойСкидки;
					//определим участвует ли товар в корзине и если участвует применим к нему скидку в зависимости от вида скидки
					
					для сч = 0  по Чек.Товары.Количество() - 1 цикл
						Если ОстатокСуммовойСкидки > 0 тогда	
							СтрокаСТоваром   = Чек.Товары[сч];
							
							Если ТоварКорзины(СтрокаСТоваром, СтруктураПараметров.СоставКорзины) тогда
								
								
								Если СтруктураПараметров.ВидСкидки = "Процент" тогда
									
									СтрокаСТоваром.ПроцентСкидкиНаценки = СтрокаСТоваром.ПроцентСкидкиНаценки + СтруктураПараметров.ЗначениеСкидки*100
									/ ?(СтрокаСТоваром.Количество = 0, 1, СтрокаСТоваром.Количество);
									ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСТоваром, Чек);
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСТоваром, Чек);
									//Заполнение скидки в купонах
									текСуммаСкидки = ОбработкаТабличныхЧастей.РассчитатьСкидкуТабЧасти(СтрокаСТоваром, Истина);
									СтрокаСТоваром.СуммаСкидки = текСуммаСкидки;
									ДобавитьКупонВДокумент_(СтрокаСТоваром.НомерСтроки, СтрокаСТоваром.СуммаСкидки, ИДТранзакции, стрКупон.Купон);
									
									
									
								ИначеЕсли СтруктураПараметров.ВидСкидки = "СуммаСкидки" тогда	
									
									текСуммаБезСкидок 			= СтрокаСТоваром.Сумма;						
									//текСуммаСкидки = Мин( ОстатокСуммовойСкидки, текСтрокаТовары.Сумма - текСтрокаТовары.СуммаСкидки );
									текСуммаСкидки = Мин( ОстатокСуммовойСкидки, СтрокаСТоваром.Сумма);//текСуммаБезСкидок - СтрокаСТоваром.СуммаСкидки );	
									Если текСуммаБезСкидок > 1	тогда
										Если текСуммаБезСкидок <= текСуммаСкидки Тогда
											текСуммаСкидки = текСуммаСкидки - 1;
										КонецЕсли;	
										
										СтрокаСТоваром.СуммаСкидки = СтрокаСТоваром.СуммаСкидки + текСуммаСкидки;
										
										Если СтрокаСТоваром.СуммаСкидки =  текСуммаБезСкидок тогда
											СтрокаСТоваром.СуммаСкидки = СтрокаСТоваром.СуммаСкидки - 1;										
										КонецЕсли;	
										
										
										//% скидки
										текСуммаБезСкидок 			= СтрокаСТоваром.Сумма;						
										СтрокаСТоваром.Сумма 		= текСуммаБезСкидок - текСуммаСкидки;
										
										ПроцентСкидки   			= 100 - (СтрокаСТоваром.Сумма * 100) / текСуммаБезСкидок;
										ПроцентСкидкиНаценки 		= Окр(ПроцентСкидки, 2, ТекущийРежимОкругления);
										СтрокаСТоваром.ПроцентСкидкиНаценки = ПроцентСкидки;
										ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСТоваром, Чек);
										ДобавитьКупонВДокумент_(СтрокаСТоваром.НомерСтроки, СтрокаСТоваром.СуммаСкидки, ИДТранзакции, стрКупон.Купон);
										ОстатокСуммовойСкидки = ОстатокСуммовойСкидки - текСуммаСкидки;
									КонецЕсли;	
									
									
									
								ИначеЕсли СтруктураПараметров.ВидСкидки = "ФиксЦена" тогда	
									
									СтараяЦена 			= СтрокаСТоваром.Цена;
									
									текЦена 			= СтрокаСТоваром.Сумма / ?(СтрокаСТоваром.Количество = 0, 1, СтрокаСТоваром.Количество);
									текЦенаСоСкидкой	= Мин( СтруктураПараметров.ЗначениеСкидки, текЦена );
									СтрокаСТоваром.Цена 	= текЦенаСоСкидкой;
									
									ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСТоваром, Чек);
									ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСТоваром, Чек);
									ДобавитьКупонВДокумент_(СтрокаСТоваром.НомерСтроки, СтрокаСТоваром.СуммаСкидки, ИДТранзакции, стрКупон.Купон);
									
								КонецЕсли;	
								
								
							КонецЕсли;	
							
						КонецЕсли;	
					КонецЦикла;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			
		КонецЕсли;	
		
		
	Иначе	
		
		//ввод кода купона ---------------------------------------------------------------
		КодКупона = "";
		РезультатВводаСтроки = ВвестиСтроку( КодКупона, "Введите 12-значный код клиента:", 50 );
		
		Если РезультатВводаСтроки = Ложь тогда// ИЛИ стрДлина(КодКупона) < ОбщегоНазначения.ПривестиСтрокуКЧислу(Акция.Атрибуты.Найти("ДлинаКода").ЗначениеАтрибута) тогда
			
			Предупреждение("Код не введен или введен некорректно");
			Чек.Скидки.Очистить();
			Чек.Купоны.Очистить();
			
			
			Отказать = Истина;
			для каждого стр из Чек.Товары цикл
				
				
				стр.СуммаСкидки = 0;
				стр.Сумма       = стр.Цена-стр.СуммаСкидки;
				стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
				Истина,
				Истина,
				Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				
				
			КонецЦикла;	
			Закрыть(Ложь);
			Возврат;
		КонецЕсли;	
		
		КодКупона = СокрЛП(СтрЗаменить(КодКупона, "-", ""));	
		КодКупона = СокрЛП(СтрЗаменить(КодКупона, ".", ""));	
		КодКупона = СокрЛП(СтрЗаменить(КодКупона, ",", ""));	
		
		Попытка
			КодКупона = Число(КодКупона);
		Исключение
			Сообщить("Введен не корректный код купона");
			Чек.Скидки.Очистить();
			Чек.Купоны.Очистить();
			
			
			Отказать = Истина;
			для каждого стр из Чек.Товары цикл
				
				
				стр.СуммаСкидки = 0;
				стр.Сумма       = стр.Цена-стр.СуммаСкидки;
				стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
				Истина,
				Истина,
				Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
			КонецЦикла;	
			
			Закрыть(Ложь);
			Возврат;
		КонецПопытки;	
		ЕстьТакойКупон = Ложь;
		Для каждого текСтрокаКупонов Из Чек.Купоны Цикл		
			Если СокрЛП(текСтрокаКупонов.КодКупона) = СокрЛП(КодКупона) Тогда   //{РТК_#1631_29.06.2012_16:57:29_Ульянников_}
				ЕстьТакойКупон = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЕстьТакойКупон Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Купон с таким номером уже был использован в документе. Повторное использование невозможно!");
			Отказ = Истина;
			Отказать = Истина;
			Чек.Скидки.Очистить();
			Чек.Купоны.Очистить();
			
			для каждого стр из Чек.Товары цикл						 						 
				стр.СуммаСкидки = 0;
				стр.Сумма       = стр.Цена-стр.СуммаСкидки;
				стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
				Истина,
				Истина,
				Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
			КонецЦикла;
			
			
			
			Закрыть(Ложь);
		КонецЕсли; 
		
	
	
	
	
	
	//КодДобавленУ = Ложь;	
	Результат 		= Ложь;
	СтруктураОтвет 	= "";
	ИДТранзакции 	= Рарус_РаботаСоСкидкамиПоСегментам.СгенерироватьИД();
	
	Если Не ПроверкаКупона(Чек, КодКупона, СтруктураОтвет, ИДТранзакции) Тогда
		
		Чек.Скидки.Очистить();
		Чек.Купоны.Очистить();
		для каждого стр из Чек.Товары цикл						 						 
			стр.СуммаСкидки = 0;
			стр.Сумма       = стр.Цена-стр.СуммаСкидки;
			стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
			Истина,
			Истина,
			Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
		КонецЦикла;
		Отказ = Истина;
		Отказать = Истина;
		Закрыть(Ложь);
		
		
		Отказ = Истина;
		//РАРУС_РаботаСоСкидкамиПоСегментам.УдалитьНоменклатуруКупон(ЭтотОбъект, СтрокаТабличнойЧасти);
		Возврат;
	КонецЕсли;
	
	СтатусКупона 		= СтруктураОтвет.СтатусКупона;
	//ТипЗначенияКупона 	= СтруктураОтвет.ТипЗначенияКупона;
	//ЗначениеКупона 		= СтруктураОтвет.ЗначениеКупона;
	//ТипКупона 			= СтруктураОтвет.ТипКупона;
	КодСегмента = СокрЛП(Акция.Код);	
	//ДлинаНомераКупона  = СтрДлина(КодКупона);
	//Если СокрЛП(ТипКупона) <> СокрЛП(КодСегмента) тогда
	//	ОбщегоНазначения.ПредупреждениеПользователю("Номер сегмента в справочнике Акции отличается от номера сегмента в хранилище. Обратитесь в отдел маркетинга!");
	//	ЧекККМ.Скидки.Очистить();
	//	для каждого стр из ЧекККм.Товары цикл						 						 
	//		стр.СуммаСкидки = 0;
	//		стр.Сумма       = стр.Цена-стр.СуммаСкидки;
	//		стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
	//		Истина,
	//		Истина,
	//		Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
	//	КонецЦикла;
	//	   
	//	
	//	Отказ = Истина;
	//	возврат;
	//КонецЕсли;									
	КодТочки 	= ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	КодПодтверждения = "";
	отказ = ложь;
	Если СтатусКупона="NotUsed" Тогда //применим полученную скидку
		
		сообщить("статус купона" + статусКупона);
		//Если СкидкаПоКоду = 1500 тогда
		//	оАкция = Справочники.Акции.НайтиПоКоду("000002326");
		//	
		//ИначеЕсли СкидкаПоКоду = 3000 тогда
		//	оАкция = Справочники.Акции.НайтиПоКоду("000002327");
		//	
		//ИначеЕсли СкидкаПоКоду = 5000 тогда
		//	оАкция = Справочники.Акции.НайтиПоКоду("000002328");
		//	
		//Иначе     оАкция = Справочники.Акции.НайтиПоКоду("000002326");
		//	
		//КонецЕсли;
		Если ЗначениеЗаполнено(Акция) тогда
			оАкция = Акция.Ссылка;
			//{РТК_Путин_24.10.2014_
			пПрименитьАкциюИЗСправочника(Чек, оАкция);
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Неизвестный статус кода ["+КодКупона+"]!", Отказ);
		для каждого стр из Чек.Товары цикл						 						 
			стр.СуммаСкидки = 0;
			стр.Сумма       = стр.Цена-стр.СуммаСкидки;
			стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
			Истина,
			Истина,
			Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
		КонецЦикла;
		Отказ = Истина;
		
		Отказать = Истина;
		
		Чек.Купоны.Очистить();
		Закрыть(Ложь);

		
		
	КонецЕсли;
	
	//Отказ = Ложь;
	
	Если Отказ = Ложь Тогда 
		Для каждого стр из Акция.Состав Цикл
			ТипСкидки = стр.ВидСкидки;
			ЗначениеСкидки = стр.ЗначениеСкидки;
		КонецЦикла;	 
		
		Втоварах = Чек.Скидки.Найти(Акция, "СкидкаНаценка");
		Если Втоварах <> неопределено тогда
			СтрокаТабличнойЧасти = Чек.Товары.Найти(Втоварах.КлючСтроки, "НомерСтроки");
			
		КонецЕсли;	
		Если СтрокаТабличнойЧасти <> неопределено тогда
		Рарус_РаботаСоСкидкамиПоСегментам.ДобавитьКупонВДокумент(Чек, СтрокаТабличнойЧасти, Чек.Товары.Итог("СуммаСкидки"), ТипСкидки, ЗначениеСкидки, КодСегмента, КодКупона, СтрокаТабличнойЧасти.КлючСвязиНоменклатураКупон, КодПодтверждения, ИДТранзакции); 
		КонецЕсли;
		КодДобавленУ = Истина;
	КонецЕсли;
	
	//9464
	//#Если Клиент Тогда
	//	Предупреждение("Внимание! На товар, участвующий в акции" + " " + СокрЛП(Акция) + " " + "была применена скидка");	
	//#КонецЕсли
	
	Если Отказ = Истина тогда
		Отказать = Истина;
		Чек.Купоны.Очистить();
		Чек.Скидки.Очистить();
		для каждого стр из Чек.Товары цикл
			
			
			стр.СуммаСкидки = 0;
			стр.Сумма       = стр.Цена-стр.СуммаСкидки;
			стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
			Истина,
			Истина,
			Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
			
			
		КонецЦикла;	
		
		
	КонецЕсли;	
		
КонецЕсли;		
	
	
	
	
	
	
КонецПроцедуры	




Процедура пПрименитьАкциюИЗСправочника(ЧекККМ, оАкция) Экспорт
				
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЧекККМ.Товары);
		
		
		Результат = Ложь;
		
		
		//Очистим все скидки перед началом работы обработки
		СтрокиЧека = Новый ТаблицаЗначений;
		ТаблицаТЧТовары = ЧекККМ.Товары.Выгрузить();	
		СтрокиЧека = ЧекККМ.Товары.Выгрузить();
		ТЧЧек = ЧекККМ.Товары;
		ТЧакции = ЧекККМ.Скидки;
		
		таблицатоваров = новый ТаблицаЗначений;
		таблицатоваров = ТаблицаТЧТовары.СкопироватьКолонки();
		ТаблицаТоваров = ТаблицаТЧТовары; 
		ТаблицаТоваров.Колонки.Добавить("МинЦена");
		ТаблицаТоваров.Колонки.Добавить("МаксЦена");
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МинЦена");
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МаксЦена");
		
		// получение списка родителей
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
		ВсеРодители = Запрос.Выполнить().Выгрузить();
		
		магазин = ПараметрыСеанса.ТекущийМагазин;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Склад", Магазин.ОсновнойСклад);
		Запрос.Текст = "ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
		ВсеСклады 		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		СоставЗаказа    = УправлениеМаркетинговымиАкциями.ОбновитьДанныеЗаказа(ТаблицаТоваров, ВсеРодители);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ВсеРодители", 	ВсеРодители);
		Запрос.УстановитьПараметр("ДатаРекл", 		ТекущаяДата());
		Запрос.УстановитьПараметр("ВсеСклады", 		ВсеСклады);
		Запрос.УстановитьПараметр("СоставЗаказа",	СоставЗаказа);
		Запрос.УстановитьПараметр("ИспользоватьАкцииПоКредиту",	оАкция.АкцияПоКредиту);
		
		
		Запрос.Текст = "ВЫБРАТЬ 
		|	СоставЗаказа.Номенклатура,
		|	СоставЗаказа.МинЦена,
		|	СоставЗаказа.МаксЦена,
		|	СоставЗаказа.НомерСтроки
		|ПОМЕСТИТЬ СоставЗаказа
		|ИЗ
		|	&СоставЗаказа КАК СоставЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Акции.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДоступныеАкции
		|ИЗ
		|	Справочник.Акции КАК Акции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Склады.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.Склады КАК Склады
		|		ГДЕ
		|			Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
		|		ПО Акции.УчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка
		|ГДЕ
		|	 ВЫБОР
		|			КОГДА &ИспользоватьАкцииПоКредиту
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ Акции.АкцияПоКредиту = ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставАкции.Акция,
		|	СоставАкции.Корзина,
		|	СоставАкции.ВидСкидки,
		|	СоставЗаказа.Номенклатура,
		|	СоставЗаказа.МинЦена,
		|	СоставЗаказа.МаксЦена,
		|	СоставЗаказа.НомерСтроки,
		|	СоставАкции.ЗначениеСкидки,
		|	СоставАкции.КорзинаМинЦена,
		|	СоставАкции.КорзинаМаксЦена
		|ПОМЕСТИТЬ ДоступныеКорзины
		|ИЗ
		|	(ВЫБРАТЬ
		|		АкцииСостав.Корзина КАК Корзина,
		|		АкцииСостав.Ссылка КАК Акция,
		|		АкцииСостав.ВидСкидки КАК ВидСкидки,
		|		КорзиныСоставКорзины.Номенклатура КАК Номенклатура,
		|		АкцииСостав.Корзина.МинЦена КАК КорзинаМинЦена,
		|		АкцииСостав.Корзина.МаксЦена КАК КорзинаМаксЦена,
		|		АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидки
		|	ИЗ
		|		ДоступныеАкции КАК ДоступныеАкции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
		|			ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
		|			ПО (АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка)) КАК СоставАкции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставЗаказа КАК СоставЗаказа
		|		ПО СоставАкции.Номенклатура = СоставЗаказа.Номенклатура
		|			И СоставАкции.КорзинаМинЦена <= СоставЗаказа.МаксЦена
		|			И (СоставАкции.КорзинаМаксЦена >= СоставЗаказа.МинЦена
		|				ИЛИ СоставАкции.КорзинаМаксЦена = 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Акции.Ссылка КАК СкидкаНаценка,
		|	КорзиныТаблицы.Корзина КАК Корзина,
		|	КорзиныТаблицы.Номенклатура,
		|	КорзиныТаблицы.ВидСкидки,
		|	КорзиныТаблицы.НомерСтроки КАК НомерСтроки,
		|	КорзиныТаблицы.МинЦена КАК МинЦена,
		|	КорзиныТаблицы.МаксЦена КАК МаксЦена,
		|	Акции.Ссылка.ВыгодаДляКлиента КАК ВыгодаДляКлиента,
		|	КорзиныТаблицы.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
		|	КорзиныТаблицы.КорзинаМинЦена,
		|	КорзиныТаблицы.КорзинаМаксЦена
		|ИЗ
		|	ДоступныеАкции КАК Акции
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			АкцииУчастникиАкции.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.Акции.УчастникиАкции КАК АкцииУчастникиАкции
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Склады.Ссылка КАК Ссылка
		|				ИЗ
		|					Справочник.Склады КАК Склады
		|				ГДЕ
		|					Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
		|				ПО АкцииУчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка) КАК ДоступныеАкции
		|		ПО Акции.Ссылка = ДоступныеАкции.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеКорзины КАК КорзиныТаблицы
		|		ПО Акции.Ссылка = КорзиныТаблицы.Акция
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДоступныеАкции.Ссылка КАК Ссылка,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АкцииСостав.Корзина) КАК КоличествоКорзин
		|		ИЗ
		|			ДоступныеАкции КАК ДоступныеАкции
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
		|				ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДоступныеАкции.Ссылка) КАК НеобходимыеКорзины
		|		ПО Акции.Ссылка = НеобходимыеКорзины.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДоступныеКорзины.Акция КАК Акция,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКорзины.Корзина) КАК КоличествоКорзин
		|		ИЗ
		|			ДоступныеКорзины КАК ДоступныеКорзины
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДоступныеКорзины.Акция) КАК ВложенныйЗапрос
		|		ПО Акции.Ссылка = ВложенныйЗапрос.Акция
		|ГДЕ
		|	НеобходимыеКорзины.КоличествоКорзин = ВложенныйЗапрос.КоличествоКорзин
		|	И (НЕ Акции.Ссылка ЕСТЬ NULL )
		|ИТОГИ ПО
		|	СкидкаНаценка";
		
		ВыборкаАкций  = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкидкаНаценка");
		
		ВыборкаАкций.Сбросить();
		масНоменклат = Новый ТаблицаЗначений;
		масНоменклат.колонки.Добавить("НомерСтроки");
		масНоменклат.колонки.Добавить("Корзина");
		Пока ВыборкаАкций.НайтиСледующий(Новый Структура("СкидкаНаценка", оАкция)) Цикл
			ВыборкаСтрок = ВыборкаАкций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
			
			Пока ВыборкаСтрок.Следующий() Цикл
				Стр =масНоменклат.Добавить();
				Стр.НомерСтроки = ВыборкаСтрок.НомерСтроки;
				Стр.Корзина = ВыборкаСтрок.Корзина;
			КонецЦикла;	 
		КонецЦикла;	
		//	масНоменклат.Свернуть("НомерСтроки","");
		// Нужен товар только один товар из корзины. Счетчиком проверить сколько раз входит товар в корзину.
		запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АкцииСостав.Корзина,
		|	АкцииСостав.ВидСкидки,
		|	АкцииСостав.ЗначениеСкидки
		|ИЗ
		|	Справочник.Акции.Состав КАК АкцииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
		|		ПО АкцииСостав.Ссылка = Акции.Ссылка
		|ГДЕ
		|	Акции.Ссылка = &Акция";
		запрос.УстановитьПараметр("Акция", оАкция);
		КорзинаАкций = Запрос.Выполнить().Выгрузить();				   
		//получим строки из документа ЧекККМ 
		//и отсортируем из в соответствии с механизмом акции
		запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Акции.ВыгодаДляКлиента как выгода
		|ИЗ
		|	Справочник.Акции КАК Акции
		|ГДЕ
		|	Акции.Ссылка = &Акция";
		запрос.УстановитьПараметр("Акция", оАкция);
		Выгода = Запрос.Выполнить().Выгрузить();
		
		Если Выгода[0].выгода = "Мин" Тогда 
			Ключ = "Цена ВОЗР";
		ИначеЕсли Выгода[0].выгода = "Макс" Тогда 
			Ключ = "Цена УБЫВ";
		ИначеЕсли Выгода[0].выгода = "ПоПорядку" Тогда
			Ключ = "НомерСтроки ВОЗР";
		Иначе
			Ключ = "НомерСтроки УБЫВ";
		КонецЕсли;
		//СоставЗаказа.Сортировать(Ключ);
		
		
		СтрокиЧека = Новый ТаблицаЗначений;
		СтрокиЧека.Колонки.Добавить("НомерСтроки");
		СтрокиЧека.Колонки.Добавить("Номенклатура");	
		СтрокиЧека.Колонки.Добавить("Количество");
		СтрокиЧека.Колонки.Добавить("Цена");
		СтрокиЧека.Колонки.Добавить("СуммаСкидки");
		СтрокиЧека.Колонки.Добавить("Сумма");
		СтрокиЧека.Колонки.Добавить("ПроцентСкидкиНаценки");
		СтрокиЧека.Колонки.Добавить("Корзина");
		СтрокиЧека.Колонки.Добавить("ПометкаУдаления");
		СтрокиЧека.ЗаполнитьЗначения(Ложь,"ПометкаУдаления"); 
		Для каждого стр Из масНоменклат Цикл
			строка = СтрокиЧека.Добавить();
			строка.НомерСтроки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").НомерСтроки;
			строка.Номенклатура = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Номенклатура;
			строка.Количество = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Количество;
			строка.Цена = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Цена;
			строка.СуммаСкидки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").СуммаСкидки;
			строка.Сумма = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Сумма;
			строка.ПроцентСкидкиНаценки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").ПроцентСкидкиНаценки;
			строка.корзина = стр.Корзина; 
		КонецЦикла;  
		ТЧЧека = ЧекККМ.Товары;
		
		
		Если Истина Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	АкцииСостав.Корзина,
			|	АкцииСостав.ВидСкидки,
			|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
			|	АкцииСостав.НомерСтроки
			|ИЗ
			|	Справочник.Акции.Состав КАК АкцииСостав
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
			|		ПО АкцииСостав.Ссылка = Акции.Ссылка
			|ГДЕ
			|	Акции.Ссылка = &Акция";
			
			запрос.УстановитьПараметр("Акция", оАкция);
			СкидкиАк = Запрос.Выполнить().Выгрузить();          
			
			//сосчитаем не пустые скидки
			
			
			НайденныеСтроки  = новый ТаблицаЗначений; //массив со всеми скидками
			НайденныеСтроки.Колонки.Добавить("НомерСтроки");
			НайденныеСтроки.Колонки.Добавить("Номенклатура");	
			НайденныеСтроки.Колонки.Добавить("Количество");
			НайденныеСтроки.Колонки.Добавить("Цена");
			НайденныеСтроки.Колонки.Добавить("СуммаСкидки");
			НайденныеСтроки.Колонки.Добавить("Сумма");
			НайденныеСтроки.Колонки.Добавить("ЗначениеСкидкиНаценки");
			НайденныеСтроки.Колонки.Добавить("Корзина");
			НайденныеСтроки.Колонки.Добавить("ВидСкидки");
			НайденныеСтроки.Колонки.Добавить("ПометкаУдаления");
			НайденныеСтроки.ЗаполнитьЗначения(Ложь,"ПометкаУдаления");
			//циклом переберем чек и будем смотреть по корзинам вхождения. В соответствии с вхождением начислим скидки.
			СтрокиЧека.Сортировать(Ключ);
			сообщить(Ключ);
			Если Ключ <> "НомерСтроки УБЫВ" тогда
				Для каждого стрКорзиныАкций Из КорзинаАкций Цикл
					СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
					
					Если СтрЧека <> Неопределено  Тогда
						Стр = НайденныеСтроки.Добавить();
						стр.Номенклатура 	     = СтрЧека.Номенклатура;
						стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
						стр.ВидСкидки		     = стрКорзиныАкций.ВидСкидки;
						стр.количество		     = СтрЧека.Количество;
						стр.ЗначениеСкидкиНаценки = стрКорзиныАкций.ЗначениеСкидки;
						стр.Сумма				 = СтрЧека.Сумма;
						Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
						стр.Цена				 = СтрЧека.Цена;
						стр.Корзина				 = СтрЧека.Корзина;
						
						//если есть строка с таким номером то удаляем все строки с этим номером из исходной таблицы чеков.
						Отбор = новый Структура();
						Отбор.Вставить("НомерСтроки", СтрЧека.НомерСтроки);
						Строки = СтрокиЧека.НайтиСтроки(отбор);
						Если  Строки <> неопределено тогда
							Для каждого стрНЧ Из Строки Цикл
								СтрокиЧека.Удалить(стрНЧ);
							КонецЦикла; 
						КонецЕсли
					КонецЕсли
				КонецЦикла; 
			КонецЕсли;
			Если Ключ = "НомерСтроки УБЫВ" тогда
				Для каждого стрЧека Из СтрокиЧека Цикл
					//СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
					
					для каждого алг из оАкция.состав Цикл
						оВидСкидки = алг.ВидСкидки;
						оЗначениеСкидки = алг.ЗначениеСкидки;
					конеццикла;	
					
					Если СтрЧека <> Неопределено  Тогда
						Стр = НайденныеСтроки.Добавить();
						стр.Номенклатура 	     = СтрЧека.Номенклатура;
						стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
						стр.ВидСкидки		     = оВидСкидки;//стрКорзиныАкций.ВидСкидки;
						стр.количество		     = СтрЧека.Количество;
						стр.ЗначениеСкидкиНаценки = оЗначениеСкидки;//стрКорзиныАкций.ЗначениеСкидки;
						стр.Сумма				 = СтрЧека.Сумма;
						Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
						стр.Цена				 = СтрЧека.Цена;
						стр.Корзина				 = СтрЧека.Корзина;
					КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;	
			НайденныеСтроки.Сортировать(Ключ);
			//составили список строк для скидок назначим скидки.
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции_(НайденнаяСтрока, НайденнаяСтрока,  НайденнаяСтрока.Сумма);
				
				Если ЗначениеЗаполнено(СкидкаПлатеж) И СкидкаПлатеж >0 тогда
					
					скидка = СкидкаПлатеж;
					
				КонецЕсли;	
				
				
				АтрибутЕсть = оАкция.Атрибуты.Найти("РазныеСкидки", "НазваниеАтрибута");
				Если АтрибутЕсть <> Неопределено тогда
					
					Если ВРег(АтрибутЕсть.ЗначениеАтрибута) = врег("Да") тогда
						
						скидка = РассчитатьЗначениеСкидкиИзКорзины(НайденнаяСтрока);
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				
				
				
				//вычислим 20% от суммы
				Если оАкция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута")<> Неопределено тогда
					Если оАкция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута").ЗначениеАтрибута = "2" тогда
						процентСуммы =  ((ТЧЧека[НайденнаяСтрока.НомерСтроки-1].Сумма)*30)/100;
						Если скидка <= процентСуммы тогда
							
						Иначе 		  
							скидка =  процентСуммы;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				
				ТЧЧека[НайденнаяСтрока.НомерСтроки-1].Сумма = НайденнаяСтрока.Сумма - скидка;
				ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(НайденнаяСтрока.Сумма,						
				Истина,
				Истина,
				Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				
				ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаСкидки = скидка;
				ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
				Если НайденнаяСтрока.ВидСкидки = "Процент" Тогда
					ТЧЧека[НайденнаяСтрока.НомерСтроки-1].ПроцентСкидкиНаценки = НайденнаяСтрока.ЗначениеСкидкиНаценки;
				КонецЕсли;
				
				СтрокаАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
				Если СтрокаАтрибута <> неопределено тогда
					ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
					
					Если вРег(ЗначениеАтрибута_) = вРег("2") тогда
						
						Если Акция.Атрибуты.Найти("ОнлайнОтправка", "НазваниеАтрибута") <> Неопределено Тогда
							ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = НомерТелефона;
						КонецЕсли;
					Иначе
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефона),НомерТелефона,ЧекККМ.НомерТелефона);
					КонецЕсли;
					
				Иначе
					ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефона),НомерТелефона,ЧекККМ.НомерТелефона);
				КонецЕсли;
				
				////6836_Ульянников
				//ЗаписатьНомерТелефонаВХЗ(НомерТелефона, НайденнаяСтрока.НомерСтроки);
				////6836_Ульянников

				
				//Если Скидка>0 тогда	
				// SMV08.12.2011 Просто убрали лишние условия, в любом случае акционный товар будет заноситься в ТЧСкидки
				Стр = ТЧакции.добавить();
				Стр.Сумма = Скидка;
				Стр.СкидкаНаценка =Акция;
				Стр.КлючСтроки = НайденнаяСтрока.НомерСтроки;
				//Стр.Основание = Перечисления.ОснованияИспользованияКодаРазблокировки.АкцияМТС;
				
				//КонецЕсли;
			КонецЦикла;
			
		Иначе
			//Второй вариант по порядку
			Запрос.Текст = "ВЫБРАТЬ
			|	АкцииСостав.Корзина,
			|	АкцииСостав.ВидСкидки,
			|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
			|	АкцииСостав.НомерСтроки
			|ИЗ
			|	Справочник.Акции.Состав КАК АкцииСостав
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
			|		ПО АкцииСостав.Ссылка = Акции.Ссылка
			|ГДЕ
			|	Акции.Ссылка = &Акция";
			//|	И АкцииСостав.ЗначениеСкидки > 0";
			запрос.УстановитьПараметр("Акция", оАкция);
			СкидкиАк = Запрос.Выполнить().Выгрузить();
			
			Для ит = 0 По СкидкиАК.Количество()-1 Цикл
				
				Для Ж = 1 По СтрокиЧека.Количество() Цикл
					
					Если СкидкиАк[ит].НомерСтроки = ж Тогда
						скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции(СкидкиАк[ит], СтрокиЧека[ж-1],  СтрокиЧека[ж-1].Сумма);
						Если ЗначениеЗаполнено(СкидкаПлатеж) И СкидкаПлатеж >0 тогда
							
							скидка = СкидкаПлатеж;
							
						КонецЕсли;	
						
						ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].Сумма = СтрокиЧека[ж-1].Сумма - скидка;
						ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(СтрокиЧека[ж-1].Сумма,						
						Истина,
						Истина,
						Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
						
						ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаСкидки = скидка;
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
						Если СкидкиАк[ит].ВидСкидки = "Процент" Тогда
							ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].ПроцентСкидкиНаценки = СкидкиАк[ит].ЗначениеСкидкиНаценки;
						КонецЕсли;	
						
					КонецЕсли;
					
					Если истина тогда		
						ТЧакции[НайденнаяСтрока.НомерСтроки-1].Сумма = скидка;
						ТЧакции[НайденнаяСтрока.НомерСтроки-1].СкидкаНаценка = Акция;
						ТЧакции[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
						//ТЧакции[НайденнаяСтрока.НомерСтроки-1].Основание = Перечисления.ОснованияИспользованияКодаРазблокировки.АкцияМТС;
						СтрокаАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
						Если СтрокаАтрибута <> неопределено тогда
							ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
							
							Если вРег(ЗначениеАтрибута_) = вРег("2") тогда
												
								Если Акция.Атрибуты.Найти("ОнлайнОтправка", "НазваниеАтрибута") <> Неопределено Тогда
									ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = НомерТелефона;
								КонецЕсли;
								
							Иначе
								ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефона),НомерТелефона,ЧекККМ.НомерТелефона);
							КонецЕсли;
							
						Иначе
							ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефона),НомерТелефона,ЧекККМ.НомерТелефона);
						КонецЕсли;

						////6836_Ульянников
						//ЗаписатьНомерТелефонаВХЗ(НомерТелефона, НайденнаяСтрока.НомерСтроки);
						////6836_Ульянников

					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;	
		//Попытка
		//	ЧекККМ.Записать()
		//Исключение
		//КонецПопытки;   
		//ЧекККМ.Разблокировать();

			КонецПроцедуры


Функция ПроверкаКупона(ДокументОбъект, КодКупона, СтруктураОтвет, ИДТранзакции = "", ТипЗапроса = 1) ЭКСПОРТ
   	Отказ = Ложь;
	
	Вопрошать = Истина;
	
	Пока Вопрошать Цикл
		//OPAA ++ 25.07.2011 11:02:32
		Попытка
			//OPAA -- 25.07.2011 11:02:34
			
			Если Не ЗапросНаПроверкуКупона(ДокументОбъект, КодКупона, СтруктураОтвет, ИДТранзакции, ТипЗапроса) Тогда // } Пьянков_ 21.08.2012
				
				Отказать = Истина;
				Возврат Ложь;
			КонецЕсли;
			
			//OPAA ++ 25.07.2011 11:03:44
		Исключение
			СтруктураОтвет = Новый Структура;
			СтруктураОтвет.Вставить("СтатусКупона");	
			//СтруктураОтвет.Вставить("НомерВозвращенныйКупона", 0);
			//СтруктураОтвет.Вставить("ТипКупона");
			//СтруктураОтвет.Вставить("ЗначениеКупона");
			//СтруктураОтвет.Вставить("ТипЗначенияКупона");
			//СтруктураОтвет.Вставить("НомерТранзакции");
			//СтруктураОтвет.Вставить("НомерДокумента");
		КонецПопытки;
		//OPAA -- 25.07.2011 11:03:51
		
		
		
		СтатусКупона 		= СтруктураОтвет.СтатусКупона;
	//	ТипЗначенияКупона 	= СтруктураОтвет.ТипЗначенияКупона;
	//	ЗначениеКупона 		= СтруктураОтвет.ЗначениеКупона;
	//	ТипКупона 			= СтруктураОтвет.ТипКупона;
		
		Если Не ЗначениеЗаполнено(СтатусКупона) Тогда
			//OPAA ++ 21.07.2011 12:49:00
			#Если Клиент Тогда
				Если ПараметрыСеанса.РежимРегистрацииПродаж Тогда
					ФормаИнформацииОбОшибке = Документы.ЧекККМ.ПолучитьФорму("ФормаИнформацииОбОшибке");
					ФормаИнформацииОбОшибке.Ответ = КодВозвратаДиалога.Да;
					//ФормаИнформацииОбОшибке.ЭлементыФормы.ПанельЗакрытьВопрос.ТекущаяСтраница = ФормаИнформацииОбОшибке.ЭлементыФормы.ПанельЗакрытьВопрос.Страницы.СтраницаВопрос;
					ФормаИнформацииОбОшибке.ТекстОшибки = "К сожалению, из-за проблем со связью активация кода в данный момент невозможна. Повторите позже. Повторить запрос?";   //РВМ 20110908
					//ФормаИнформацииОбОшибке.ТекстОшибки = "Ошибка связи! Повторить запрос информации о купоне?";
					ФормаИнформацииОбОшибке.ОткрытьМодально();
					Если ФормаИнформацииОбОшибке.Ответ = КодВозвратаДиалога.Да Тогда 
					ИначеЕсли  ФормаИнформацииОбОшибке.Ответ = КодВозвратаДиалога.Нет Тогда
						Вопрошать = Ложь;
						Отказать = Истина;
						//{РТК_8795_14.06.2012 13:23:18_Мельников_  Отказ от попыток проверить купон равен отказу от купона
						Отказ = Истина;
						//РТК_8795_14.06.2012 13:23:18_Мельников_}
						
					КонецЕсли;
				КонецЕсли;
			#Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка связи!");
				Вопрошать = Ложь;
			#КонецЕсли
			//OPAA -- 21.07.2011 12:49:03
		иначе
			Вопрошать = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Если СтатусКупона="NotUsed" Тогда //применим полученную скидку
	//OPAA ++ 21.07.2011 12:49:00
	ИначеЕсли Не ЗначениеЗаполнено(СтатусКупона) Тогда
		//ОбщегоНазначения.СообщитьОбОшибке("Не получен адекватный ответ от сервера, попробуйте повторно ["+КодКупона+"]!", Отказ);
	//OPAA -- 21.07.2011 12:49:03
	ИначеЕсли СтатусКупона="notexists" Тогда // сетификат не существует
		ОбщегоНазначения.СообщитьОбОшибке("Введен номер несуществующего сетификата ["+КодКупона+"]!", Отказ);
	ИначеЕсли СтатусКупона="existsnoexpiredate" Тогда //сетификат существует, не указан срок действия сетификата
		ОбщегоНазначения.СообщитьОбОшибке("Введенный номер сетификата существует, но не может быть использован из-за того что не указан срок действия ["+КодКупона+"]!", Отказ);
	ИначеЕсли СтатусКупона="existsused" Тогда //сетификат существует, но использован
		ОбщегоНазначения.СообщитьОбОшибке("Введенный номер сетификата уже использован ["+КодКупона+"]!", Отказ);
	ИначеЕсли СтатусКупона="existsexpired" Тогда //Срок действия сетификата истек
		ОбщегоНазначения.СообщитьОбОшибке("Срок действия сетификата истёк ["+КодКупона+"]!", Отказ);
	ИначеЕсли СтатусКупона="notactive" Тогда //
		ОбщегоНазначения.СообщитьОбОшибке("Номер сетификата не выдавался на чеке или его статус не был зафиксирован в базе, попросите покупателя предъявить чек с номером сетификата и создайте инцидент в ХД ["+КодКупона+"]!", Отказ);
	ИначеЕсли СтатусКупона="existsnotnow" Тогда //Дата сетификата больше текущей halan 20111118
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала действия сетификата больше текущей", Отказ);
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Неизвестный статус ["+СтатусКупона+"] сетификата ["+КодКупона+"]!", Отказ);
	КонецЕсли;

	Возврат Не Отказ;

	
КонецФункции // ПроверкаКупона()

Функция ЗапросНаПроверкуКупона(ДокументОбъект, КодКупона, СтруктураОтвет, ИДТранзакции = "", ТипЗапроса = 1)
	
	СтрокаАтрибута = Акция.Атрибуты.Найти("ПервыйЭтап", "НазваниеАтрибута");
	Если СтрокаАтрибута <> Неопределено тогда		
		ЗначАтрибута = СтрокаАтрибута.ЗначениеАтрибута;
	КонецЕсли;
	
	CyberPlat = ПОлучитьСерверТО().ПолучитьОбработку_CyberPlat(); 
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При работе со скидками по купонам произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|Операции с подарочными сертификатами не возможна!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	
	// {РТК_3226_08.04.2013 10:58:13_Суслова_
	//СоздатьКаталог(ИмяКаталога);
	РТК_ДобавленныеПроцедуры_Сервер.СоздатьКаталогОбщий(ИмяКаталога);
	// РТК_3226_08.04.2013 10:58:13_Суслова_}
	
	КодТочки 	= ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла    = КодТочки +"_"+ СтрЗаменить(ДокументОбъект.Ссылка.УникальныйИдентификатор(), "-", "") + "cupon.xml";
	
	
	Если Не ЗначениеЗаполнено(ИДТранзакции) Тогда
		ИДТранзакции = CyberPlat.СгенерироватьИД();
	КонецЕсли; 
	//ТекстКода = "";
	//АкцияПервогоЭтапа = Акция.Атрибуты.Найти("Первый этап", "НазваниеАтрибута");
	//Если АкцияПервогоЭтапа <> Неопределено тогда
	//	ТекстКода = АкцияПервогоЭтапа.ЗначениеАтрибута;
	//	
	//КонецЕсли;	
	
	//Создание 
	ЗаписьXML = Новый ЗаписьXML;    
	ЗаписьXml.ОткрытьФайл(ИмяКаталога+"\"+ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Marketing");                  
	//	ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://tempuri.org/rtk/marketing");
	
	//Проверка с получением ид тразакции
	Если ТипЗапроса = 1 Тогда
		
		//|   <Request>
		//|    <RequestType>CheckCupon</RequestType>
		//|    <TTID>"+глКодТочки+"</TTID>     
		//|    <CheckNumber>"+НомерДокумента+"</CheckNumber>
		//|    <CuponCode>"+НомерКупона+"</CuponCode>
		//|    <Transaction>"+НомерТранзакции+"</Transaction>
		//|   </Request>";
		
		//CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "ModuleVersion", "20091118.01");       
		
		
		//ЗаписьXML.ЗаписатьНачалоЭлемента("Requests");
		ЗаписьXML.ЗаписатьНачалоЭлемента("request");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name","DISCOUNT");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function","ACTION_CHECK");
		ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	СокрЛП(ПараметрыСеанса.КодТочки));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "actioncode",	СокрЛП(Акция.Код));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "discount_code", стрЗаменить(КодКупона,Символы.НПП,""));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "parent_actioncode", ?(ЗначАтрибута<>неопределено,ЗначАтрибута,СокрЛП(Акция.Код)));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "operator_code", ДокументОбъект.Продавец.ТабельныйНомер);
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Request
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Requests                         
		
		//Простая проверка	
	ИначеЕсли ТипЗапроса = 2 Тогда	
		
		//|   <Request>
		//|    <RequestType>GetCuponStatus</RequestType>
		//|    <TTID>"+глКодТочки+"</TTID>
		//|    <CuponCode>"+Купон_+"</CuponCode>
		//|   </Request>";
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("request");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name","DISCOUNT");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function","ACTION_CHECK");
		ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	СокрЛП(ПараметрыСеанса.КодТочки));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "actioncode",	СокрЛП(Акция.Код));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "discount_code", стрЗаменить(КодКупона,Символы.НПП,""));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "parent_actioncode", ?(ЗначАтрибута<>неопределено,ЗначАтрибута,СокрЛП(Акция.Код)));
		CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "operator_code", ДокументОбъект.Продавец.ТабельныйНомер);
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Request
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Requests                         
		
                     
		
		
	КонецЕсли; 
	
	
	//Marketing
	
	ЗаписьXML.Закрыть();
	
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога+"\"+ИмяФайла);
	
	ЗначениеUrl = "";
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("#5090", ЗначениеUrl) Тогда
		Если ЗначениеUrl <> "" Тогда
			url = ЗначениеUrl;	
		Иначе	
			url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";	
		КонецЕсли;
	Иначе	
		url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";
	КонецЕсли;

	
	
	Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);
	
	
	ДеревоXML = "";
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(AnswerXML);
	
	Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
		ОписаниеОшибки = ("При работе со скидками по купонам произошла ошибка.
		|Не удалось разобрать ответ!");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	//Попытка
	//	Если	(ДеревоXML.response.is_error = "0") И ДеревоXML.response.message = "1"  тогда
	//		
	//		возврат ложь;
	//	ИначеЕсли ДеревоXML.response.is_error = "0" И ДеревоXML.response.message = "0" тогда
	//		
	//	ИначеЕсли (ДеревоXML.response.is_error = "1") И ДеревоXML.response.message <> "" тогда
	//		#Если клиент тогда
	//			ОбщегоНазначения.СообщитьОбОшибке(ДеревоXML.response.message);
	//		#КонецЕсли	
	//		
	//		возврат ложь;
	//		
	//	ИначеЕсли (ДеревоXML.response.is_error = "0") И ДеревоXML.response.message <> "" тогда
	//		
	//		СкидкаПоКоду = ОбщегоНазначения.ПривестиСтрокуКЧислу(ДеревоXML.response.message);	
	//		
	//	КонецЕсли;	
	//	
	//	
	//	
	//Исключение
	//	
	//КонецПопытки;
	
	
	Попытка
		Если	(ДеревоXML.response.is_error = "1")  тогда
			#Если клиент тогда
				ОбщегоНазначения.СообщитьОбОшибке(ДеревоXML.response.message);
			#КонецЕсли	
			возврат ложь;
		ИначеЕсли ДеревоXML.response.is_error = "0"  И ДеревоXML.response.message.count = "0" тогда
			
		ИначеЕсли ДеревоXML.response.is_error = "0"  И ДеревоXML.response.message.count = "1" тогда	
			возврат ложь;			
			
		КонецЕсли;	
		
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	
	
	
	//Разбор ответа по переменным ---------------------------------------------------------------------------------------
	СтруктураОтвет = Новый Структура;
	
	Попытка
		СтруктураОтвет.Вставить("СтатусКупона", "NotUsed");
	Исключение
		СтруктураОтвет.Вставить("СтатусКупона");	
	КонецПопытки;
	
	
	Возврат Истина;
	

КонецФункции // ЗапросНаПроверкуКупона()
			
Функция НомерТранзакцииЧислом(КодТочки) Экспорт
	////перепилено с 7.7
	ИтоговаяСтрока = "";
	_Комп=КодСимвола(Прав(СокрЛП(ИмяКомпьютера()),1));
	Попытка
		КодТочкиЧ=Число(Сред(КодТочки,2,3));
	Исключение
		КодТочкиЧ=999;
	КонецПопытки;
	_Точка=""+Прав(КодСимвола(Сред(КодТочки,1,1)),2)+СокрЛП(КодТочкиЧ);	
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0);
	СтрСлучайноеЧисло = Строка(СлучайноеЧисло);
	
	Для Сч = 1 По СтрДлина(СтрСлучайноеЧисло) Цикл
		Символ = Сред(СтрСлучайноеЧисло, Сч, 1);
		Если Найти("0123456789", Символ) Тогда
			ИтоговаяСтрока = ИтоговаяСтрока+Символ;
		КонецЕсли;
	КонецЦикла;

	Возврат  _Точка+ИтоговаяСтрока;
	
КонецФункции
			
			

Функция ЭтоНомерМТС(НомерТелефона)  
	#Если Клиент Тогда	
	ЗначениеПараметра = "";	
	TransId= НомерТранзакцииЧислом(ПараметрыСеанса.КодТочки);
	cid_ = "1021";
	Если РТК_Добавленныепроцедуры_Сервер.ФункционалВключен("Проверка_MNP", ЗначениеПараметра) тогда
		Если СокрЛП(ЗначениеПараметра) = "1" тогда
			Возврат Истина;
			
		ИначеЕсли  СокрЛП(ЗначениеПараметра) = "2" тогда	
			
			CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
			Если CyberPlat = Неопределено  Тогда
				ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
				|Не удалось получить обработку <CyberPlat>!
				|");
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
				Возврат Ложь;
			КонецЕсли;
			пЗаписьXML = Новый ЗаписьXML();	
			пФайлТестаЗапроса = КаталогВременныхФайлов()+"_CyberPlat.xml";
			
			пЗаписьXML.ОткрытьФайл(пФайлТестаЗапроса, "utf-8");
			
			
			пЗаписьXML.ЗаписатьОбъявлениеXML();
			
			пЗаписьXML.ЗаписатьНачалоЭлемента("TransparentGateway");
			пЗаписьXML.ЗаписатьНачалоЭлемента("Request");
			пЗаписьXML.ЗаписатьАтрибут("xmlns", "http://tempuri.org/rtk/TransparentGateway");
			
			
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "RequestType", 	"CheckNumber");
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "TransactionId", TransId);
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "PointCode", 	ПараметрыСеанса.КодТочки);
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "ServiceId", 	cid_);
			
			
			пЗаписьXML.ЗаписатьНачалоЭлемента("Params");
			
			пЗаписьXML.ЗаписатьНачалоЭлемента("Param");
			пЗаписьXML.ЗаписатьАтрибут("name", "NUMBER");
			пЗаписьXML.ЗаписатьАтрибут("value", НомерТелефона);
			пЗаписьXML.ЗаписатьКонецЭлемента();
			
			пЗаписьXML.ЗаписатьНачалоЭлемента("Param");
			пЗаписьXML.ЗаписатьАтрибут("name", "ACCOUNT");
			пЗаписьXML.ЗаписатьАтрибут("value", "");
			пЗаписьXML.ЗаписатьКонецЭлемента();//Param
			
			пЗаписьXML.ЗаписатьКонецЭлемента();//Params
			
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "Amount", 		"1.00");
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "Commission", 	"0.00");
			
			пЗаписьXML.ЗаписатьКонецЭлемента();//Request
			пЗаписьXML.ЗаписатьКонецЭлемента();//TransparentGateway
			
			пЗаписьXML.Закрыть();
			
			AnswerXML = "";
			РасширенныйКодОшибки = -1;
			
			// Отправка запроса
			XML = Новый ТекстовыйДокумент;
			XML.Прочитать(пФайлТестаЗапроса);
			
			//Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);
			
			Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML,,,,,,,,,,,,Ложь);//Дживс отключим по просьбе Шкичева
			// Подготовка дерева ответа
			ДеревоXML = "";
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXml.УстановитьСтроку(AnswerXML);
			
			// Построение дерева из ответа
			Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
				ТекстВопроса = "Из-за технических проблем невозможно проверить принадлежность номера МТС";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
				Отказать = Истина;
				
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Ложь;
				Иначе
					Возврат Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
			Попытка
				
				Если ТипЗнч(ДеревоXML.TransparentGateway) = Тип("Структура") тогда
					Если ТипЗнч(ДеревоXML.TransparentGateway.InnerResponse) = Тип("Структура") тогда
						Если ТипЗнч(ДеревоXML.TransparentGateway.InnerResponse.CyberPlat) = Тип("Структура") тогда 
							
							Если ДеревоXML.TransparentGateway.InnerResponse.CyberPlat.ErrorCode <> "" И 
								ДеревоXML.TransparentGateway.InnerResponse.CyberPlat.ErrorMessage <> "" И
								ДеревоXML.TransparentGateway.InnerResponse.CyberPlat.Result = "1" тогда
								
								Возврат Ложь;
								
							КонецЕсли;	 
							
							Если ДеревоXML.TransparentGateway.InnerResponse.CyberPlat.ErrorCode = "" И 
								ДеревоXML.TransparentGateway.InnerResponse.CyberPlat.Result = "0" тогда
								
								Возврат Истина;
								
								
							КонецЕсли;	 
							
							
						КонецЕсли;	 
					КонецЕсли;
				Иначе	
					 Возврат ложь;
				КонецЕсли;	
				
				
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли СокрЛП(ЗначениеПараметра) = "3" тогда
			
			CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
			Если CyberPlat = Неопределено  Тогда
				ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
				|Не удалось получить обработку <CyberPlat>!
				|");
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
				Возврат Ложь;
			КонецЕсли;
			пЗаписьXML = Новый ЗаписьXML();	
			пФайлТестаЗапроса = КаталогВременныхФайлов()+"_CyberPlat.xml";
			
			пЗаписьXML.ОткрытьФайл(пФайлТестаЗапроса, "utf-8");
			
			
			пЗаписьXML.ЗаписатьОбъявлениеXML();
			
			пЗаписьXML.ЗаписатьНачалоЭлемента("FrontPluginCheckMtsSubscriber");
			пЗаписьXML.ЗаписатьАтрибут("xmlns", "http://tempuri.org/rtk/FrontPluginCheckMtsSubscriber");
			пЗаписьXML.ЗаписатьНачалоЭлемента("Request");
			
			
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "PointCode", 	ПараметрыСеанса.КодТочки);
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "TransactionId", TransId);
			CyberPlat.ЗаписатьЭлементXML(пЗаписьXML, "Phone", НомерТелефона);
			
			
			пЗаписьXML.ЗаписатьКонецЭлемента();//Request
			пЗаписьXML.ЗаписатьКонецЭлемента();//FrontPluginCheckMtsSubscriber
			
			пЗаписьXML.Закрыть();
			
			AnswerXML = "";
			РасширенныйКодОшибки = -1;
			
			// Отправка запроса
			XML = Новый ТекстовыйДокумент;
			XML.Прочитать(пФайлТестаЗапроса);
			
			//Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);
			
			Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML,,,,,,,,,,,,Ложь);//Дживс отключим по просьбе Шкичева
			
			
			
			// Подготовка дерева ответа
			ДеревоXML = "";
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXml.УстановитьСтроку(AnswerXML);
			
			// Построение дерева из ответа
			Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
				ТекстВопроса = "Из-за технических проблем невозможно проверить принадлежность номера МТС";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
				Отказать = Истина;
				
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Ложь;
				Иначе
					Возврат Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
			Попытка
				
				Если ТипЗнч(ДеревоXML.FrontPluginCheckMtsSubscriber.Response) = Тип("Структура") тогда
					Если ДеревоXML.FrontPluginCheckMtsSubscriber.Response.IsMtsSubscriber = "0" ИЛИ 
						 ДеревоXML.FrontPluginCheckMtsSubscriber.Response.IsError = "1"  тогда
						
						Возврат Ложь;
						
						
					КонецЕсли;	 
					
					Если ДеревоXML.FrontPluginCheckMtsSubscriber.Response.IsMtsSubscriber = "1" И 
						 ДеревоXML.FrontPluginCheckMtsSubscriber.Response.IsError = "0"  тогда
						

						
						Возврат Истина;
						
						
					КонецЕсли;	 
					
					
					
					
				КонецЕсли;	
				
				
			Исключение
				Возврат Ложь;
			КонецПопытки;

			
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	Возврат Ложь;	
 #КонецЕсли	


КонецФункции


Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

Процедура Переключатель1ПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Сообщить(ПереключательОпций1);
	
	ЗначАтрибута = "";
	СтрАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
	Если СтрАтрибута <> Неопределено тогда
		ЗначАтрибута = СтрАтрибута.ЗначениеАтрибута;	
	КонецЕсли;	
	
	Если ПереключательОпций1 = 3 ИЛИ ПереключательОпций1 = 10 Тогда
		ЭлементыФормы.Надпись3.Видимость = Ложь;
		Элементыформы.ПолеВвода1.Видимость = Ложь;

	ИначеЕсли ПереключательОпций1 = 5 ИЛИ ПереключательОпций1 = 6 ИЛИ ПереключательОпций1 = 4 тогда
		
		Если ЗначАтрибута <> "0" тогда
			ЭлементыФормы.Надпись3.Видимость = Истина;
			Элементыформы.ПолеВвода1.Видимость = Истина;
		КонецЕсли;
		#Если клиент тогда
   // Предупреждение("«Ежемесячная плата на 6 месяцев_0» 
	               // |может быть подключена только к ТП линейки Smart",6,"НЕ УПУСТИ!");
				#КонецЕсли	
				
	    			
				
	//Иначе
	//	ЭлементыФормы.Надпись3.Видимость = ложь;
	//	Элементыформы.ПолеВвода1.Видимость = ложь;

	КонецЕсли;
	Если ЗначениеЗаполнено(НомерТелефона) И ЗначениеЗаполнено(Чек.мНомерТелефонаДополнительный) тогда
		
		ЭлементыФормы.ПолеВвода1.Доступность = Ложь;
		
	КонецЕсли;	
КонецПроцедуры


Функция ПринадлежитАкции(НоменклатураПроверки, НужнаяАкция) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Акция",НужнаяАкция);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорзиныСоставКорзины.Номенклатура
	|ИЗ
	|	Справочник.Акции.Состав КАК АкцииСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|		ПО АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка
	|ГДЕ
	|	АкцииСостав.Ссылка = &Акция ";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Выборка Цикл
		//Предупреждение("Внутри цикла");
		Если стр.Номенклатура= НоменклатураПроверки ИЛИ НоменклатураПроверки.ПринадлежитЭлементу(стр.Номенклатура) тогда
			
			возврат Истина;
			
		КонецЕсли;	
	КонецЦикла;
	возврат Ложь;
	
КонецФункции	

процедура ПрименитьАкциюИЗСправочника(ЧекККМ, оАкция) Экспорт
	
	мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЧекККМ.Товары);
	
	
	Результат = Ложь;
	
	
	//Очистим все скидки перед началом работы обработки
	СтрокиЧека = Новый ТаблицаЗначений;
	ТаблицаТЧТовары = ЧекККМ.Товары.Выгрузить();	
	СтрокиЧека = ЧекККМ.Товары.Выгрузить();
	ТЧЧек = ЧекККМ.Товары;
	ТЧакции = ЧекККМ.Скидки;

	таблицатоваров = новый ТаблицаЗначений;
	таблицатоваров = ТаблицаТЧТовары.СкопироватьКолонки();
	ТаблицаТоваров = ТаблицаТЧТовары; 
	ТаблицаТоваров.Колонки.Добавить("МинЦена");
	ТаблицаТоваров.Колонки.Добавить("МаксЦена");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МинЦена");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МаксЦена");
	
	// получение списка родителей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеРодители = Запрос.Выполнить().Выгрузить();
	
	магазин = ПараметрыСеанса.ТекущийМагазин;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Магазин.ОсновнойСклад);
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеСклады 		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СоставЗаказа    = УправлениеМаркетинговымиАкциями.ОбновитьДанныеЗаказа(ТаблицаТоваров, ВсеРодители);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВсеРодители", 	ВсеРодители);
	Запрос.УстановитьПараметр("ДатаРекл", 		ТекущаяДата());
	Запрос.УстановитьПараметр("ВсеСклады", 		ВсеСклады);
	Запрос.УстановитьПараметр("СоставЗаказа",	СоставЗаказа);
	Запрос.УстановитьПараметр("ИспользоватьАкцииПоКредиту",	оАкция.АкцияПоКредиту);
	
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	СоставЗаказа.Номенклатура,
	|	СоставЗаказа.МинЦена,
	|	СоставЗаказа.МаксЦена,
	|	СоставЗаказа.НомерСтроки
	|ПОМЕСТИТЬ СоставЗаказа
	|ИЗ
	|	&СоставЗаказа КАК СоставЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Акции.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоступныеАкции
	|ИЗ
	|	Справочник.Акции КАК Акции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Склады.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Склады КАК Склады
	|		ГДЕ
	|			Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
	|		ПО Акции.УчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка
	|ГДЕ
	|	 ВЫБОР
	|			КОГДА &ИспользоватьАкцииПоКредиту
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Акции.АкцияПоКредиту = ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставАкции.Акция,
	|	СоставАкции.Корзина,
	|	СоставАкции.ВидСкидки,
	|	СоставЗаказа.Номенклатура,
	|	СоставЗаказа.МинЦена,
	|	СоставЗаказа.МаксЦена,
	|	СоставЗаказа.НомерСтроки,
	|	СоставАкции.ЗначениеСкидки,
	|	СоставАкции.КорзинаМинЦена,
	|	СоставАкции.КорзинаМаксЦена
	|ПОМЕСТИТЬ ДоступныеКорзины
	|ИЗ
	|	(ВЫБРАТЬ
	|		АкцииСостав.Корзина КАК Корзина,
	|		АкцииСостав.Ссылка КАК Акция,
	|		АкцииСостав.ВидСкидки КАК ВидСкидки,
	|		КорзиныСоставКорзины.Номенклатура КАК Номенклатура,
	|		АкцииСостав.Корзина.МинЦена КАК КорзинаМинЦена,
	|		АкцииСостав.Корзина.МаксЦена КАК КорзинаМаксЦена,
	|		АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидки
	|	ИЗ
	|		ДоступныеАкции КАК ДоступныеАкции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
	|			ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|			ПО (АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка)) КАК СоставАкции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставЗаказа КАК СоставЗаказа
	|		ПО СоставАкции.Номенклатура = СоставЗаказа.Номенклатура
	|			И СоставАкции.КорзинаМинЦена <= СоставЗаказа.МаксЦена
	|			И (СоставАкции.КорзинаМаксЦена >= СоставЗаказа.МинЦена
	|				ИЛИ СоставАкции.КорзинаМаксЦена = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Акции.Ссылка КАК СкидкаНаценка,
	|	КорзиныТаблицы.Корзина КАК Корзина,
	|	КорзиныТаблицы.Номенклатура,
	|	КорзиныТаблицы.ВидСкидки,
	|	КорзиныТаблицы.НомерСтроки КАК НомерСтроки,
	|	КорзиныТаблицы.МинЦена КАК МинЦена,
	|	КорзиныТаблицы.МаксЦена КАК МаксЦена,
	|	Акции.Ссылка.ВыгодаДляКлиента КАК ВыгодаДляКлиента,
	|	КорзиныТаблицы.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
	|	КорзиныТаблицы.КорзинаМинЦена,
	|	КорзиныТаблицы.КорзинаМаксЦена
	|ИЗ
	|	ДоступныеАкции КАК Акции
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			АкцииУчастникиАкции.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Акции.УчастникиАкции КАК АкцииУчастникиАкции
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Склады.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.Склады КАК Склады
	|				ГДЕ
	|					Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
	|				ПО АкцииУчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка) КАК ДоступныеАкции
	|		ПО Акции.Ссылка = ДоступныеАкции.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеКорзины КАК КорзиныТаблицы
	|		ПО Акции.Ссылка = КорзиныТаблицы.Акция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоступныеАкции.Ссылка КАК Ссылка,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АкцииСостав.Корзина) КАК КоличествоКорзин
	|		ИЗ
	|			ДоступныеАкции КАК ДоступныеАкции
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
	|				ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДоступныеАкции.Ссылка) КАК НеобходимыеКорзины
	|		ПО Акции.Ссылка = НеобходимыеКорзины.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДоступныеКорзины.Акция КАК Акция,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКорзины.Корзина) КАК КоличествоКорзин
	|		ИЗ
	|			ДоступныеКорзины КАК ДоступныеКорзины
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДоступныеКорзины.Акция) КАК ВложенныйЗапрос
	|		ПО Акции.Ссылка = ВложенныйЗапрос.Акция
	|ГДЕ
	|	НеобходимыеКорзины.КоличествоКорзин = ВложенныйЗапрос.КоличествоКорзин
	|	И (НЕ Акции.Ссылка ЕСТЬ NULL )
	|ИТОГИ ПО
	|	СкидкаНаценка";
	
	ВыборкаАкций  = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкидкаНаценка");
	
	ВыборкаАкций.Сбросить();
	масНоменклат = Новый ТаблицаЗначений;
	масНоменклат.колонки.Добавить("НомерСтроки");
	масНоменклат.колонки.Добавить("Корзина");
	Пока ВыборкаАкций.НайтиСледующий(Новый Структура("СкидкаНаценка", оАкция)) Цикл
		ВыборкаСтрок = ВыборкаАкций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
		
		Пока ВыборкаСтрок.Следующий() Цикл
			Стр =масНоменклат.Добавить();
			Стр.НомерСтроки = ВыборкаСтрок.НомерСтроки;
			Стр.Корзина = ВыборкаСтрок.Корзина;
		КонецЦикла;	 
	КонецЦикла;	
	//	масНоменклат.Свернуть("НомерСтроки","");
	// Нужен товар только один товар из корзины. Счетчиком проверить сколько раз входит товар в корзину.
	запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АкцииСостав.Корзина,
	|	АкцииСостав.ВидСкидки,
	|	АкцииСостав.ЗначениеСкидки
	|ИЗ
	|	Справочник.Акции.Состав КАК АкцииСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
	|		ПО АкцииСостав.Ссылка = Акции.Ссылка
	|ГДЕ
	|	Акции.Ссылка = &Акция";
	запрос.УстановитьПараметр("Акция", оАкция);
	КорзинаАкций = Запрос.Выполнить().Выгрузить();				   
	//получим строки из документа ЧекККМ 
	//и отсортируем из в соответствии с механизмом акции
	запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Акции.ВыгодаДляКлиента как выгода
	|ИЗ
	|	Справочник.Акции КАК Акции
	|ГДЕ
	|	Акции.Ссылка = &Акция";
	запрос.УстановитьПараметр("Акция", оАкция);
	Выгода = Запрос.Выполнить().Выгрузить();
	
	Если Выгода[0].выгода = "Мин" Тогда 
		Ключ = "Цена УБЫВ";
	ИначеЕсли Выгода[0].выгода = "Макс" Тогда 
		Ключ = "Цена ВОЗР";
	ИначеЕсли Выгода[0].выгода = "ПоПорядку" Тогда
		Ключ = "НомерСтроки ВОЗР";
	Иначе
		Ключ = "НомерСтроки УБЫВ";
	КонецЕсли;
	

	
	СтрокиЧека = Новый ТаблицаЗначений;
	СтрокиЧека.Колонки.Добавить("НомерСтроки");
	СтрокиЧека.Колонки.Добавить("Номенклатура");	
	СтрокиЧека.Колонки.Добавить("Количество");
	СтрокиЧека.Колонки.Добавить("Цена");
	СтрокиЧека.Колонки.Добавить("СуммаСкидки");
	СтрокиЧека.Колонки.Добавить("Сумма");
	СтрокиЧека.Колонки.Добавить("ПроцентСкидкиНаценки");
	СтрокиЧека.Колонки.Добавить("Корзина");
	СтрокиЧека.Колонки.Добавить("ПометкаУдаления");
	СтрокиЧека.ЗаполнитьЗначения(Ложь,"ПометкаУдаления"); 
	Для каждого стр Из масНоменклат Цикл
		строка = СтрокиЧека.Добавить();
		строка.НомерСтроки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").НомерСтроки;
		строка.Номенклатура = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Номенклатура;
		строка.Количество = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Количество;
		строка.Цена = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Цена;
		строка.СуммаСкидки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").СуммаСкидки;
		строка.Сумма = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Сумма;
		строка.ПроцентСкидкиНаценки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").ПроцентСкидкиНаценки;
		строка.корзина = стр.Корзина; 
	КонецЦикла;  
	ТЧЧека = ЧекККМ.Товары;
	
	
	Если Истина Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	АкцииСостав.Корзина,
		|	АкцииСостав.ВидСкидки,
		|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
		|	АкцииСостав.НомерСтроки
		|ИЗ
		|	Справочник.Акции.Состав КАК АкцииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
		|		ПО АкцииСостав.Ссылка = Акции.Ссылка
		|ГДЕ
		|	Акции.Ссылка = &Акция";
		
		запрос.УстановитьПараметр("Акция", оАкция);
		СкидкиАк = Запрос.Выполнить().Выгрузить();          
		
		//сосчитаем не пустые скидки
		
		
		НайденныеСтроки  = новый ТаблицаЗначений; //массив со всеми скидками
		НайденныеСтроки.Колонки.Добавить("НомерСтроки");
		НайденныеСтроки.Колонки.Добавить("Номенклатура");	
		НайденныеСтроки.Колонки.Добавить("Количество");
		НайденныеСтроки.Колонки.Добавить("Цена");
		НайденныеСтроки.Колонки.Добавить("СуммаСкидки");
		НайденныеСтроки.Колонки.Добавить("Сумма");
		НайденныеСтроки.Колонки.Добавить("ЗначениеСкидкиНаценки");
		НайденныеСтроки.Колонки.Добавить("Корзина");
		НайденныеСтроки.Колонки.Добавить("ВидСкидки");
		НайденныеСтроки.Колонки.Добавить("ПометкаУдаления");
		НайденныеСтроки.ЗаполнитьЗначения(Ложь,"ПометкаУдаления");
		//циклом переберем чек и будем смотреть по корзинам вхождения. В соответствии с вхождением начислим скидки.
		СтрокиЧека.Сортировать(Ключ);
		Если Ключ <> "НомерСтроки УБЫВ" тогда
			Для каждого стрКорзиныАкций Из КорзинаАкций Цикл
				СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
				
				Если СтрЧека <> Неопределено  Тогда
					Стр = НайденныеСтроки.Добавить();
					стр.Номенклатура 	     = СтрЧека.Номенклатура;
					стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
					стр.ВидСкидки		     = стрКорзиныАкций.ВидСкидки;
					стр.количество		     = СтрЧека.Количество;
					стр.ЗначениеСкидкиНаценки = стрКорзиныАкций.ЗначениеСкидки;
					стр.Сумма				 = СтрЧека.Сумма;
					Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
					стр.Цена				 = СтрЧека.Цена;
					стр.Корзина				 = СтрЧека.Корзина;
					
					//если есть строка с таким номером то удаляем все строки с этим номером из исходной таблицы чеков.
					Отбор = новый Структура();
					Отбор.Вставить("НомерСтроки", СтрЧека.НомерСтроки);
					Строки = СтрокиЧека.НайтиСтроки(отбор);
					Если  Строки <> неопределено тогда
						Для каждого стрНЧ Из Строки Цикл
							СтрокиЧека.Удалить(стрНЧ);
						КонецЦикла; 
					КонецЕсли
				КонецЕсли
			КонецЦикла; 
		КонецЕсли;
		Если Ключ = "НомерСтроки УБЫВ" тогда
			Для каждого стрЧека Из СтрокиЧека Цикл
				//СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
				
				для каждого алг из оАкция.состав Цикл
					оВидСкидки = алг.ВидСкидки;
					оЗначениеСкидки = алг.ЗначениеСкидки;
				конеццикла;	
				
				Если СтрЧека <> Неопределено  Тогда
					Стр = НайденныеСтроки.Добавить();
					стр.Номенклатура 	     = СтрЧека.Номенклатура;
					стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
					стр.ВидСкидки		     = оВидСкидки;//стрКорзиныАкций.ВидСкидки;
					стр.количество		     = СтрЧека.Количество;
					стр.ЗначениеСкидкиНаценки = оЗначениеСкидки;//стрКорзиныАкций.ЗначениеСкидки;
					стр.Сумма				 = СтрЧека.Сумма;
					Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
					стр.Цена				 = СтрЧека.Цена;
					стр.Корзина				 = СтрЧека.Корзина;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;	
		//составили список строк для скидок назначим скидки.
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции(НайденнаяСтрока, НайденнаяСтрока,  НайденнаяСтрока.Сумма);
			ТЧЧека[НайденнаяСтрока.НомерСтроки-1].Сумма = НайденнаяСтрока.Сумма - скидка;
			ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(НайденнаяСтрока.Сумма,						
		Истина,
		Истина,
		Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

			ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаСкидки = скидка;
			ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
			Если НайденнаяСтрока.ВидСкидки = "Процент" Тогда
				ТЧЧека[НайденнаяСтрока.НомерСтроки-1].ПроцентСкидкиНаценки = НайденнаяСтрока.ЗначениеСкидкиНаценки;
			КонецЕсли;
			//ЧекККМ.Записать();
			
			
			Если Скидка>0 тогда	
				// SMV08.12.2011 Просто убрали лишние условия, в любом случае акционный товар будет заноситься в ТЧСкидки
				Стр = ТЧакции.добавить();
				Стр.Сумма = Скидка;
				Стр.СкидкаНаценка = оАкция;
				Стр.КлючСтроки = НайденнаяСтрока.НомерСтроки;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		//Второй вариант по порядку
		Запрос.Текст = "ВЫБРАТЬ
		|	АкцииСостав.Корзина,
		|	АкцииСостав.ВидСкидки,
		|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
		|	АкцииСостав.НомерСтроки
		|ИЗ
		|	Справочник.Акции.Состав КАК АкцииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
		|		ПО АкцииСостав.Ссылка = Акции.Ссылка
		|ГДЕ
		|	Акции.Ссылка = &Акция
		|	И АкцииСостав.ЗначениеСкидки > 0";
		запрос.УстановитьПараметр("Акция", оАкция);
		СкидкиАк = Запрос.Выполнить().Выгрузить();
		
		Для ит = 0 По СкидкиАК.Количество()-1 Цикл
			
			Для Ж = 1 По СтрокиЧека.Количество() Цикл
				
				Если СкидкиАк[ит].НомерСтроки = ж Тогда
					скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции(СкидкиАк[ит], СтрокиЧека[ж-1],  СтрокиЧека[ж-1].Сумма);
					ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].Сумма = СтрокиЧека[ж-1].Сумма - скидка;
					ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(СтрокиЧека[ж-1].Сумма,						
		Истина,
		Истина,
		Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

					ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаСкидки = скидка;
					ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
					Если СкидкиАк[ит].ВидСкидки = "Процент" Тогда
						ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].ПроцентСкидкиНаценки = СкидкиАк[ит].ЗначениеСкидкиНаценки;
					КонецЕсли;	
					
				КонецЕсли;
				
				Если истина тогда		
					ТЧакции[НайденнаяСтрока.НомерСтроки-1].Сумма = скидка;
					ТЧакции[НайденнаяСтрока.НомерСтроки-1].СкидкаНаценка = оАкция;
					ТЧакции[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	//Попытка
	//	ЧекККМ.Записать()
	//Исключение
	//КонецПопытки;   
	//		   ЧекККМ.Разблокировать();
	
	
				КонецПроцедуры
				
				
Функция РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции(СтрокаСкидки, СтрокаТоваров, СуммаБезСкидки)  Экспорт
	
	Скидка = 0;
	
	Если СтрокаСкидки.ВидСкидки = "Процент" Тогда
		Скидка = СуммаБезСкидки * СтрокаСкидки.ЗначениеСкидкиНаценки/100;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "ИтоговаяСкидка" Тогда
		Скидка = СтрокаСкидки.ЗначениеСкидкиНаценки;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "Нет" Тогда
		Скидка = 0;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "СуммаСкидки" Тогда
		Скидка = Мин(СуммаБезСкидки,СтрокаСкидки.ЗначениеСкидкиНаценки);
	ИначеЕсли СтрокаСкидки.ВидСкидки = "ФиксЦена" Тогда
		// SMV09.12.2011 Вернули назад, не правильно расчитывается скидка
		Скидка = Макс(0, СуммаБезСкидки - СтрокаСкидки.ЗначениеСкидкиНаценки*СтрокаТоваров.Количество);
		// SMV05.12.2011 СуммаБезСкидки -  Не правильно расчитывается вид скидки Фиксированная цена, скидка получатется как Сумма-Скидка
		//Необходимо разобраться как работают другие виды скидок
	КонецЕсли;
	
	Возврат Скидка;
	
КонецФункции // РассчитатьЗначениеСки


Функция ПолучитьНоменклатуру(ШтрихКод) Экспорт

	ПолученнаяНоменклатура = Неопределено;
	Запрос = Новый Запрос;
	
	//Если ТипЗнч(ЕдиницаИзмерения) = Тип ("Неопределено") Тогда
	//	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегШтрихкоды.Владелец,
	|	РегШтрихкоды.ЕдиницаИзмерения
	|	ИЗ РегистрСведений.Штрихкоды КАК РегШтрихкоды
	|
	|ГДЕ
	|	НЕ РегШтрихкоды.Штрихкод Есть NULL И
	|	РегШтрихкоды.Штрихкод = &ШтрихКод";

	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда
		ПолученнаяНоменклатура = Выборка[0].Владелец;
	КонецЕсли;

	Возврат ПолученнаяНоменклатура;

КонецФункции // ПолучитьШтрих



// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт
	
	Результат = Ложь;
	
	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
		Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
		Или Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя
		Или Вид = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы
		Или Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
		Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
		Или Вид = Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБРАБОТЧИКИ СОБЫТЙ)

// Процедура осуществляет обработку полученного штрихкода
// от сканера штрихкода
//
// Параметры:
//  Штрихкод   - <Строка>
//             - Текстовое представление штрихкода.
//
Процедура СШКОбработатьШтрихкод(Штрихкод) Экспорт
	
	РаботаСТорговымОборудованием.ОбработатьВведенныйШтрихкод(Штрихкод, ЭтаФорма, Истина);
	
КонецПроцедуры


Функция оСШКНоменклатура(Номенклатура) Экспорт
	
		
	
		
		// Boke 11.01.2011 + {
		//Для номенклатуры скидки по купонам при подборе не увеличиваем количество, а добавляем новую строку
		
		НоваяСтрока = Чек.Товары.Добавить();
		НоваяСтрока.Номенклатура 				= Номенклатура;
		НоваяСтрока.Количество 		 = 1;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков; // Boke 24.08.2011 при добавлении по контрактам ИМ надо проставить явно
		НоваяСтрока.Коэффициент		 = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент; // Boke 24.08.2011 
		НоваяСтрока.Склад = ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад;
		НоваяСтрока.Цена             = Ценообразование.ПолучитьЦенуНоменклатурыВРознице(ТекущаяДата(), ПараметрыСеанса.ТекущийМагазин, Номенклатура);
		НоваяСтрока.Сумма            = НоваяСтрока.Цена*НоваяСтрока.Количество;
		НоваяСтрока.СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма,						
		Истина,
		Истина,
		Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));

		    			
				
				// Boke 11.01.2011 + }
		 
		
				
					
		Возврат Истина;
		
		
	КонецФункции // СШКНоменклатура()
	
Функция СШКНоменклатура(Номенклатура, ХарактеристикаНоменклатуры, Единица, Количество,РеквизитыПлатежа=0
	                    // {РТК_8211_30.03.2012 14:46:54_Седых_
						//если эта функция вызвана нажатием кнопки "Артикул", то ВводПоАртикулу = Истина
						,ВводПоАртикулу = Ложь
						// РТК_8211_30.03.2012 14:46:54_Седых_} 
						,ИД="" ,ЕстьПрерывание=ложь// РТК_1467_21.06.2012 16:58:03_Гордиенко_}
						) Экспорт
						
возврат Истина;						
						
КонецФункции	

Функция СШКНеизвестныйКод(Штрихкод, ТипКода) Экспорт
	
	//Возврат Ложь;
	
КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК) Экспорт

	//Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	//Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()




Процедура ПриЗакрытии()
	
	
	
	
	
КонецПроцедуры

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	ПереключательОпций1 = 0;
	//// {Рарус_7939_29.03.2012 13:08:16_Сухоруков_ 
	//РТК_ДобавленныеПроцедуры.ЗавершитьЗамерПроизводительности(,"Z01030000", Ложь, "Процедура прервана");
	//РТК_ДобавленныеПроцедуры.ЗавершитьЗамерПроизводительности( , "C11000000", Истина, "Открыта обработка ""Дегустация опций""");
	//// Рарус_7939_29.03.2012 13:08:18_Сухоруков} 
	//Если Чек <> Неопределено  Тогда
	//	Попытка
	//		Если ЗначениеЗаполнено(Чек.мНомерТелефонаДополнительный) тогда
	//			
	//			НомерТелефона = НомерТелефонаЦифрами(Чек.мНомерТелефонаДополнительный);
	//			ЭлементыФормы.ПолеВвода1.Доступность = Ложь;
	//			
	//		КонецЕсли;	
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	Попытка	
		ЭлементыФормы.Надпись2.Заголовок = Акция.Атрибуты.Найти("ЗаголовокФормы").ЗначениеАтрибута;
	Исключение
	КонецПопытки;	
	ЭлементыФормы.ПолеВвода1.Доступность = Истина;
	
	СтрокаАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
	Если СтрокаАтрибута <> неопределено тогда
		ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
		
		Если вРег(ЗначениеАтрибута_) = вРег("2") тогда
			
			
			Запрос = новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорзиныСоставКорзины.Номенклатура КАК Номенклатура,
			|	КорзиныСоставКорзины.МинЦена
			|ИЗ
			|	Справочник.Акции.Состав КАК АкцииСостав
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
			|		ПО АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка
			|ГДЕ
			|	АкцииСостав.Ссылка = &Ссылка
			|	И КорзиныСоставКорзины.МинЦена > 0" ;
			Запрос.УстановитьПараметр("Ссылка", Акция);
			
			ВыгрузкаТаблица = Запрос.Выполнить().Выгрузить();
			Если ВыгрузкаТаблица.Количество() > 0 тогда
				
				МассивИзВыгрузки = ВыгрузкаТаблица.ВыгрузитьКолонку("Номенклатура");
				
				Запрос = новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВТТовары.Номенклатура,
				|	ВТТовары.НомерТелефона
				|ПОМЕСТИТЬ ВТТовар
				|ИЗ
				|	&ВТТовары КАК ВТТовары
				|ГДЕ
				|	ВТТовары.Номенклатура В ИЕРАРХИИ(&НоменклатураСписок)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТТовар.Номенклатура,
				|	ВТТовар.НомерТелефона
				|ИЗ
				|	ВТТовар КАК ВТТовар";		 
				
				Запрос.УстановитьПараметр("НоменклатураСписок", МассивИзВыгрузки);	 
				Запрос.УстановитьПараметр("ВТТовары", Чек.Товары);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ПлатежНаНомерСИМ = Истина;
					НомерТелефона    = НомерТелефонаЦифрами_Модуль(Выборка.НомерТелефона);
					ЭлементыФормы.ПолеВвода1.Доступность = Ложь;
					ПоисквВыборке = ВыгрузкаТаблица.Найти(Выборка.Номенклатура, "Номенклатура");
					Если ПоисквВыборке <> Неопределено Тогда
						
						ПлатежРегион = ПоисквВыборке.МинЦена;
						
					КонецЕсли;	
					
					
					Прервать;
					
				КонецЦикла;	
				
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЭлементыФормы.Переключатель11.Заголовок = Акция.Атрибуты.Найти("Опция2").ЗначениеАтрибута;
		ЭлементыФормы.Переключатель4.Заголовок  = Акция.Атрибуты.Найти("Опция1").ЗначениеАтрибута;
		ЭлементыФормы.Переключатель3.Заголовок  = Акция.Атрибуты.Найти("Отказ").ЗначениеАтрибута;	
		ЭлементыФормы.Надпись1.Заголовок = "ВНИМАНИЕ! " + Акция.Атрибуты.Найти("Номер ИП").ЗначениеАтрибута;
	Исключение
	КонецПопытки;	

	
КонецПроцедуры
Функция НомерТелефонаЦифрами(НомерТелефона)
	Возврат Сред(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(НомерТелефона), " ", ""), "-", ""), "(", ""), "+", ""), ")", ""), 2);
КонецФункции

Функция НомерТелефонаЦифрами1(НомерТелефона)
	Возврат Сред(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(НомерТелефона), " ", ""), "-", ""), "(", ""), "+", ""), ")", ""), 1);
КонецФункции

Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока 1 = 1 Цикл
	
		ПозицияПоследнейТочки = Найти(РасширениеФайла, ".");

		Если ПозицияПоследнейТочки = 0 Тогда

			Прервать;

		Иначе

			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)

		КонецЕсли;

	КонецЦикла;

	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции 


Функция СохранитьФайлНаДиск(Элемент)
	УникальныйИД = Новый УникальныйИдентификатор;
	
	ДвоичныеДанные = Элемент.Хранилище.Получить();
	
	Если ДвоичныеДанные = Неопределено Тогда
		ОбщегоНазначения.ПредупреждениеПользователю("Внешний файл отсутствует в хранилище"); 
		Возврат "";
	КонецЕсли; 
	
	ИмяФайла = КаталогВременныхФайлов()+УникальныйИД+"."+ПРАВ(Элемент.Ссылка.ИмяФайла,3);
	
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
	Исключение
		ОбщегоНазначения.ПредупреждениеПользователю("Внешний файл не сохранен
		|"+ОписаниеОшибки()); 
	КонецПопытки;
	
	Возврат ИмяФайла;
	
КонецФункции


Функция НомерТелефонаУжеУчаствуетВАкции(НомерТелефона)

	Возврат пПроверитьЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, "check_action");
	
КонецФункции
Функция пПроверитьЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, ВидОперации)
CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		Возврат Истина;
	КонецЕсли;
	
	// Каталог для сохранения запроса
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	СоздатьКаталог(ИмяКаталога);
	
	// Файл для сохранения запроса
	КодТочки = ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла = КодТочки + "ACTION_MEMBERSHIP.xml";
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла;
	Попытка	
		Для каждого стр из ДокументОбъектОбщий.Товары Цикл
			Если стр.Номенклатура.Артикул = ЭтотОбъект.НоменклатураАрт Тогда
				Серия = СокрЛП(стр.ХарактеристикаНоменклатуры.Наименование);                                                                                                                   
				//Сообщить("dolche&gabanna" + НоменклатураАрт);
				прервать;
			КонецЕсли;
			//КонецЕсли;
		КонецЦикла;	
	Исключение	
	КонецПопытки;	
	// Создание XML-запроса
	ЗаписьXML = Новый ЗаписьXML;    
	ЗаписьXml.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("MARKETING.ACTION_MEMBERSHIP");  
	
	ЗначениеUrl = "";
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("#5090", ЗначениеUrl) Тогда
		Если ЗначениеUrl <> "" Тогда
			url = ЗначениеUrl;	
		Иначе	
			url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";	
		КонецЕсли;
	Иначе	
		url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";
	КонецЕсли;

	
	// ЗаписьXML.ЗаписатьАтрибут("xmlns", url);
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("request");
	
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name",	"DISCOUNT");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function",	"ACTION_CHECK");
	ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
	//CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "SaleDate",	ТекущаяДата());
	 CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	ПараметрыСеанса.КодТочки);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "actioncode", СокрЛП(Акция.Код));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "phonenumber",	НомерТелефона);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "operator_code", СокрЛП(Чек.Продавец.ТабельныйНомер));
	//CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "Article", НоменклатураАрт);
	
	//CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "Description",	"проверка");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	
	//ЗаписьXML.ЗаписатьКонецЭлемента(); // Request
	ЗаписьXML.ЗаписатьКонецЭлемента(); // CheckForAction
	ЗаписьXML.Закрыть();

	// Подготовка строки ответа
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	// Отправка запроса
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога + "\" + ИмяФайла);
	
	Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);
	
	
	
	
	
	// Подготовка дерева ответа
	ДеревоXML = "";
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(AnswerXML);
	
	// Построение дерева из ответа
	Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
		ТекстВопроса = "Из-за технических проблем невозможно зарегистрировать клиента в данной акции.
		|Желаете продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Отказать = Истина;
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	//Сообщить(НоменклатураАрт);
	// Разбор ответа
	ЕстьТакойНомер = Ложь;
	Попытка
		Если	(ДеревоXML.response.is_error = "1")  тогда
			
			ЕстьТакойНомер = Истина;
		ИначеЕсли ДеревоXML.response.is_error = "0"  И ДеревоXML.response.message.count = "0" тогда
			ЕстьТакойНомер = Ложь;
		ИначеЕсли ДеревоXML.response.is_error = "0"  И ДеревоXML.response.message.count = "1" тогда	
			ЕстьТакойНомер = Истина;
			
			
		КонецЕсли;	
		
		Возврат ЕстьТакойНомер;
	Исключение
		Возврат Истина;
	КонецПопытки;



КонецФункции

Функция ПроверитьЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, ВидОперации, Артикул, Серия)
 Примечание = "";	
	Если Чек.ДополнительныеСвойства.свойство("Примечание") тогда
		
		Примечание = Чек.ДополнительныеСвойства.Примечание;
		//Сообщить("Примечание " + Примечание);
	КонецЕсли;	
	
	// Получение обработки отправки запросов по почте
	CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
//	Сообщить("Got fuck" + сокрлп(cyberplat)) ;
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		Возврат Истина;
	КонецЕсли;
	
	// Каталог для сохранения запроса
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	СоздатьКаталог(ИмяКаталога);
	
	// Файл для сохранения запроса
	КодТочки = ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла = КодТочки + "_SmartPhone_Number.xml";
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла;
	
	// Создание XML-запроса
	ЗаписьXML = Новый ЗаписьXML;
	сообщить("The compound is....");
	ЗаписьXml.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("MARKETING.ACTION_MEMBERSHIP");  
	
	ЗначениеUrl = "";
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("#5090", ЗначениеUrl) Тогда
		Если ЗначениеUrl <> "" Тогда
			url = ЗначениеUrl;	
		Иначе	
			url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";	
		КонецЕсли;
	Иначе	
		url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";
	КонецЕсли;

	
	    // ЗаписьXML.ЗаписатьАтрибут("xmlns", url);


	
	ЗаписьXML.ЗаписатьНачалоЭлемента("request");
	
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name",	"ACTION_MEMBERSHIP");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function",	"action_insert");
	ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "saledate",	стрЗаменить(Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"),"-",""));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	ПараметрыСеанса.КодТочки);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "actioncode",	СокрЛП(Акция.Код)); 
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "phonenumber",	НомерТелефона); 
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "article", СокрЛП(Артикул)); Сообщить(Артикул);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "imei", СокрЛП(Серия)); Сообщить(Серия);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "description",	СокрЛП(Примечание));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "rcpt_num",	СокрЛП(ЭтотОбъект.Чек.Номер));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "position",	ПозицияВЧеке);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "sum_sale",	СуммаПродажи);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
//	ЗаписьXML.ЗаписатьКонецЭлемента(); // Request
	ЗаписьXML.ЗаписатьКонецЭлемента(); // CheckForAction
	ЗаписьXML.Закрыть();
	

	
	// Подготовка строки ответа
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	// Отправка запроса
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога + "\" + ИмяФайла);
	
	 ТекстXML = "";
	 
	 ТекстXML = XML.ПолучитьТекст();
Попытка	
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("ГаситьПослеПробития") тогда
		
		
		Чек.ДополнительныеСвойства.Вставить("ТекстXML", ТекстXML); 
		//попытка
		//ЧекККМ.Записать();
		//Исключение
		//КонецПопытки;
		//сообщить("текстXML");
	Иначе
		
		
	Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);

	
	// Подготовка дерева ответа
	ДеревоXML = "";
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(AnswerXML);
	
	// Построение дерева из ответа
	Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
		ТекстВопроса = "Из-за технических проблем невозможно зарегистрировать клиента в данной акции.
						|Желаете продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Отказать = Истина;
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
		
    КонецЕсли;	
	
			
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;


	
КонецФункции	

Функция ЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, ВидОперации, Артикул, Серия) Экспорт
	
	// Получение обработки отправки запросов по почте
	CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
	Сообщить("Получили" + сокрлп(cyberplat)) ;
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		Возврат Истина;
	КонецЕсли;
	
	// Каталог для сохранения запроса
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	СоздатьКаталог(ИмяКаталога);
	
	// Файл для сохранения запроса
	КодТочки = ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла = КодТочки + "_SmartPhone_Number.xml";
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла;
	
	// Создание XML-запроса
	ЗаписьXML = Новый ЗаписьXML;
	сообщить("врде живо пока");
	ЗаписьXml.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckForAction");                  
		ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://tempuri.org/rtk/CheckForAction");
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("Request");
			
			CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "RequestType",	ВидОперации);
			CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "PhoneNumber",	НомерТелефона);
			CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "TTCode",		КодТочки);
			CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "Article",		Артикул);
			CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "Imei", СокрЛП(Серия));
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Request
	ЗаписьXML.ЗаписатьКонецЭлемента(); // CheckForAction
	ЗаписьXML.Закрыть();
	
	// Подготовка строки ответа
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	// Отправка запроса
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога + "\" + ИмяФайла);
	
	//Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , "http://jeeves-test:778/FrontForChecks.asmx/ProcessXML", , 1, , , Истина);
	Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки);	
	
	// Подготовка дерева ответа
	ДеревоXML = "";
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(AnswerXML);
	
	// Построение дерева из ответа
	Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
		ТекстВопроса = "Из-за технических проблем невозможно зарегистрировать клиента в данной акции.
						|Желаете продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Отказать = Истина;
		Попытка
			для каждого стр из Чек.Товары цикл						 						 
				стр.СуммаСкидки = 0;
				стр.Сумма       = стр.Цена-стр.СуммаСкидки;
				стр.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(стр.Сумма,						
				Истина,
				Истина,
				Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
			КонецЦикла;
			Отказ = Истина;
			
			Отказать = Истина;
			Чек.Скидки.Очистить();
			
			Чек.Купоны.Очистить();
		Исключение
		КонецПопытки;
		Закрыть(Ложь);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Возврат Истина;
		КонецЕсли;	

	КонецЕсли;
	
	// Разбор ответа
	Попытка
		УспешноЗарегистрирован = (ДеревоXML.CheckForAction.Response.Success = "1") ;
		Возврат УспешноЗарегистрирован;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура Надпись4Нажатие(Элемент)
	//strnav = "http://retail.mtsretail.ru/expert_documents/DocLib1/%D0%91%D1%80%D0%B8%D1%84%D1%8B%20%D0%BA%20%D1%82%D0%B5%D0%BA%D1%83%D1%89%D0%B8%D0%BC%20%D0%B0%D0%BA%D1%86%D0%B8%D1%8F%D0%BC.aspx";
	strnav = "http://retail.mtsretail.ru/expert_documents/ADO/DocLib/Домашняя.aspx";
	попытка
		objShell = Новый COMОбъект("Wscript.Shell"); 
		objShell.Run("iexplore "+strnav,1,0);
	исключение
	КонецПопытки;

КонецПроцедуры


  
ПлатежНаНомерСИМ = Ложь;
ЮрИсключение = Ложь;
