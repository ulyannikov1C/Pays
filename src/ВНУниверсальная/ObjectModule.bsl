Перем ДокументОбъектОбщий Экспорт;
Перем СтруктураАтрибутов Экспорт;

Функция ДополнитьТаблицуТоваров(СтрокиЧека, ВсеРодители)
	
	//СтрокиЧека = новый ТаблицаЗначений;   // удалить
	ТаблицаЧека = СтрокиЧека.Скопировать();
	ТаблицаЧека.Колонки.Добавить("ДляКорзин", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЧека.Очистить();
	Для Каждого СтрокаЧека Из СтрокиЧека Цикл
		
		Для Каждого СтрокаРодителей Из ВсеРодители Цикл
			Если СтрокаЧека.Номенклатура = СтрокаРодителей.Ссылка 
				ИЛИ СтрокаЧека.Номенклатура.ПринадлежитЭлементу(СтрокаРодителей.Ссылка) Тогда
				
				НоваяСтрока 				= ТаблицаЧека.Добавить();
				НоваяСтрока.Номенклатура 	= СтрокаЧека.Номенклатура;
				НоваяСтрока.ДляКорзин 		= СтрокаРодителей.Ссылка;
				НоваяСтрока.НомерСтроки 	= СтрокаЧека.НомерСтроки;
				НоваяСтрока.Цена 			= СтрокаЧека.Цена;
				НоваяСтрока.Количество 		= СтрокаЧека.Количество;
				НоваяСтрока.Сумма 			= СтрокаЧека.Сумма;
				НоваяСтрока.НомерТелефона   = СтрокаЧека.НомерТелефона;
				
				Если СтрокаЧека.Номенклатура = СтрокаРодителей.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТаблицаЧека;
	
КонецФункции 
	
Функция ВыбратьВариантАкции() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Чек.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеРодители = Запрос.Выполнить().Выгрузить();	
    МасРодителей =  ВсеРодители.ВыгрузитьКолонку("Ссылка");
	
	СписокКорзин = Новый СписокЗначений;
	СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду("000001802"));
	СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду("000001803"));
    СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду("000001804"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорзиныСоставКорзины.Ссылка
	|ПОМЕСТИТЬ ВТКорзины
	|ИЗ
	|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|ГДЕ
	|	КорзиныСоставКорзины.Номенклатура В(&НоменклатураСп)
	|	И КорзиныСоставКорзины.Ссылка В(&СписокКорзина)
	|		;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Акции.Ссылка
	|ИЗ
	|	Справочник.Акции КАК Акции
	|ГДЕ
	|	Акции.Состав.Корзина.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТКорзины.Ссылка
	|			ИЗ
	|				ВТКорзины КАК ВТКорзины)";
	
	Запрос.УстановитьПараметр("НоменклатураСп",МасРодителей);
	Запрос.УстановитьПараметр("СписокКорзина",СписокКорзин);

	Результат = Запрос.Выполнить().Выгрузить();
    ВыборАкц = Новый СписокЗначений;
	Если Результат.Количество() > 0 тогда					
		Для каждого стр из Результат Цикл
			Если стр.Ссылка <> Акция тогда
			ВыборАкц.Добавить(стр.Ссылка);
			КонецЕсли;
		КонецЦикла;	
		Если  ВыборАкц.Количество()>0  Тогда
			
			
			ВыбЭлемент = ВыборАкц.Получить(0).Значение;
			
			#Если Клиент Тогда
				
				ФормаАкции = Чек.ПолучитьФорму("ФормаВыбораАкции");
				ФормаАкции.СписокВыбора = ВыборАкц;
				ФормаАкции.ЭлементыФормы.ИнфНадпись.Значение =  "Выберите нужную акцию";
				ФормаАкции.ЭлементыФормы.ИнфНадпись.Заголовок = "Выберите нужную акцию";
				ФормаАкции.Заголовок = "АКЦИИ ""ВТОРАЯ ПОКУПКА""";
				ФормаАкции.ЭлементыФормы.СправочникСписок.Колонки.Ссылка.ТекстШапки = "";
				//ФормаАкции.ЭлементыФормы.СправочникСписок.Колонки.Ссылка.Гиперссылка = Истина;
				ФормаАкции.ЭлементыФормы.СправочникСписок.Колонки.Ссылка.Ширина = 800;
				ФормаАкции.ЭлементыФормы.КнопкаВверх.Видимость = Ложь;
				ФормаАкции.ЭлементыФормы.КнопкаВниз.Видимость = Ложь;
				ФормаАкции.ЭлементыФормы.СправочникСписок.Колонки.ДопСведения.ТекстШапки = "";
				ФормаАкции.ОткрытьМодально();
				ВыбЭлемент = ФормаАкции.ВыбранноеЗначение;
				вАкция = ВыбЭлемент;
			#КонецЕсли
			
		КонецЕсли;
		Если вАкция <> Неопределено тогда
			Возврат вАкция;	
		КонецЕсли;	
			
	КонецЕсли;
	
	
КонецФункции	

Функция СуммаКорзинПодходит(Чек, Акция) Экспорт
	
	
	СписокКорзин = Новый СписокЗначений;
	Если СтруктураАтрибутов.Свойство("Корзина1") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина1));
	КонецЕсли;			
	Если СтруктураАтрибутов.Свойство("Корзина2") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина2));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина3") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина3));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина4") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина4));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина5") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина5));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина6") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина6));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина7") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина7));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина8") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина8));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина9") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина9));
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина10") Тогда
		СписокКорзин.Добавить(Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина10));
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Чек.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеРодители = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров = ДополнитьТаблицуТоваров(Чек.Товары.Выгрузить(), ВсеРодители);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыЧека.Номенклатура,
	|	ТоварыЧека.ДляКорзин,
	|	ТоварыЧека.Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТоварыЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзиныСоставКорзины.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатураКорзин
	|ИЗ
	|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|ГДЕ
	|	КорзиныСоставКорзины.Ссылка В(&СписокКорзин)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Сумма КАК Сумма,
	|	ВТТовары.Номенклатура
	|ПОМЕСТИТЬ ВТСрез
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатураКорзин КАК ВТНоменклатураКорзин
	|		ПО ВТТовары.ДляКорзин = ВТНоменклатураКорзин.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТСрез.Сумма), 0) КАК Сумма
	|ИЗ
	|	ВТСрез КАК ВТСрез";
	
	Запрос.УстановитьПараметр("СписокКорзин", СписокКорзин);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма < ОбщегоНазначения.ПривестиСтрокуКЧислу(СтруктураАтрибутов.МинСуммаКорзин) тогда			
			возврат Ложь;			
		Иначе	
			Возврат Истина;
		КонецЕсли;	
		
		
	КонецЦикла;
	
	
	
	Возврат Ложь;

	
	
	
	
КонецФункции

Функция СуммаКаждойКорзиныПодходит(Чек, Акция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Чек.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеРодители = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров = ДополнитьТаблицуТоваров(Чек.Товары.Выгрузить(), ВсеРодители);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыЧека.Номенклатура,
	|	ТоварыЧека.ДляКорзин,
	|	ТоварыЧека.Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТоварыЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзиныСоставКорзины.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатураКорзин
	|ИЗ
	|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|ГДЕ
	|	КорзиныСоставКорзины.Ссылка = (&КорзинаОдна)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Сумма КАК Сумма,
	|	ВТТовары.Номенклатура
	|ПОМЕСТИТЬ ВТСрез
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатураКорзин КАК ВТНоменклатураКорзин
	|		ПО ВТТовары.ДляКорзин = ВТНоменклатураКорзин.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТСрез.Сумма), 0) КАК Сумма
	|ИЗ
	|	ВТСрез КАК ВТСрез";

	
	
	
	
	
	Если СтруктураАтрибутов.Свойство("Корзина1") Тогда
		СуммаКорзины1  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина1));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина1));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины1 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;			
	Если СтруктураАтрибутов.Свойство("Корзина2") Тогда
		СуммаКорзины2  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина2));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина2));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины2 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина3") Тогда
		СуммаКорзины3  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина3));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина3));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины3 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина4") Тогда
		СуммаКорзины4  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина4));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина4));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины4 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина5") Тогда
		СуммаКорзины5  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина5));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина5));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины5 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина6") Тогда
		СуммаКорзины6  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина6));	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина6));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины6 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина7") Тогда
		СуммаКорзины7  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина7));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина7));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины7 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураАтрибутов.Свойство("Корзина8") Тогда
		СуммаКорзины8  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина8));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина8));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины8 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина9") Тогда
		СуммаКорзины9  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина9));	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина9));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины9 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина10") Тогда
		СуммаКорзины10  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинСуммаКорзина10));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина10));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Сумма < СуммаКорзины10 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
		
	
	Возврат Истина;	
	
	
	
	
	
КонецФункции

Функция КоличествоТоваровКорзинПодходит(Чек, Акция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Чек.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ВсеРодители = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров = ДополнитьТаблицуТоваров(Чек.Товары.Выгрузить(), ВсеРодители);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыЧека.Номенклатура,
	|	ТоварыЧека.ДляКорзин,
	|	ТоварыЧека.Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТоварыЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзиныСоставКорзины.Номенклатура
	|ПОМЕСТИТЬ ВТНоменклатураКорзин
	|ИЗ
	|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
	|ГДЕ
	|	КорзиныСоставКорзины.Ссылка = (&КорзинаОдна)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Сумма КАК Сумма,
	|	ВТТовары.Номенклатура
	|ПОМЕСТИТЬ ВТСрез
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатураКорзин КАК ВТНоменклатураКорзин
	|		ПО ВТТовары.ДляКорзин = ВТНоменклатураКорзин.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Количество(ВТСрез.Номенклатура), 0) КАК Количество
	|ИЗ
	|	ВТСрез КАК ВТСрез";

	
	
	
	
	
	Если СтруктураАтрибутов.Свойство("Корзина1") Тогда
		КолКорзины1  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров1));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина1));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины1 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;			
	Если СтруктураАтрибутов.Свойство("Корзина2") Тогда
		КолКорзины2  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров2));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина2));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины2 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина3") Тогда
		КолКорзины3  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров3));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина3));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины3 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина4") Тогда
		КолКорзины4  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров4));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина4));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины4 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина5") Тогда
		КолКорзины5  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров5));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина5));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины5 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина6") Тогда
		КолКорзины6  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров6));	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина6));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины6 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина7") Тогда
		КолКорзины7  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров7));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина7));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины7 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураАтрибутов.Свойство("Корзина8") Тогда
		КолКорзины8  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров8));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина8));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины8 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина9") Тогда
		КолКорзины9  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров9));	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина9));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины9 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
	Если СтруктураАтрибутов.Свойство("Корзина10") Тогда
		КолКорзины10  =  ОбщегоНазначения.ПривестиСтрокуКЧислу(СокрЛП(СтруктураАтрибутов.МинКоличествоТоваров10));
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КорзинаОдна", Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.Корзина10));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество < КолКорзины10 тогда			
				возврат Ложь;			
			КонецЕсли;					
		КонецЦикла;
		
	КонецЕсли;
		
	
	Возврат Истина;	

	
	
	
КонецФункции

Процедура  ПроверитьИДобавитьСопутствующийТовар(Чек, Акция) Экспорт
	
	Добавлен = Ложь;
	
	Если СтруктураАтрибутов.Свойство("КупонКорзина") Тогда
		
		КорзинаКупона = Справочники.Корзины.НайтиПоКоду(СтруктураАтрибутов.КупонКорзина);
		
		ТоварыЧека = Чек.Товары.Выгрузить();
		СоставАкции = Акция.Состав;
		//
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорзиныСоставКорзины.Номенклатура
		|ИЗ
		|	Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|		ПО КорзиныСоставКорзины.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	КорзиныСоставКорзины.Ссылка = &Ссылка
		|	И КорзиныСоставКорзины.Номенклатура.НеДляПродажи = ЛОЖЬ
		|	И ТоварыНаСкладахОстатки.КоличествоОстаток > 0" ;
		Запрос.УстановитьПараметр("Ссылка", КорзинаКупона);
		Запрос.УстановитьПараметр("Склад", ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад);
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		ВыгрузкаТаблица = Запрос.Выполнить().Выгрузить();
		Если ВыгрузкаТаблица.Количество() > 0 тогда
			
			МассивИзВыгрузки = ВыгрузкаТаблица.ВыгрузитьКолонку("Номенклатура");
			
			Запрос = новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВТТовары.Номенклатура
			|ПОМЕСТИТЬ ВТТовар
			|ИЗ
			|	&ВТТовары КАК ВТТовары
			|ГДЕ
			|	ВТТовары.Номенклатура В ИЕРАРХИИ(&НоменклатураСписок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТТовар.Номенклатура
			|ИЗ
			|	ВТТовар КАК ВТТовар";		 
			
			Запрос.УстановитьПараметр("НоменклатураСписок", МассивИзВыгрузки);	 
			Запрос.УстановитьПараметр("ВТТовары", ТоварыЧека);	
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				пПрименитьАкциюИЗСправочника_(Чек, Акция);
				Возврат;
				
			КонецЦикла;
			
			
			Для каждого Выборка_ из ВыгрузкаТаблица Цикл
				Добавлен = Истина;
				СтрокаЧека = Чек.Товары.Добавить();		 
				СтрокаЧека.Номенклатура 				= Выборка_.Номенклатура;
				
				
				Если Выборка_.Номенклатура.Видноменклатуры = Справочники.ВидыНоменклатуры.СерийныйТовар Тогда
					
					ФормаВыбораХарактеристики = Чек.ПолучитьФорму("ФормаВыбораХарактеристикНоменклатуры", Чек.ПолучитьФорму("ФормаРегистрацииПродаж"),Чек.ПолучитьФорму("ФормаРегистрацииПродаж"));
					ФормаВыбораХарактеристики.Номенклатура = Выборка_.Номенклатура;
					ФормаВыбораХарактеристики.Магазин      = ПараметрыСеанса.ТекущийМагазин;
					ФормаВыбораХарактеристики.ЧекККМ       = Чек;
					ФормаВыбораХарактеристики.ОткрытьМодально();
					Если Не ФормаВыбораХарактеристики.мЗначениеВыбрано Тогда
						
						Отказать = Истина;
						Возврат;
						
					КонецЕсли;	 
					ХарактеристикаНоменклатуры = ФормаВыбораХарактеристики.ВыбранноеЗначение;
					
					СтрокаЧека.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
					
				КонецЕсли;
				
				СтрокаЧека.Количество					= 1;
				СтрокаЧека.КлючСвязки					= 1;  //Ульянников_8075_ВАЖНЫЕ ИЗМЕНЕНИЯ
				СтрокаЧека.ЕдиницаИзмерения			= СтрокаЧека.Номенклатура.ЕдиницаХраненияОстатков; // Boke 24.08.2011 при добавлении по контрактам ИМ надо проставить явно
				СтрокаЧека.Коэффициент				= СтрокаЧека.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент; // Boke 24.08.2011 
				СтрокаЧека.Склад                     = ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад;
				СтрокаЧека.Продавец  = Чек.Продавец;
				Попытка
					СтрокаЧека.Цена            = Ценообразование.ПолучитьЦенуНоменклатурыВРознице(ТекущаяДата(), ПараметрыСеанса.ТекущийМагазин, СтрокаЧека.Номенклатура);
					СтрокаЧека.Сумма           = СтрокаЧека.Цена*СтрокаЧека.Количество;
					СтрокаЧека.СуммаНДС        = Ценообразование.РассчитатьСуммуНДС(СтрокаЧека.Сумма,
					Истина,
					Истина,
					Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
				Исключение
				КонецПопытки;
			КонецЦикла; 
			Если Добавлен Тогда
				пПрименитьАкциюИЗСправочника_(Чек, Акция);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры	



Процедура ОбработатьАвтоДобавление(Чек, Акция) Экспорт
	
	Для сч = 1 по 30 Цикл 
		
		АтрибутМинСуммаКорзин = Акция.Атрибуты.Найти("МинСуммаКорзин", "НазваниеАтрибута");
		Если АтрибутМинСуммаКорзин <> неопределено тогда
			
			СтруктураАтрибутов.Вставить("МинСуммаКорзин" ,АтрибутМинСуммаКорзин.ЗначениеАтрибута); 		
		КонецЕсли;
		
		АтрибутМинСуммаКорзин = Акция.Атрибуты.Найти("КупонКорзина", "НазваниеАтрибута");
		Если АтрибутМинСуммаКорзин <> неопределено тогда
			
			СтруктураАтрибутов.Вставить("КупонКорзина" ,АтрибутМинСуммаКорзин.ЗначениеАтрибута); 		
		КонецЕсли;
		
		АтрибутКорзина = Акция.Атрибуты.Найти("Корзина" + СокрЛП(сч), "НазваниеАтрибута");
		Если АтрибутКорзина <> неопределено тогда
			
			СтруктураАтрибутов.Вставить("Корзина" + СокрЛП(сч),АтрибутКорзина.ЗначениеАтрибута); 		
		КонецЕсли;
		
		АтрибутМинСумма = Акция.Атрибуты.Найти("МинСуммаКорзина" + СокрЛП(сч), "НазваниеАтрибута");
		Если АтрибутМинСумма <> неопределено тогда
			
			СтруктураАтрибутов.Вставить("МинСуммаКорзина" + СокрЛП(сч),АтрибутМинСумма.ЗначениеАтрибута); 		
		КонецЕсли;
		
		АтрибутМинКоличество = Акция.Атрибуты.Найти("МинКоличествоТоваров" + СокрЛП(сч), "НазваниеАтрибута");
		Если АтрибутМинКоличество <> неопределено тогда
			
			СтруктураАтрибутов.Вставить("МинКоличествоТоваров" + СокрЛП(сч),АтрибутМинКоличество.ЗначениеАтрибута); 		
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СтруктураАтрибутов.Свойство("МинСуммаКорзин") И (НЕ СтруктураАтрибутов.Свойство("МинСуммаКорзина1")) 
		И (НЕ СтруктураАтрибутов.Свойство("МинКоличествоТоваров1")) Тогда
		
		Если СуммаКорзинПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;	
		
	ИначеЕсли НЕ (СтруктураАтрибутов.Свойство("МинСуммаКорзин")) И СтруктураАтрибутов.Свойство("МинСуммаКорзина1") 
		И (НЕ СтруктураАтрибутов.Свойство("МинКоличествоТоваров1")) Тогда
		
		Если СуммаКаждойКорзиныПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;	
		
	ИначеЕсли НЕ (СтруктураАтрибутов.Свойство("МинСуммаКорзин")) И (НЕ СтруктураАтрибутов.Свойство("МинСуммаКорзина1")) 
		И СтруктураАтрибутов.Свойство("МинКоличествоТоваров1") Тогда
		
		Если КоличествоТоваровКорзинПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;		
	ИначеЕсли СтруктураАтрибутов.Свойство("МинСуммаКорзин") И СтруктураАтрибутов.Свойство("МинСуммаКорзина1") 
		И (НЕ СтруктураАтрибутов.Свойство("МинКоличествоТоваров1")) Тогда
		
		Если СуммаКорзинПодходит(Чек, Акция)  И  СуммаКаждойКорзиныПодходит(Чек, Акция) Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;	
		
	ИначеЕсли СтруктураАтрибутов.Свойство("МинСуммаКорзин") И  (НЕ СтруктураАтрибутов.Свойство("МинСуммаКорзина1")) 
		И СтруктураАтрибутов.Свойство("МинКоличествоТоваров1") Тогда
		
		Если СуммаКорзинПодходит(Чек, Акция)  И  КоличествоТоваровКорзинПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;	
		
	ИначеЕсли (НЕ СтруктураАтрибутов.Свойство("МинСуммаКорзин")) И  СтруктураАтрибутов.Свойство("МинСуммаКорзина1") 
		И СтруктураАтрибутов.Свойство("МинКоличествоТоваров1") Тогда
		
		Если СуммаКаждойКорзиныПодходит(Чек, Акция)  И  КоличествоТоваровКорзинПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;		
		
	ИначеЕсли СтруктураАтрибутов.Свойство("МинСуммаКорзин") И  СтруктураАтрибутов.Свойство("МинСуммаКорзина1") 
		И СтруктураАтрибутов.Свойство("МинКоличествоТоваров1") Тогда
		
		Если СуммаКаждойКорзиныПодходит(Чек, Акция)  И  КоличествоТоваровКорзинПодходит(Чек, Акция) 
			И СуммаКорзинПодходит(Чек, Акция)  Тогда
			
			ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
			Возврат;
			
		КонецЕсли;	
		
		
	Иначе 	
		ПроверитьИДобавитьСопутствующийТовар(Чек, Акция);
	КонецЕсли;	
  			
		
КонецПроцедуры


Функция ОбработкаДействия(ДокументОбъект, Отказ, ТекМестоВыполнения = Неопределено) Экспорт
	Если ТекМестоВыполнения = Неопределено тогда
		ТекМестоВыполнения = Перечисления.МестоВыполненияВнешнейОбработкиПоАкцииВРМК.ПослеВыбораАкции;	
	КонецЕсли;	
	Если ТекМестоВыполнения = Перечисления.МестоВыполненияВнешнейОбработкиПоАкцииВРМК.ПослеВыбораАкции тогда	
		Результат = Ложь;
		ЭтоКредит = Ложь;
		
		Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЧекККМ")  Тогда
			ДокументОбъект.ВывестиИнформациюОбОшибке( "Ошибка обработки Акций - не передан документ." );
			Возврат Результат;
		КонецЕсли;
		
		
		ДокументОбъектОбщий = ДокументОбъект;
		Чек = ДокументОбъектОбщий;
		Если	ДокументОбъектОбщий.ДополнительныеСвойства.Свойство("ПродажаВКредит")  тогда			
			ЭтоКредит = ДокументОбъектОбщий.ДополнительныеСвойства.ПродажаВКредит;
		КонецЕсли;
		
		Если ЭтоКредит И  
			ДокументОбъектОбщий.мДействующаяАкция.Атрибуты.Найти("NoCredit", "НазваниеАтрибута") <> Неопределено Тогда
			
			Возврат Результат;
			
		КонецЕсли;	
		
		СтрокиЧека = ДокументОбъектОбщий.Товары.Выгрузить();
		КодТочки = ПараметрыСеанса.ТекущийМагазин.ОсновнойСклад.Ссылка;
		ЕстьАртикул = 0;
		Акциз = ДокументОбъектОбщий.мДействующаяАкция;
		ЭтотОбъект.Акция = Акциз;
		Пересечение = Ложь;
		СоВсеми     = Ложь;
		//
		ДокументОбъектОбщий.ФлагКупоныПогашены = Истина;
		Если Акция.СлужебнаяАкция = Ложь тогда
			Сч = ДокументобъектОбщий.Товары.Количество();
			Пока Сч > 0 Цикл 
				ВСкидках = ДокументОбъектобщий.Скидки.Найти(Акция, "СкидкаНаценка");
				Если ВСкидках <> Неопределено тогда
					ДокументОбъектОбщий.Скидки.Удалить(ВСкидках);
				КонецЕсли;
				Сч = Сч-1;
			КонецЦикла;
			Если СокрЛП(Акция.ДопСведения) <> "Исключение" И  Акция.Атрибуты.Найти("Исключение", "НазваниеАтрибута") = Неопределено  Тогда
				
				для каждого Втоварах из ДокументОбъектОбщий.Товары Цикл	
					Если Втоварах.Сумма < Втоварах.Цена тогда
						Втоварах.СуммаСкидки = 0;
						Втоварах.ПроцентСкидкиНаценки = 0;
						Втоварах.Сумма       = (Втоварах.Цена*ВТоварах.Количество)-Втоварах.СуммаСкидки;
						Втоварах.СуммаНДС    = Ценообразование.РассчитатьСуммуНДС(Втоварах.Сумма,						
						Истина,
						Истина,
						Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
					КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;

		КонецЕсли;
		
		//СмежнаяАкция =  ВыбратьВариантАкции();
		//
		//Если СмежнаяАкция = неопределено ИЛИ СмежнаяАкция = Справочники.Акции.ПустаяСсылка() тогда
		//	Возврат Ложь;
		//КонецЕсли;	
		
		
		Если Акция.Атрибуты.Найти("ПересечениеВсе", "НазваниеАтрибута") <> Неопределено Тогда			
			 СоВсеми = Истина;	
		КонецЕсли;	
		
		
		Запрос = Новый Запрос;
		Запрос.Текст =   "ВЫБРАТЬ
		|	АкцииАтрибуты.НазваниеАтрибута,
		|	АкцииАтрибуты.ЗначениеАтрибута
		|ИЗ
		|	Справочник.Акции.Атрибуты КАК АкцииАтрибуты
		|ГДЕ
		|	АкцииАтрибуты.Ссылка = &Ссылка
		|	И АкцииАтрибуты.НазваниеАтрибута = &НазваниеАтрибута"  ;
		
		Запрос.УстановитьПараметр("Ссылка", Акция);
		Запрос.УстановитьПараметр("НазваниеАтрибута", "Пересечение");
		ТаблицаПересечений = Запрос.Выполнить().Выгрузить();
		
		
		
		Для каждого стр ИЗ ТаблицаПересечений Цикл
			
			Вчеке = ДокументОбъект.Скидки.Найти(Справочники.Акции.НайтиПоКоду(СокрЛП(стр.ЗначениеАтрибута)));
			
			
			Если Вчеке <> неопределено Тогда
				Пересечение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если (ДокументОбъектОбщий.Скидки.Количество() > 0  И НЕ Пересечение) И НЕ СоВсеми тогда
			
			//Отказ = Истина;
			Возврат Ложь;
			
		КонецЕсли;	
		
		
		
		попытка	
			ТоварыЧека = ДокументОбъектОбщий.Товары.Выгрузить();
		исключение
		конецпопытки;	
		
		// получение списка родителей
		// получение списка родителей
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", СтрокиЧека.ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
		ВсеРодители = Запрос.Выполнить().Выгрузить();
		
		ТаблицаТоваров = ДополнитьТаблицуТоваров(СтрокиЧека, ВсеРодители);
		
		ТЧАкц = Новый ТаблицаЗначений;
		ТЧАкц.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЧАкц.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТЧАкц.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Акция",Акция);
		Запрос.УстановитьПараметр("ТЧТовары",ТаблицаТоваров);
		Запрос.УстановитьПараметр("МассивНоменклатуры", СтрокиЧека.ВыгрузитьКолонку("Номенклатура"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорзиныСоставКорзины.Номенклатура,
		|   КорзиныСоставКорзины.МинЦена,
		|	КорзиныСоставКорзины.Ссылка
		|ПОМЕСТИТЬ ВТНоменклатураАкция
		|ИЗ
		|	Справочник.Акции.Состав КАК АкцииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
		|		ПО АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка
		|ГДЕ
		|	АкцииСостав.Ссылка = &Акция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧТовары.Номенклатура,
		|	ТЧТовары.ДляКорзин,
		|	ТЧТовары.Цена,
		|	ТЧТовары.НомерСтроки,
		|	ТЧТовары.НомерТелефона,
		|	ТЧТовары.Количество,
		|	ТЧТовары.Сумма
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&ТЧТовары КАК ТЧТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  РАЗЛИЧНЫЕ
		|	ВТТовары.Номенклатура КАК НомЧека,
		|	ВТНоменклатураАкция.МинЦена КАК МинЦена,
		|   ВТТовары.НомерСтроки КАК НомерСтроки,
		|   ВТТовары.Сумма КАК Сумма
		|ИЗ
		|	ВТНоменклатураАкция КАК ВТНоменклатураАкция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
		|		ПО ВТНоменклатураАкция.Номенклатура = ВТТовары.ДляКорзин ";
		//|ГДЕ
		//|	ВТТовары.НомерТелефона <> """"";	
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() >0 тогда
			
			
			Для каждого стр из Выборка Цикл
				
				НовСтр = ТЧАкц.Добавить();
				НовСтр.Номенклатура = стр.НомЧека;	
				НовСтр.НомерСтроки = стр.НомерСтроки;
				НовСтр.Сумма = стр.Сумма;
			КонецЦикла;
			
		КонецЕсли;
		
		
		
		Пропуск = Ложь;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Акция",Акция);
		Запрос.УстановитьПараметр("ЧекТовары",СтрокиЧека);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорзиныСоставКорзины.Номенклатура,
		|   КорзиныСоставКорзины.МинЦена
		|ПОМЕСТИТЬ ВТНоменклатураАкция
		|ИЗ
		|	Справочник.Акции.Состав КАК АкцииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
		|		ПО АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка
		|ГДЕ
		|	АкцииСостав.Ссылка = &Акция 
		|;
		|ВЫБРАТЬ
		|ЧекТовары.Номенклатура
		|ПОМЕСТИТЬ ВТЧЕКТОВАРЫ
		|ИЗ
		|	&ЧекТовары КАК ЧекТовары
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураАкция.Номенклатура КАК НомАкции,
		|   ВТНоменклатураАкция.МинЦена КАК МинЦена,
		|   ЧекТовары.Номенклатура КАК НомЧека
		|ИЗ
		|	ВТНоменклатураАкция КАК ВТНоменклатураАкция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЧЕКТОВАРЫ КАК ЧекТовары
		|		ПО ИСТИНА
		|
		|";	
		
		Выборка = Запрос.Выполнить().Выгрузить();
		//ЦенаВЧек=0;
		ЕстьАртикул = 0;
		
		Для каждого стр из Выборка Цикл
			//Предупреждение("Внутри цикла");
			Если стр.НомАкции = стр.НомЧека ИЛИ стр.НомЧека.Ссылка.ПринадлежитЭлементу(стр.НомАкции.Ссылка) тогда
				ВыбранныйТовар = СокрЛП(стр.НомЧека);
				//ЦенаВЧек = стр.МинЦена;
				//СкидкаНаТариф = стр.МаксЦена;
				ЕстьАртикул = 1;
				Пропуск = Истина;
				прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверка на вшивость
		Если Не Пропуск Тогда
			Возврат Истина;
		КонецЕсли;
		Если ЕстьАртикул = 0 Тогда
			
			//Для акции ничего нет
			Отказ = Результат;
			Возврат Результат;
			
		КонецЕсли;
		
		МинЦ = 0;
		ЗначЦ = Акция.Атрибуты.Найти("Мин$", "НазваниеАтрибута");
		Если ЗначЦ <> Неопределено тогда			
			МинЦ = ОбщегоНазначения.ПривестиСтрокуКЧислу(ЗначЦ.ЗначениеАтрибута);
		КонецЕсли;
		Если МинЦ <> 0 тогда
			
			Если ТЧАкц.Итог("Сумма") < МинЦ тогда
				Отказать = Истина;
				Возврат ложь;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		
		
		ОдинУчастник = "НЕТ";
		ЗначОдного = Акция.Атрибуты.Найти("Один товар", "НазваниеАтрибута");
		Если ЗначОдного <> Неопределено тогда			
			ОдинУчастник = ВРег(ЗначОдного.ЗначениеАтрибута);
		КонецЕсли;	
		
		Если ОдинУчастник = "ДА" тогда	
			Если ТЧАкц.Количество() > 1 тогда
				
				
				Если Акция.Атрибуты.Найти("ПроверитьАкции", "НазваниеАтрибута") <> Неопределено Тогда
					
					Для каждого строка ИЗ ТЧАкц Цикл
						
						если строка.Сумма > 0 Тогда
							ИскомаяНом = строка.Номенклатура;
							прервать;
						КонецЕсли;	  
						
					КонецЦикла;	  
					
					ФормаП_ = ПолучитьОбщуюФорму("ФормаПредупрежденияУниверсальная");
					ФормаП_.ЭлементыФормы.Надпись2.Видимость = Ложь;
					ФормаП_.Заголовок = "Нарушение условий продажи";
					ФормаП_.ЭлементыФормы.Надпись1.Заголовок = "Для продажи с подарочными СИМ, необходимо наличие в чеке ОДНОГО подарочного комплекта. " + ?(ИскомаяНом<>неопределено,  "Лишний товар - " + СокрЛП(ИскомаяНом.Наименование), "");
					ФормаП_.ОткрытьМодально();
					Отказ = Истина;
					Возврат Истина;
					
					
				КонецЕсли;	  
				
				ОбщегоНазначения.ПредупреждениеПользователю("ВНИМАНИЕ!  Для участия в акции " +  СокрЛП(Акция) + " необходимо наличие
				|в чеке ОДНОГО акционного товара");
				
				
				Возврат ложь;
			КонецЕсли;	
		КонецЕсли;	

	  
	  
	  
	  
	  СтрокаАтрибута = Акция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута");
	  Если СтрокаАтрибута <> неопределено тогда
		  ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
		  
		  Если вРег(ЗначениеАтрибута_) = вРег("1") тогда
			  
			  
			  Запрос_ = новый Запрос;
			  Запрос_.Текст = 
			   "ВЫБРАТЬ РАЗЛИЧНЫЕ
			   |	АкцииАтрибуты.Ссылка,
			   |	АкцииАтрибуты.Ссылка.ДопСведения
			   |ИЗ
			   |	Справочник.Акции.Атрибуты КАК АкцииАтрибуты
			   |ГДЕ
			   |	АкцииАтрибуты.НазваниеАтрибута = &НазваниеАтрибута
			   |	И АкцииАтрибуты.ЗначениеАтрибута = &ЗначениеАтрибута" ;
			   Запрос_.УстановитьПараметр("НазваниеАтрибута",строкаАтрибута.НазваниеАтрибута); 
			   Запрос_.УстановитьПараметр("ЗначениеАтрибута",ЗначениеАтрибута_);
			   АкцииЭтапа1 = Запрос_.Выполнить().Выгрузить();
			   СписокАкций1Этапа = АкцииЭтапа1.ВыгрузитьКолонку("Ссылка");
			       Текстпроверки = "";
				   сч = 0;
			   для каждого эл из СписокАкций1Этапа цикл
				   
				    Текстпроверки = ТекстПроверки + эл.код + ?(сч=СписокАкций1Этапа.Количество()-1,"", ";");
				    сч = сч + 1;
			   КонецЦикла;	   
			   
			   
			  
			  
			   Если	ТЧАкц.Итог("Сумма") > 3000 Тогда
				   
				   Если Вопрос("Предложите клиенту поучаствовать в акции «Скидка до 1500 руб. на вторую покупку». 
					   |Клиент согласен участвовать в акции?»",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					   
					   возврат Истина;
				   Иначе
					   
					   оФормаТ = ЭтотОбъект.ПолучитьФорму("ФормаТелефона");
					   оФормаТ.ТекстСлужебный = Текстпроверки;
					   НомерТелефонаМТС = оФормаТ.ОткрытьМодально();
					   
					   
					   корзина_ = Акция.Состав[0].Корзина;
					   
					   для каждого кор из корзина_.СоставКорзины Цикл
						   
						   для каждого стр из чек.товары цикл
							   
							   
							   если стр.Номенклатура = кор.Номенклатура или стр.Номенклатура.ПринадлежитЭлементу(кор.Номенклатура) тогда
								   
								   
								   стр.НомерТелефона = НомерТелефонаМТС;
								   ////6836_Ульянников
								   //ЗаписатьНомерТелефонаВХЗ(НомерТелефонаМТС, стр.НомерСтроки);
								   ////6836_Ульянников

							   КонецЕсли;	
							   
						   КонецЦикла;	
						   
						   
					   КонецЦикла;	
					   
					   Если ТЧАкц.Итог("Сумма") >= 3000 И ТЧАкц.Итог("Сумма") <=5000 Тогда
						   
						    Искомая = АкцииЭтапа1.Найти("3000", "ДопСведения");
							Если Искомая <> неопределено тогда								
								      Акция = Искомая.Ссылка;
							КонецЕсли;	
						   
					   ИначеЕсли ТЧАкц.Итог("Сумма") > 5000 И ТЧАкц.Итог("Сумма") <=10000 Тогда
						    Искомая = АкцииЭтапа1.Найти("5000", "ДопСведения");
							Если Искомая <> неопределено тогда								
								      Акция = Искомая.Ссылка;
							КонецЕсли;
					   ИначеЕсли ТЧАкц.Итог("Сумма") >= 10000 Тогда
						    Искомая = АкцииЭтапа1.Найти("10000", "ДопСведения");
							Если Искомая <> неопределено тогда								
								      Акция = Искомая.Ссылка;
							КонецЕсли;
					   КонецЕсли;	   
						   
						   
					   пПрименитьАкциюИЗСправочника_(Чек, Акция);
					   
					   
					   
				   КонецЕсли;		   
				   
			   Иначе
				   //{13357_Ульянников_14.08.2015_
				   ФормаП_ = ПолучитьОбщуюФорму("ФормаПредупрежденияУниверсальная");
				   ФормаП_.ЭлементыФормы.Надпись2.Заголовок = "Открыть ИП";
				   ФормаП_.СтрокаАдрес = "http://retail.mtsretail.ru/expert_documents/ADO/DocLib/Домашняя.aspx";				  
				   ФормаП_.ЭлементыФормы.Надпись1.Заголовок = "Сумма акционных товаров не удовлетворяет условиям акции";
				   ФормаП_.ОткрытьМодально();		
				   //13357_Ульянников_14.08.2015}
				   
			   КонецЕсли;	
			   Попытка
				   ТекстВЧек = СтрЗаменить(Акция.Атрибуты.Найти("ТекстЧека1").ЗначениеАтрибута,"*****", НомерТелефонаМТС);
				   Чек.мТекстДопИнформация = ТекстВЧек;
			   Исключение
			   КонецПопытки;
			  Возврат ложь;
			  
		  КонецЕсли;	
		  
		  
	  КонецЕсли;

	  
	  СтрокаАтрибутаПроверки = Акция.Атрибуты.Найти("ПроверитьАкции", "НазваниеАтрибута");
	  Если СтрокаАтрибутаПроверки <> Неопределено Тогда
		  ПредставлениеМассивПодстрок = "";
		  МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаАтрибутаПроверки.ЗначениеАтрибута,,Истина);
		  Для каждого эл ИЗ МассивПодстрок Цикл
			  
			  ЭлСправ = Справочники.Акции.НайтиПоКоду(эл);
			  Если НЕ ЭлСправ.Пустая() Тогда
				  
				  ПредставлениеМассивПодстрок = ПредставлениеМассивПодстрок + Символы.ПС + ЭлСправ.Наименование;
				  
			  КонецЕсли;	  
			  
		  КонецЦикла;	  
		  
		  Если Чек.Скидки.Количество() = 0 тогда
			  ОбщегоНазначения.СообщитьОбОшибке("Текущая продажа невозможна БЕЗ применения следующих акций: " + ПредставлениеМассивПодстрок);
			  УдалитьКонтрактыИзЧека(Чек);
			  Чек.Товары.Очистить();
			  Попытка
				  Чек.Записать();
			  Исключение
			  КонецПопытки;
			  Возврат Истина;				
		  КонецЕсли;	
		  
		  МассивЭлем =  РазложитьСтрокуВМассивПодстрок(СтрокаАтрибутаПроверки.ЗначениеАтрибута, ",");
		  ЕстьХотьОдна = Ложь;
		  Если МассивЭлем.Количество() > 0 тогда
			  
			  для каждого элем из МассивЭлем Цикл
				  Если Чек.Скидки.Найти(Справочники.Акции.НайтиПоКоду(элем) , "СкидкаНаценка") <> неопределено Тогда
					  ЕстьХотьОдна = Истина;
					  Прервать;
				  КонецЕсли;
			  КонецЦикла;	  
			  
			  Если НЕ ЕстьХотьОдна Тогда
				  ОбщегоНазначения.СообщитьОбОшибке("Текущая продажа невозможна БЕЗ применения следующих акций: " + ПредставлениеМассивПодстрок);
				  УдалитьКонтрактыИзЧека(Чек);
				  Чек.Товары.Очистить();
				  Попытка
					  Чек.Записать();
				  Исключение
				  КонецПопытки;
				  
				  Возврат Истина;
				  
			  КонецЕсли;
			  
		  КонецЕсли;
 
		  
		  возврат Ложь;
		  
	  КонецЕсли;
	  
	  СтрокаАтрибута = Акция.Атрибуты.Найти("КупонКорзина", "НазваниеАтрибута");
	  Если СтрокаАтрибута <> неопределено тогда
		  ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
		  
		  Если ЗначениеАтрибута_ <> "" тогда
			  
			  ОбработатьАвтоДобавление(Чек, Акция);
			  
			  Возврат ложь;
 
		  КонецЕсли;
	  КонецЕсли;	
	  
	  СтрокаАтрибута = Акция.Атрибуты.Найти("ПечатьКода", "НазваниеАтрибута");
	  Если СтрокаАтрибута <> неопределено тогда
		  ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
		  
		  Если вРег(ЗначениеАтрибута_) = вРег("Да") тогда
			  
			  ПолучитьКодНаСкидку(Чек, Акция);
			  Возврат ложь;
		  ИначеЕсли вРег(ЗначениеАтрибута_) = "ЧЕК" тогда
			  ПолучитьКодНаСкидку(Чек, Акция, Истина);
			  пПрименитьАкциюИЗСправочника_(Чек, Акция);
			  Возврат ложь;
			  
		  КонецЕсли;	
		  
		  
	  КонецЕсли;

	  //[нач RTKDEVICRET-38 Ульянников 13.04.2016
	  СтрокаАтрибута = Акция.Атрибуты.Найти("РегистрацияНомера", "НазваниеАтрибута");
	  Если СтрокаАтрибута <> неопределено тогда
		  ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
		  
		  Если вРег(ЗначениеАтрибута_) = вРег("Да") тогда
			  
			  ФормаРегистрацииСотовогоНомера = ПолучитьОбщуюФорму("ФормаРегистрацииСотовогоНомераДляОбзвона");
			  ФормаРегистрацииСотовогоНомера.ЭлементыФормы.Надпись1.Заголовок = "Для реализации артикула «Установка приложения Мой МТС» укажите номер телефона абонента МТС";
			  ФормаРегистрацииСотовогоНомера.ВидимостьДляВсегоДокумента = Ложь;
			  ВведенныйНомерСтруктура = ФормаРегистрацииСотовогоНомера.ОткрытьМодально();
			  
			  Если ЗначениеЗаполнено(ВведенныйНомерСтруктура) Тогда
				  
				  
				  //Если НЕ  ОбщегоНазначения.ЭтоНомерМТС_MNP( Сред(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ВведенныйНомерСтруктура.НомерТелефона), " ", ""), "-", ""), "(", ""), "+", ""), ")", ""), 2) ) Тогда
				  //	ФормаП_ = ПолучитьОбщуюФорму("ФормаПредупрежденияУниверсальная");
				  //	ФормаП_.Заголовок = "Проверка номера телефона " +ВведенныйНомерСтруктура.НомерТелефона+" !";
				  //	ФормаП_.ЭлементыФормы.Надпись2.Видимость = Ложь;
				  //	ФормаП_.ЭлементыФормы.Надпись1.Заголовок = "Номер телефона не принадлежит МТС. Продажа невозможна." ;
				  //	ФормаП_.ОткрытьМодально();
				  //	Отказ = Истина;
				  //	Возврат Истина;
				  //	
				  //КонецЕсли;	
					
				  НомерТелефонаМТС = ВведенныйНомерСтруктура.НомерТелефона;
				  
				  Отбор = новый Структура();
				  Отбор.Вставить("Номенклатура", ТЧАкц[0].Номенклатура);
				  Строки = Чек.Товары.НайтиСтроки(отбор);
				  для каждого строка из Строки Цикл
					  строка.НомерТелефона = НомерТелефонаМТС;  					  
				  КонецЦикла;	  
				  пПрименитьАкциюИЗСправочника_(Чек, Акция);				  
			  Иначе
				  ФормаП_ = ПолучитьОбщуюФорму("ФормаПредупрежденияУниверсальная");
				  ФормаП_.Заголовок = "Проверка заполненности!";
				  ФормаП_.ЭлементыФормы.Надпись2.Видимость = Ложь;
				  ФормаП_.ЭлементыФормы.Надпись1.Заголовок = "Для услуги " +СокрЛП(ТЧАкц[0].Номенклатура)+ " не указан номер телефона. Продажа невозможна." ;
				  ФормаП_.ОткрытьМодально();
				  Попытка
					  Чек.Купоны.Очистить();
					  Чек.Скидки.Очистить();
					  
					  для каждого стр из Чек.Товары Цикл
						  стр.ПроцентСкидкиНаценки = 0;
						  стр.СуммаСкидки = 0;
						  стр.Сумма = стр.Цена*стр.Количество;
						  попытка
							  //ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
							  ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(стр, Чек);
						  исключение
						  КонецПопытки;
						  
					  КонецЦикла;	
				  Исключение
				  КонецПопытки;
				  
				  
				  Отказ = Истина;
				  Возврат Истина;
			  КонецЕсли;
			  
			  
			  Возврат ложь;
			  
		  КонецЕсли;	
		  
		  
	  КонецЕсли;
	  
	  // RTKDEVICRET-38 Ульянников 13.04.2016 кон]	
		
		
		
	  
	    СтрокаАтрибута = Акция.Атрибуты.Найти("ОткрыватьФорму", "НазваниеАтрибута");
		Если СтрокаАтрибута <> неопределено тогда
			ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
			
			Если вРег(ЗначениеАтрибута_) = вРег("Нет") тогда
				
				  пПрименитьАкциюИЗСправочника_(Чек, Акция);
				  Возврат ложь;
				
			КонецЕсли;	
			
			
		КонецЕсли;	
	  
	  
	  
		Отказать = Ложь;
		Форма = ЭтотОбъект.ПолучитьФорму("Форма");
		Форма.ЕстьАртикул = ЕстьАртикул;
		Форма.Акция =Акция;
		//Форма.СмежнаяАкция = СмежнаяАкция;
		Форма.Открыть();
		
		Если КодЗакрытия = "0" Тогда
			Отказ = Ложь;		//Нажали нет или отменили,продолжить пробитие
			
		ИначеЕсли КодЗакрытия = "1" Тогда
			Отказ =  Истина;    //Нажали да, прервать пробитие
			
		Иначе //???????
			Отказ = Ложь;
			
		КонецЕсли;
		Форма.Закрыть();
		
		
		
		Если НЕ отказать тогда
			
			
			СтрокаСАкцией	= Чек.Скидки.Найти(Акция,"СкидкаНаценка");
			
			Если СтрокаСАкцией <> Неопределено тогда	
				
				Чек.ФлагКупоныПогашены = Истина;
				//Чек.ЕстьНеСтандартнаяАкция = Истина;
			КонецЕсли;	
			
		Иначе
			Попытка
				Чек.Скидки.Очистить();
				Чек.Купоны.Очистить()
			Исключение
			КонецПопытки;
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	Возврат Отказ;
	
КонецФункции

// { Феофанов Д.А._17.03.2016_[#6855]
// Удаляет из чека все привязанные контракты
//
// Параметры:
// 	 ДокЧек - ДокументОбъект.ЧекККМ - чек, из которого удаляются контракты
//
Процедура УдалитьКонтрактыИзЧека(ДокЧек)
	
	Если ДокЧек.Контракты.Количество() > 0 тогда	
		РазмерТЧ = ДокЧек.Контракты.Количество();
		Сч = РазмерТЧ-1;
		Пока Сч >=0 Цикл
			
			текСтрокаКонтракт = ДокЧек.Контракты[Сч];
			Сч = Сч - 1;
			Если ЗначениеЗаполнено(текСтрокаКонтракт.Контракт) И текСтрокаКонтракт.КлючСвязи <> 0 Тогда
				
				ДокКонтракт = текСтрокаКонтракт.Контракт.ПолучитьОбъект();
				
				
				Попытка
					ДокКонтракт.УстановитьПометкуУдаления(Истина);
					ДокЧек.Контракты.Удалить(текСтрокаКонтракт);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка пометки удаления контракта " + ДокКонтракт + ". " + Символы.ПС + ОписаниеОшибки());
					Возврат;
				КонецПопытки; 
			КонецЕсли;
		КонецЦикла;		
		
	КонецЕсли;		
	
КонецПроцедуры // УдалитьКонтрактыИзЧека()
// } Феофанов Д.А._17.03.2016_[#6855]

функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции


Процедура ПолучитьКодНаСкидку(Чек, Акция, ФискальныйЧек = Ложь) Экспорт
	

	CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		Отказать = Истина;
		Возврат;
	КонецЕсли;
	
	// Каталог для сохранения запроса
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	СоздатьКаталог(ИмяКаталога);
	
	// Файл для сохранения запроса
	КодТочки = ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла = КодТочки + "_GetCode.xml";
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла;
	
	// Создание XML-запроса
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXml.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗначениеUrl = "";
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("#5090", ЗначениеUrl) Тогда
		Если ЗначениеUrl <> "" Тогда
			url = ЗначениеUrl;	
		Иначе	
			url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";	
		КонецЕсли;
	Иначе	
		url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("request");
	
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name",	"DISCOUNT");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function","GET_CODE");
	ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	КодТочки);                                        
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "action_code",Акция.Атрибуты.Найти("Сегмент").ЗначениеАтрибута); 
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "operator_code",Чек.Продавец.ТабельныйНомер);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	// Подготовка строки ответа
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	// Отправка запроса
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога + "\" + ИмяФайла);
	
	ТекстXML = "";
	
	ТекстXML = XML.ПолучитьТекст();
	Попытка	
		Рез = CyberPlat.глОтправитьПоHTTP(ТекстXML, AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);
		
		// Подготовка дерева ответа
		ДеревоXML = "";
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXml.УстановитьСтроку(AnswerXML);
		
		// Построение дерева из ответа
		Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
			ОбщегоНазначения.ПредупреждениеОбОшибке("Из-за технических проблем невозможно получить код на скидку.");
			Отказать = Истина;
			Возврат;
		КонецЕсли;
		ТекстАтрибут_ = "";
		ТекстАтрибут = Акция.Атрибуты.Найти("ТекстСкидки", "НазваниеАтрибута");
		Если ТекстАтрибут <> Неопределено тогда
			
			ТекстАтрибут_ = ТекстАтрибут.ЗначениеАтрибута;
			
		КонецЕсли;	
		
		Попытка
			Если	(ДеревоXML.response.is_error = "0") И ДеревоXML.response.message <> ""  тогда
				Если НЕ ФискальныйЧек Тогда
				Чек.пКодНаСкидку = "iTunes код на скидку: "+ СокрЛП(ДеревоXML.response.message) +" "+ ТекстАтрибут_;
			Иначе
				Чек.мТекстДопИнформация = "";
				Чек.мТекстДопИнформация = Чек.мТекстДопИнформация +" "+Символы.ПС + стрЗаменить(ТекстАтрибут_,"***",СокрЛП(ДеревоXML.response.message));
				АкцияОбъект = Акция.ПолучитьОбъект();
				АкцияОбъект.ТекстПодсказки = Чек.мТекстДопИнформация;
				АкцияОбъект.Записать();
				
				//Если Чек.ДополнительныеСвойства.Свойство("ПродажаВКредит") тогда
				//	
				//	Если Чек.ДополнительныеСвойства.ПродажаВКредит = Истина тогда								
				//			Чек.Товары[0].НомерТелефона = СокрЛП(ДеревоXML.response.message);
				//	КонецЕсли;	
				//КонецЕсли;	
				
			КонецЕсли;
			ИначеЕсли ДеревоXML.response.is_error = "1" И ДеревоXML.response.message = "0" тогда
				Отказать = Истина;
				Возврат;
				
				
			ИначеЕсли ДеревоXML.response.is_error = "1" И ДеревоXML.response.message <> "" тогда
				
				Чек.ВывестиИнформациюОбОшибке("Не удалось получить код из хранилища " + СокрЛП(ДеревоXML.response.message));
				Отказать = Истина;
				Возврат;
			КонецЕсли;	
			
			
			
		Исключение
			
		КонецПопытки;
		
		
	Исключение
		
	КонецПопытки;



	
	
	
	
	
КонецПроцедуры	


Функция ПроверитьНоменклатуруНаПринадлежностьКАкцииИВернутьСумму(Номенклатура, ТЗ)
	
	Рез = ТЗ.Найти(СокрЛП(Номенклатура.артикул),"Артикул");
	Если Рез = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


Функция оПроверитьЗаписатьНомерТелефонаНаУчастиеВАкции(НомерТелефона, ВидОперации, Артикул, Серия, СуммаПродажи, ПозицияВЧеке, Купоны)
Примечание = "";	
	Если Чек.ДополнительныеСвойства.свойство("Примечание") тогда
		
		Примечание = Чек.ДополнительныеСвойства.Примечание;
		//Сообщить("Примечание " + Примечание);
	КонецЕсли;	
	
	// Получение обработки отправки запросов по почте
	CyberPlat = ПолучитьСерверТО().ПолучитьВнешнююОбработку(Справочники.ВнешниеОбработки.CyberPlat);
//	Сообщить("Got fuck" + сокрлп(cyberplat)) ;
	Если CyberPlat = Неопределено  Тогда
		ОписаниеОшибки = ("При выполнении действий по участию в акции произошла ошибка.
		|Не удалось получить обработку <CyberPlat>!
		|");
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		Возврат Истина;
	КонецЕсли;
	
	// Каталог для сохранения запроса
	ИмяКаталога = Константы.КаталогВыгрузкиДанных.Получить();
	ИмяКаталога = ?(Не ЗначениеЗаполнено(ИмяКаталога), "C:\jeeves\OUT", ИмяКаталога);
	ИмяКаталога = ?(Прав(ИмяКаталога, 1) = "\", Лев(ИмяКаталога, СтрДлина(ИмяКаталога) -1), ИмяКаталога) + "\OUT";
	СоздатьКаталог(ИмяКаталога);
	
	// Файл для сохранения запроса
	КодТочки = ВРег(СокрЛП(ПараметрыСеанса.ТекущийМагазин.Код));
	ИмяФайла = КодТочки + "_SmartPhone_Number.xml";
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла;
	
	// Создание XML-запроса
	ЗаписьXML = Новый ЗаписьXML;
	сообщить("The compound is....");
	ЗаписьXml.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("MARKETING.ACTION_MEMBERSHIP");  
	
	ЗначениеUrl = "";
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("#5090", ЗначениеUrl) Тогда
		Если ЗначениеUrl <> "" Тогда
			url = ЗначениеUrl;	
		Иначе	
			url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";	
		КонецЕсли;
	Иначе	
		url = "http://checkpointservice.tsretail.ru/CheckPointWebService.asmx/ProcessXml";
	КонецЕсли;

	
	    // ЗаписьXML.ЗаписатьАтрибут("xmlns", url);


	
	ЗаписьXML.ЗаписатьНачалоЭлемента("request");
	
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "process_name",	"ACTION_MEMBERSHIP");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "function",	"action_insert");
	ЗаписьXML.ЗаписатьНачалоЭлемента("function_params");
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "saledate",	стрЗаменить(Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"),"-",""));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "subsite_code",	ПараметрыСеанса.КодТочки);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "actioncode",	СокрЛП(Акция.Код)); 
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "phonenumber",	НомерТелефона); 
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "article", СокрЛП(Артикул));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "imei", СокрЛП(Серия));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "description",	СокрЛП(Примечание));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "rcpt_num",	СокрЛП(ЭтотОбъект.Чек.Номер));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "position",	ПозицияВЧеке);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "sum_sale",	СуммаПродажи);
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "discount_code", стрЗаменить(Купоны[0].КодКупона,Символы.НПП,""));
    CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "parent_actioncode", СокрЛП(Акция.код));
	CyberPlat.ЗаписатьЭлементXML(ЗаписьXML, "operator_code", СокрЛП(Чек.Продавец.ТабельныйНомер));


	ЗаписьXML.ЗаписатьКонецЭлемента();
	
//	ЗаписьXML.ЗаписатьКонецЭлемента(); // Request
	ЗаписьXML.ЗаписатьКонецЭлемента(); // CheckForAction
	ЗаписьXML.Закрыть();
	
	// Подготовка строки ответа
	AnswerXML = "";
	РасширенныйКодОшибки = -1;
	
	// Отправка запроса
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(ИмяКаталога + "\" + ИмяФайла);
	
	 ТекстXML = "";
	 
	 ТекстXML = XML.ПолучитьТекст();
Попытка	
	Если РТК_ДобавленныеПроцедуры_Сервер.ФункционалВключен("ГаситьПослеПробития") тогда
		
		
		Чек.ДополнительныеСвойства.Вставить("ТекстXML", ТекстXML); 
		//попытка
		//ЧекККМ.Записать();
		//Исключение
		//КонецПопытки;
		//сообщить("текстXML");
	Иначе
		
		
	Рез = CyberPlat.глОтправитьПоHTTP(XML.ПолучитьТекст(), AnswerXML, , РасширенныйКодОшибки, , , , url, , 1, , , Истина);

	
	// Подготовка дерева ответа
	ДеревоXML = "";
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(AnswerXML);
	
	// Построение дерева из ответа
	Если Не CyberPlat.ПостроитьДеревоXML(ЧтениеXml, ДеревоXML) Тогда
		ТекстВопроса = "Из-за технических проблем невозможно зарегистрировать клиента в данной акции.
						|Желаете продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Отказать = Истина;
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
		
    КонецЕсли;	
	
			
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;


	

КонецФункции

Функция РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции_(СтрокаСкидки, СтрокаТоваров, СуммаБезСкидки)  Экспорт
	
	Скидка = 0;
	
	Если СтрокаСкидки.ВидСкидки = "Процент" Тогда
		Скидка = СуммаБезСкидки * СтрокаСкидки.ЗначениеСкидкиНаценки/100;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "ИтоговаяСкидка" Тогда
		Скидка = СтрокаСкидки.ЗначениеСкидкиНаценки;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "Нет" Тогда
		Скидка = 0;
	ИначеЕсли СтрокаСкидки.ВидСкидки = "СуммаСкидки" Тогда
		Скидка = Мин(СуммаБезСкидки,СтрокаСкидки.ЗначениеСкидкиНаценки);
	ИначеЕсли СтрокаСкидки.ВидСкидки = "ФиксЦена" Тогда
		// SMV09.12.2011 Вернули назад, не правильно расчитывается скидка
		Скидка = Макс(0, СуммаБезСкидки - СтрокаСкидки.ЗначениеСкидкиНаценки*СтрокаТоваров.Количество);
		// SMV05.12.2011 СуммаБезСкидки -  Не правильно расчитывается вид скидки Фиксированная цена, скидка получатется как Сумма-Скидка
		//Необходимо разобраться как работают другие виды скидок
	КонецЕсли;
	
	Возврат Скидка;
	
КонецФункции // РассчитатьЗначениеСки



Функция РассчитатьЗначениеСкидкиИзКорзины(НайденнаяСтрока) Экспорт
	ЗначениеСкидки_ = 0;
	Скидка_=0;
	ВидСкидки_ = НайденнаяСтрока.ВидСкидки;
	ТаблицаКорзины = НайденнаяСтрока.Корзина.СоставКорзины.Выгрузить();
	СтрокаКорзины = ТаблицаКорзины.Найти(НайденнаяСтрока.Номенклатура, "Номенклатура");
	Если СтрокаКорзины <> Неопределено тогда
		
		ЗначениеСкидки_ = СтрокаКорзины.МинЦена;
	Иначе
		Для каждого стр из ТаблицаКорзины Цикл
			
			Если НайденнаяСтрока.Номенклатура = стр.Номенклатура ИЛИ НайденнаяСтрока.Номенклатура.ПринадлежитЭлементу(стр.Номенклатура) тогда
				ЗначениеСкидки_ = стр.МинЦена;
				прервать;
			КонецЕсли;	
			
		КонецЦикла;		
	КонецЕсли;	
	Если ВидСкидки_ <> Неопределено И ЗначениеСкидки_ > 0 тогда				
		Если ВидСкидки_ = "Процент" Тогда
			Скидка_ = НайденнаяСтрока.Сумма * ЗначениеСкидки_/100;
		ИначеЕсли ВидСкидки_ = "ИтоговаяСкидка" Тогда
			Скидка_ = ЗначениеСкидки_;
		ИначеЕсли ВидСкидки_ = "Нет" Тогда
			Скидка_ = 0;
		ИначеЕсли ВидСкидки_ = "СуммаСкидки" Тогда
			Скидка_ = Мин(НайденнаяСтрока.Сумма,ЗначениеСкидки_);
		ИначеЕсли ВидСкидки_ = "ФиксЦена" Тогда			
			Скидка_ = Макс(0, НайденнаяСтрока.Сумма - ЗначениеСкидки_*НайденнаяСтрока.Количество);	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат  Скидка_;
	
КонецФункции	

	процедура пПрименитьАкциюИЗСправочника_(ЧекККМ, оАкция) Экспорт
				
				мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(ЧекККМ.Товары);
				
				
				Результат = Ложь;
				
				
				//Очистим все скидки перед началом работы обработки
				СтрокиЧека = Новый ТаблицаЗначений;
				ТаблицаТЧТовары = ЧекККМ.Товары.Выгрузить();	
				СтрокиЧека = ЧекККМ.Товары.Выгрузить();
				ТЧЧек = ЧекККМ.Товары;
				ТЧакции = ЧекККМ.Скидки;
				
				таблицатоваров = новый ТаблицаЗначений;
				таблицатоваров = ТаблицаТЧТовары.СкопироватьКолонки();
				ТаблицаТоваров = ТаблицаТЧТовары; 
				ТаблицаТоваров.Колонки.Добавить("МинЦена");
				ТаблицаТоваров.Колонки.Добавить("МаксЦена");
				ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МинЦена");
				ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Цена"), "МаксЦена");
				
				// получение списка родителей
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МассивНоменклатуры", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
				Запрос.Текст = "ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка В(&МассивНоменклатуры)
				|ИТОГИ ПО
				|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
				
				ВсеРодители = Запрос.Выполнить().Выгрузить();
				
				магазин = ПараметрыСеанса.ТекущийМагазин;
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Склад", Магазин.ОсновнойСклад);
				Запрос.Текст = "ВЫБРАТЬ
				|	Склады.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка = &Склад
				|ИТОГИ ПО
				|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
				
				ВсеСклады 		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
				СоставЗаказа    = УправлениеМаркетинговымиАкциями.ОбновитьДанныеЗаказа(ТаблицаТоваров, ВсеРодители);
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ВсеРодители", 	ВсеРодители);
				Запрос.УстановитьПараметр("ДатаРекл", 		ТекущаяДата());
				Запрос.УстановитьПараметр("ВсеСклады", 		ВсеСклады);
				Запрос.УстановитьПараметр("СоставЗаказа",	СоставЗаказа);
				Запрос.УстановитьПараметр("ИспользоватьАкцииПоКредиту",	оАкция.АкцияПоКредиту);
				
				
				Запрос.Текст = "ВЫБРАТЬ 
				|	СоставЗаказа.Номенклатура,
				|	СоставЗаказа.МинЦена,
				|	СоставЗаказа.МаксЦена,
				|	СоставЗаказа.НомерСтроки
				|ПОМЕСТИТЬ СоставЗаказа
				|ИЗ
				|	&СоставЗаказа КАК СоставЗаказа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Акции.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ДоступныеАкции
				|ИЗ
				|	Справочник.Акции КАК Акции
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			Склады.Ссылка КАК Ссылка
				|		ИЗ
				|			Справочник.Склады КАК Склады
				|		ГДЕ
				|			Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
				|		ПО Акции.УчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка
				|ГДЕ
				|	 ВЫБОР
				|			КОГДА &ИспользоватьАкцииПоКредиту
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ Акции.АкцияПоКредиту = ЛОЖЬ
				|		КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СоставАкции.Акция,
				|	СоставАкции.Корзина,
				|	СоставАкции.ВидСкидки,
				|	СоставЗаказа.Номенклатура,
				|	СоставЗаказа.МинЦена,
				|	СоставЗаказа.МаксЦена,
				|	СоставЗаказа.НомерСтроки,
				|	СоставАкции.ЗначениеСкидки,
				|	СоставАкции.КорзинаМинЦена,
				|	СоставАкции.КорзинаМаксЦена
				|ПОМЕСТИТЬ ДоступныеКорзины
				|ИЗ
				|	(ВЫБРАТЬ
				|		АкцииСостав.Корзина КАК Корзина,
				|		АкцииСостав.Ссылка КАК Акция,
				|		АкцииСостав.ВидСкидки КАК ВидСкидки,
				|		КорзиныСоставКорзины.Номенклатура КАК Номенклатура,
				|		АкцииСостав.Корзина.МинЦена КАК КорзинаМинЦена,
				|		АкцииСостав.Корзина.МаксЦена КАК КорзинаМаксЦена,
				|		АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидки
				|	ИЗ
				|		ДоступныеАкции КАК ДоступныеАкции
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
				|			ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Корзины.СоставКорзины КАК КорзиныСоставКорзины
				|			ПО (АкцииСостав.Корзина = КорзиныСоставКорзины.Ссылка)) КАК СоставАкции
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставЗаказа КАК СоставЗаказа
				|		ПО СоставАкции.Номенклатура = СоставЗаказа.Номенклатура
				|			И СоставАкции.КорзинаМинЦена <= СоставЗаказа.МаксЦена
				|			И (СоставАкции.КорзинаМаксЦена >= СоставЗаказа.МинЦена
				|				ИЛИ СоставАкции.КорзинаМаксЦена = 0)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Акции.Ссылка КАК СкидкаНаценка,
				|	КорзиныТаблицы.Корзина КАК Корзина,
				|	КорзиныТаблицы.Номенклатура,
				|	КорзиныТаблицы.ВидСкидки,
				|	КорзиныТаблицы.НомерСтроки КАК НомерСтроки,
				|	КорзиныТаблицы.МинЦена КАК МинЦена,
				|	КорзиныТаблицы.МаксЦена КАК МаксЦена,
				|	Акции.Ссылка.ВыгодаДляКлиента КАК ВыгодаДляКлиента,
				|	КорзиныТаблицы.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
				|	КорзиныТаблицы.КорзинаМинЦена,
				|	КорзиныТаблицы.КорзинаМаксЦена
				|ИЗ
				|	ДоступныеАкции КАК Акции
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			АкцииУчастникиАкции.Ссылка КАК Ссылка
				|		ИЗ
				|			Справочник.Акции.УчастникиАкции КАК АкцииУчастникиАкции
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					Склады.Ссылка КАК Ссылка
				|				ИЗ
				|					Справочник.Склады КАК Склады
				|				ГДЕ
				|					Склады.Ссылка В(&ВсеСклады)) КАК ЗапросИерархияТекущегоМагазина
				|				ПО АкцииУчастникиАкции.Склад_ТТ = ЗапросИерархияТекущегоМагазина.Ссылка) КАК ДоступныеАкции
				|		ПО Акции.Ссылка = ДоступныеАкции.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеКорзины КАК КорзиныТаблицы
				|		ПО Акции.Ссылка = КорзиныТаблицы.Акция
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДоступныеАкции.Ссылка КАК Ссылка,
				|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АкцииСостав.Корзина) КАК КоличествоКорзин
				|		ИЗ
				|			ДоступныеАкции КАК ДоступныеАкции
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Акции.Состав КАК АкцииСостав
				|				ПО ДоступныеАкции.Ссылка = АкцииСостав.Ссылка
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ДоступныеАкции.Ссылка) КАК НеобходимыеКорзины
				|		ПО Акции.Ссылка = НеобходимыеКорзины.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДоступныеКорзины.Акция КАК Акция,
				|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКорзины.Корзина) КАК КоличествоКорзин
				|		ИЗ
				|			ДоступныеКорзины КАК ДоступныеКорзины
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ДоступныеКорзины.Акция) КАК ВложенныйЗапрос
				|		ПО Акции.Ссылка = ВложенныйЗапрос.Акция
				|ГДЕ
				|	НеобходимыеКорзины.КоличествоКорзин = ВложенныйЗапрос.КоличествоКорзин
				|	И (НЕ Акции.Ссылка ЕСТЬ NULL )
				|ИТОГИ ПО
				|	СкидкаНаценка";
				
				ВыборкаАкций  = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкидкаНаценка");
				
				ВыборкаАкций.Сбросить();
				масНоменклат = Новый ТаблицаЗначений;
				масНоменклат.колонки.Добавить("НомерСтроки");
				масНоменклат.колонки.Добавить("Корзина");
				Пока ВыборкаАкций.НайтиСледующий(Новый Структура("СкидкаНаценка", оАкция)) Цикл
					ВыборкаСтрок = ВыборкаАкций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
					
					Пока ВыборкаСтрок.Следующий() Цикл
						Стр =масНоменклат.Добавить();
						Стр.НомерСтроки = ВыборкаСтрок.НомерСтроки;
						Стр.Корзина = ВыборкаСтрок.Корзина;
					КонецЦикла;	 
				КонецЦикла;	
				//	масНоменклат.Свернуть("НомерСтроки","");
				// Нужен товар только один товар из корзины. Счетчиком проверить сколько раз входит товар в корзину.
				запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	АкцииСостав.Корзина,
				|	АкцииСостав.ВидСкидки,
				|	АкцииСостав.ЗначениеСкидки
				|ИЗ
				|	Справочник.Акции.Состав КАК АкцииСостав
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
				|		ПО АкцииСостав.Ссылка = Акции.Ссылка
				|ГДЕ
				|	Акции.Ссылка = &Акция";
				запрос.УстановитьПараметр("Акция", оАкция);
				КорзинаАкций = Запрос.Выполнить().Выгрузить();				   
				//получим строки из документа ЧекККМ 
				//и отсортируем из в соответствии с механизмом акции
				запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Акции.ВыгодаДляКлиента как выгода
				|ИЗ
				|	Справочник.Акции КАК Акции
				|ГДЕ
				|	Акции.Ссылка = &Акция";
				запрос.УстановитьПараметр("Акция", оАкция);
				Выгода = Запрос.Выполнить().Выгрузить();
				
				Если Выгода[0].выгода = "Мин" Тогда 
					Ключ = "Цена ВОЗР";
				ИначеЕсли Выгода[0].выгода = "Макс" Тогда 
					Ключ = "Цена УБЫВ";
				ИначеЕсли Выгода[0].выгода = "ПоПорядку" Тогда
					Ключ = "НомерСтроки ВОЗР";
				Иначе
					Ключ = "НомерСтроки УБЫВ";
				КонецЕсли;
				//СоставЗаказа.Сортировать(Ключ);
				
				
				СтрокиЧека = Новый ТаблицаЗначений;
				СтрокиЧека.Колонки.Добавить("НомерСтроки");
				СтрокиЧека.Колонки.Добавить("Номенклатура");	
				СтрокиЧека.Колонки.Добавить("Количество");
				СтрокиЧека.Колонки.Добавить("Цена");
				СтрокиЧека.Колонки.Добавить("СуммаСкидки");
				СтрокиЧека.Колонки.Добавить("Сумма");
				СтрокиЧека.Колонки.Добавить("ПроцентСкидкиНаценки");
				СтрокиЧека.Колонки.Добавить("Корзина");
				СтрокиЧека.Колонки.Добавить("ПометкаУдаления");
				СтрокиЧека.ЗаполнитьЗначения(Ложь,"ПометкаУдаления"); 
				Для каждого стр Из масНоменклат Цикл
					строка = СтрокиЧека.Добавить();
					строка.НомерСтроки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").НомерСтроки;
					строка.Номенклатура = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Номенклатура;
					строка.Количество = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Количество;
					строка.Цена = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Цена;
					строка.СуммаСкидки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").СуммаСкидки;
					строка.Сумма = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").Сумма;
					строка.ПроцентСкидкиНаценки = ЧекККМ.Товары.Найти(стр.НомерСтроки, "НомерСтроки").ПроцентСкидкиНаценки;
					строка.корзина = стр.Корзина; 
				КонецЦикла;  
				ТЧЧека = ЧекККМ.Товары;
				
				
				Если Истина Тогда
					Запрос.Текст = "ВЫБРАТЬ
					|	АкцииСостав.Корзина,
					|	АкцииСостав.ВидСкидки,
					|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
					|	АкцииСостав.НомерСтроки
					|ИЗ
					|	Справочник.Акции.Состав КАК АкцииСостав
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
					|		ПО АкцииСостав.Ссылка = Акции.Ссылка
					|ГДЕ
					|	Акции.Ссылка = &Акция";
					
					запрос.УстановитьПараметр("Акция", оАкция);
					СкидкиАк = Запрос.Выполнить().Выгрузить();          
					
					//сосчитаем не пустые скидки
					
					
					НайденныеСтроки  = новый ТаблицаЗначений; //массив со всеми скидками
					НайденныеСтроки.Колонки.Добавить("НомерСтроки");
					НайденныеСтроки.Колонки.Добавить("Номенклатура");	
					НайденныеСтроки.Колонки.Добавить("Количество");
					НайденныеСтроки.Колонки.Добавить("Цена");
					НайденныеСтроки.Колонки.Добавить("СуммаСкидки");
					НайденныеСтроки.Колонки.Добавить("Сумма");
					НайденныеСтроки.Колонки.Добавить("ЗначениеСкидкиНаценки");
					НайденныеСтроки.Колонки.Добавить("Корзина");
					НайденныеСтроки.Колонки.Добавить("ВидСкидки");
					НайденныеСтроки.Колонки.Добавить("ПометкаУдаления");
					НайденныеСтроки.ЗаполнитьЗначения(Ложь,"ПометкаУдаления");
					//циклом переберем чек и будем смотреть по корзинам вхождения. В соответствии с вхождением начислим скидки.
					СтрокиЧека.Сортировать(Ключ);
					сообщить(Ключ);
					Если Ключ <> "НомерСтроки УБЫВ" тогда
						Для каждого стрКорзиныАкций Из КорзинаАкций Цикл
							СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
							
							Если СтрЧека <> Неопределено  Тогда
								Стр = НайденныеСтроки.Добавить();
								стр.Номенклатура 	     = СтрЧека.Номенклатура;
								стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
								стр.ВидСкидки		     = стрКорзиныАкций.ВидСкидки;
								стр.количество		     = СтрЧека.Количество;
								стр.ЗначениеСкидкиНаценки = стрКорзиныАкций.ЗначениеСкидки;
								стр.Сумма				 = СтрЧека.Сумма;
								Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
								стр.Цена				 = СтрЧека.Цена;
								стр.Корзина				 = СтрЧека.Корзина;
								
								//если есть строка с таким номером то удаляем все строки с этим номером из исходной таблицы чеков.
								Отбор = новый Структура();
								Отбор.Вставить("НомерСтроки", СтрЧека.НомерСтроки);
								Строки = СтрокиЧека.НайтиСтроки(отбор);
								Если  Строки <> неопределено тогда
									Для каждого стрНЧ Из Строки Цикл
										СтрокиЧека.Удалить(стрНЧ);
									КонецЦикла; 
								КонецЕсли
							КонецЕсли
						КонецЦикла; 
					КонецЕсли;
					Если Ключ = "НомерСтроки УБЫВ" тогда
						Для каждого стрЧека Из СтрокиЧека Цикл
							//СтрЧека = СтрокиЧека.Найти(стрКорзиныАкций.Корзина, "Корзина");
							
							для каждого алг из оАкция.состав Цикл
								оВидСкидки = алг.ВидСкидки;
								оЗначениеСкидки = алг.ЗначениеСкидки;
							конеццикла;	
							
							Если СтрЧека <> Неопределено  Тогда
								Стр = НайденныеСтроки.Добавить();
								стр.Номенклатура 	     = СтрЧека.Номенклатура;
								стр.НомерСтроки  	     = СтрЧека.НомерСтроки;
								стр.ВидСкидки		     = оВидСкидки;//стрКорзиныАкций.ВидСкидки;
								стр.количество		     = СтрЧека.Количество;
								стр.ЗначениеСкидкиНаценки = оЗначениеСкидки;//стрКорзиныАкций.ЗначениеСкидки;
								стр.Сумма				 = СтрЧека.Сумма;
								Стр.СуммаСкидки 		 = СтрЧека.СуммаСкидки;
								стр.Цена				 = СтрЧека.Цена;
								стр.Корзина				 = СтрЧека.Корзина;
							КонецЕсли;
						КонецЦикла;	
						
					КонецЕсли;	
					НайденныеСтроки.Сортировать(Ключ);
					//составили список строк для скидок назначим скидки.
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции_(НайденнаяСтрока, НайденнаяСтрока,  НайденнаяСтрока.Сумма);
						
						Если ЗначениеЗаполнено(СкидкаПлатеж) И СкидкаПлатеж >0 тогда
							
							скидка = СкидкаПлатеж;
							
						КонецЕсли;	
						
						
						АтрибутЕсть = оАкция.Атрибуты.Найти("РазныеСкидки", "НазваниеАтрибута");
						Если АтрибутЕсть <> Неопределено тогда
							
							Если ВРег(АтрибутЕсть.ЗначениеАтрибута) = врег("Да") тогда
								
								скидка = РассчитатьЗначениеСкидкиИзКорзины(НайденнаяСтрока);
								
							КонецЕсли;	
							
						КонецЕсли;	
						
						
						
						
						//вычислим 20% от суммы
						Если оАкция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута")<> Неопределено тогда
							Если оАкция.Атрибуты.Найти("ВтораяПокупка", "НазваниеАтрибута").ЗначениеАтрибута = "2" тогда
								процентСуммы =  ((ТЧЧека[НайденнаяСтрока.НомерСтроки-1].Сумма)*30)/100;
								Если скидка <= процентСуммы тогда
									
								Иначе 		  
									скидка =  процентСуммы;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].Сумма = НайденнаяСтрока.Сумма - скидка;
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(НайденнаяСтрока.Сумма,						
						Истина,
						Истина,
						Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
						
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].СуммаСкидки = скидка;
						ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
						Если НайденнаяСтрока.ВидСкидки = "Процент" Тогда
							ТЧЧека[НайденнаяСтрока.НомерСтроки-1].ПроцентСкидкиНаценки = НайденнаяСтрока.ЗначениеСкидкиНаценки;
						КонецЕсли;
						СтрокаАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
						Если СтрокаАтрибута <> неопределено тогда
							ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
							
							Если вРег(ЗначениеАтрибута_) = вРег("2") тогда
								
								
								//ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(ЧекККМ.НомерТелефона),ЧекККМ.НомерТелефона,НомерТелефона);
								
							Иначе
								ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефонаМТС),НомерТелефонаМТС,ЧекККМ.НомерТелефона);
							КонецЕсли;
							
						Иначе
							ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефонаМТС),НомерТелефонаМТС,ЧекККМ.НомерТелефона);
						КонецЕсли;
				
						
						//Если Скидка>0 тогда	
							// SMV08.12.2011 Просто убрали лишние условия, в любом случае акционный товар будет заноситься в ТЧСкидки
							Стр = ТЧакции.добавить();
							Стр.Сумма = Скидка;
							Стр.СкидкаНаценка =Акция;
							Стр.КлючСтроки = НайденнаяСтрока.НомерСтроки;
							//Стр.Основание = Перечисления.ОснованияИспользованияКодаРазблокировки.АкцияМТС;
														
						//КонецЕсли;
					КонецЦикла;
					
				Иначе
					//Второй вариант по порядку
					Запрос.Текст = "ВЫБРАТЬ
					|	АкцииСостав.Корзина,
					|	АкцииСостав.ВидСкидки,
					|	АкцииСостав.ЗначениеСкидки КАК ЗначениеСкидкиНаценки,
					|	АкцииСостав.НомерСтроки
					|ИЗ
					|	Справочник.Акции.Состав КАК АкцииСостав
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Акции КАК Акции
					|		ПО АкцииСостав.Ссылка = Акции.Ссылка
					|ГДЕ
					|	Акции.Ссылка = &Акция";
					//|	И АкцииСостав.ЗначениеСкидки > 0";
					запрос.УстановитьПараметр("Акция", оАкция);
					СкидкиАк = Запрос.Выполнить().Выгрузить();
					
					Для ит = 0 По СкидкиАК.Количество()-1 Цикл
						
						Для Ж = 1 По СтрокиЧека.Количество() Цикл
							
							Если СкидкиАк[ит].НомерСтроки = ж Тогда
								скидка = РассчитатьЗначениеСкидкиПоВидуСкидкиИзАкции_(СкидкиАк[ит], СтрокиЧека[ж-1],  СтрокиЧека[ж-1].Сумма);
								Если ЗначениеЗаполнено(СкидкаПлатеж) И СкидкаПлатеж >0 тогда
									
									скидка = СкидкаПлатеж;
									
								КонецЕсли;	
								
								ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].Сумма = СтрокиЧека[ж-1].Сумма - скидка;
								ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаНДС         = Ценообразование.РассчитатьСуммуНДС(СтрокиЧека[ж-1].Сумма,						
								Истина,
								Истина,
								Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
								
								ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].СуммаСкидки = скидка;
								ТЧЧека[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
								Если СкидкиАк[ит].ВидСкидки = "Процент" Тогда
									ТЧЧека[СтрокиЧека[ж-1].НомерСтроки-1].ПроцентСкидкиНаценки = СкидкиАк[ит].ЗначениеСкидкиНаценки;
								КонецЕсли;	
								
							КонецЕсли;
							
							Если истина тогда		
								ТЧакции[НайденнаяСтрока.НомерСтроки-1].Сумма = скидка;
								ТЧакции[НайденнаяСтрока.НомерСтроки-1].СкидкаНаценка = Акция;
								ТЧакции[НайденнаяСтрока.НомерСтроки-1].КлючСтроки = НайденнаяСтрока.НомерСтроки;
								СтрокаАтрибута = Акция.Атрибуты.Найти("Тип акции", "НазваниеАтрибута");
								Если СтрокаАтрибута <> неопределено тогда
									ЗначениеАтрибута_ = СтрокаАтрибута.ЗначениеАтрибута;
									
									Если вРег(ЗначениеАтрибута_) = вРег("2") тогда
										
										
										//ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(ЧекККМ.НомерТелефона),ЧекККМ.НомерТелефона,НомерТелефона);
										
									Иначе
										ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефонаМТС),НомерТелефонаМТС,ЧекККМ.НомерТелефона);
									КонецЕсли;
									
								Иначе
									ТЧЧека[НайденнаяСтрока.НомерСтроки-1].НомерТелефона = ?(ЗначениеЗаполнено(НомерТелефонаМТС),НомерТелефонаМТС,ЧекККМ.НомерТелефона);
								КонецЕсли;



							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
				КонецЕсли;	
				//Попытка
				//	ЧекККМ.Записать()
				//Исключение
				//КонецПопытки;   
				//ЧекККМ.Разблокировать();
				
				
			КонецПроцедуры

Функция  ЗагрузитьМакет(ИмяМакета, ТаблицаЗ)
	
	ТаблицаЗ = Новый ТаблицаЗначений;
	ТаблицаЗ.Колонки.Добавить("Артикул");
	
	МакетСЦенами	  = ПолучитьМакет(ИмяМакета);
	
	
	Для Ном = 1 По МакетСЦенами.ВысотаТаблицы Цикл
		
		Артикул = СокрЛП(МакетСЦенами.Получитьобласть(Ном, 1, Ном, 1).ТекущаяОбласть.Текст);
		
		Если ПустаяСтрока(Артикул) Тогда
			Продолжить;
		КонецЕсли;
		
		стр = ТаблицаЗ.Добавить();
		Стр.Артикул = Артикул;
		
	КонецЦикла;
	
КонецФункции

//6836_Ульянников

Функция ЗаписатьНомерТелефонаВХЗ(НомерТелефона, НомерСтроки) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерТелефонаАкции", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	
	НС = ТЗ.Добавить();
	НС.НомерТелефонаАкции = НомерТелефона;
	НС.КлючСтроки         = НомерСтроки;
	
	СтрокаЧека = Чек.Товары[НомерСтроки-1]; 
	
	СтруктураРекПлат = СтрокаЧека.РеквизитыПлатежа.Получить();
	Если ТипЗнч(СтруктураРекПлат) = Тип("Структура") Тогда
		СтруктураРекПлат.Вставить("ТаблицаАкции", ТЗ);
		СтрокаЧека.РеквизитыПлатежа = Новый ХранилищеЗначения(СтруктураРекПлат);
	ИначеЕсли	СтруктураРекПлат = Неопределено Тогда
		СтрокаЧека.РеквизитыПлатежа = Новый ХранилищеЗначения(ТЗ); 
	КонецЕсли;	 
	
	
КонецФункции	

//6836_Ульянников

Функция НомерТелефонаЦифрами_Модуль(СтрокаТелефон) Экспорт	
	Стр0 = стрЗаменить(СтрокаТелефон," ","");
	Стр1 = стрЗаменить(Стр0,"+","");
	Стр2 = стрЗаменить(Стр1,"-","");
	Стр3 = стрЗаменить(Стр2,"(","");
	Стр4 = стрЗаменить(Стр3,")","");
	Стр5 = Прав(Стр4,10);
	
	Возврат Стр5;
КонецФункции	

СтруктураАтрибутов = Новый Структура;